<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C语言程序设计</title>
      <link href="/2024/10/04/c/"/>
      <url>/2024/10/04/c/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机语言"><a href="#计算机语言" class="headerlink" title="计算机语言"></a>计算机语言</h1><p>计算机语言（Computer Language）指用于人与计算机之间通讯的语言。计算机语言是人与计算机之间传递信息的媒介。计算机系统最大特征是指令通过一种语言传达给机器。为了使电子计算机进行各种工作，就需要有一套用以编写计算机程序的数字、字符和语法规划，由这些<a href="https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6/4768913">字符</a>和<a href="https://baike.baidu.com/item/%E8%AF%AD%E6%B3%95%E8%A7%84%E5%88%99/1095093">语法规则</a>组成计算机各种指令（或各种语句）。这些就是计算机能接受的语言。</p><h2 id="解释型vs编译型"><a href="#解释型vs编译型" class="headerlink" title="解释型vs编译型"></a>解释型vs编译型</h2><blockquote><p>解释型语言：解释性语言编写的程序不进行预先编译，以文本方式存储程序代码。执行时才翻译执行。程序每执行一次就要翻译一遍。<br>优缺点：跨平台能力强，易于调，执行速度慢。</p></blockquote><blockquote><p>编译型语言：编译型语言在执行之前要先经过编译过程，编译成为一个可执行的机器语言的文件，比如exe。因为翻译只做一遍，以后都不需要翻译，所以执行效率高。<br>编译型语言的优缺点：执行效率高，缺点是跨平台能力弱，不便调试。</p></blockquote><h1 id="C语言之Hello"><a href="#C语言之Hello" class="headerlink" title="C语言之Hello"></a>C语言之Hello</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> <span class="comment">//头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//入口函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>); <span class="comment">//打印输出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注释</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="C语言基础"><a href="#C语言基础" class="headerlink" title="C语言基础"></a>C语言基础</h1><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><table><thead><tr><th align="center">auto</th><th align="center">break</th><th align="center">case</th><th align="center">char</th></tr></thead><tbody><tr><td align="center">const</td><td align="center">continue</td><td align="center">default</td><td align="center">do</td></tr><tr><td align="center">double</td><td align="center">else</td><td align="center">enum</td><td align="center">extern</td></tr><tr><td align="center">float</td><td align="center">for</td><td align="center">goto</td><td align="center">if</td></tr><tr><td align="center">int</td><td align="center">long</td><td align="center">register</td><td align="center">retrun</td></tr><tr><td align="center">short</td><td align="center">signed</td><td align="center">sizeof</td><td align="center">static</td></tr><tr><td align="center">struct</td><td align="center">switch</td><td align="center">typedef</td><td align="center">union</td></tr><tr><td align="center">unsigned</td><td align="center">void</td><td align="center">volatile</td><td align="center">while</td></tr></tbody></table><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><blockquote><ul><li>基本类型<ul><li>数值类型<ul><li>整型<ul><li>短整型 short</li><li>整型 int</li><li>长整型 long</li></ul></li><li>浮点型<ul><li>单精度型 float</li><li>双精度型 double</li></ul></li></ul></li><li>字符类型 char</li></ul></li><li>构造类型<ul><li>数组</li><li>结构体 struct</li><li>共用体 union</li><li>枚举类型 enum</li></ul></li><li>指针类型</li><li>空类型void</li></ul></blockquote><h3 id="整型数据"><a href="#整型数据" class="headerlink" title="整型数据"></a>整型数据</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> <span class="comment">// 注释，引入头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//入口</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//常量：在程序运行过程中，其值不可以改变的量</span></span><br><span class="line">    <span class="comment">//整型常量  10 -10  </span></span><br><span class="line"><span class="comment">//变量: 其值可以改变的量被称为变量</span></span><br><span class="line"><span class="type">int</span> age = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;年龄是%d&quot;</span>, age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">数据类型</th><th align="center">关键字</th><th align="center">空间大小</th><th align="center">数据范围</th></tr></thead><tbody><tr><td align="center">短整型</td><td align="center">short</td><td align="center">2字节</td><td align="center">[2^-15,2^15-1]</td></tr><tr><td align="center">无符号短整型</td><td align="center">unsigned short</td><td align="center">2字节</td><td align="center">[0,2^15-1]</td></tr><tr><td align="center">整型</td><td align="center">int</td><td align="center">4字节</td><td align="center">[2^-31,2^31-1]</td></tr><tr><td align="center">无符号整型</td><td align="center">unsigned int</td><td align="center">4字节</td><td align="center">[0,2^31-1]</td></tr><tr><td align="center">长整型</td><td align="center">long</td><td align="center">windows：4字节</td><td align="center">[2^-31,2^31-1]</td></tr><tr><td align="center">无符号长整型</td><td align="center">unsigned long</td><td align="center">windows：4字节</td><td align="center">[0,2^31-1]</td></tr></tbody></table><h3 id="浮点型数据"><a href="#浮点型数据" class="headerlink" title="浮点型数据"></a>浮点型数据</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> <span class="comment">// 注释，引入头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//入口</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//常量：在程序运行过程中，其值不可以改变的量</span></span><br><span class="line"><span class="comment">//实型(浮点型)常量  10.1 -10.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//变量: 其值可以改变的量被称为变量</span></span><br><span class="line"><span class="type">float</span> price = <span class="number">100.0f</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;价格是%f&quot;</span>, price);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">数据类型</th><th align="center">关键字</th><th align="center">字节</th><th align="center">数值范围</th></tr></thead><tbody><tr><td align="center">单精度</td><td align="center">float</td><td align="center">4字节</td><td align="center">3.4E-38 ~ 3.4E+38</td></tr><tr><td align="center">双精度</td><td align="center">double</td><td align="center">8字节</td><td align="center">1.7E-308 ~ 1.7E+308</td></tr></tbody></table><h2 id="字符型数据"><a href="#字符型数据" class="headerlink" title="字符型数据"></a>字符型数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> <span class="comment">// 注释，引入头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//入口</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//常量：在程序运行过程中，其值不可以改变的量</span></span><br><span class="line"><span class="comment">//字符型常量 &#x27;k&#x27; </span></span><br><span class="line"><span class="comment">//字符串&quot;kerwin&quot;</span></span><br><span class="line"><span class="comment">//变量: 其值可以改变的量被称为变量</span></span><br><span class="line"><span class="type">char</span> alias = <span class="string">&#x27;K&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;年龄是%c&quot;</span>, alias);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">数据类型</th><th align="center">关键字</th><th align="center">空间大小</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">字符型</td><td align="center">signed char</td><td align="center">1字节</td><td align="center">[-128,127]</td></tr><tr><td align="center">无符号字符型</td><td align="center">unsigned char</td><td align="center">1字节</td><td align="center">[0,255]</td></tr></tbody></table><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><blockquote><p>对数字类型（整型，浮点型，字符型）的数据进行运算</p></blockquote><table><thead><tr><th align="center">运算符</th><th align="center">含义</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">对两个数字进行相加的计算</td><td align="center">10 + 3 &#x3D; 13</td></tr><tr><td align="center">-</td><td align="center">对两个数字进行相减的计算</td><td align="center">10 - 3 &#x3D; 7</td></tr><tr><td align="center">*</td><td align="center">对两个数字进行相乘的计算</td><td align="center">10 * 3 &#x3D; 30</td></tr><tr><td align="center">&#x2F;</td><td align="center">对两个数字进行相除的计算</td><td align="center">10 &#x2F; 3 &#x3D; 3</td></tr><tr><td align="center">%</td><td align="center">对两个数字进行求模的计算（求余数）</td><td align="center">10 % 3 &#x3D; 1</td></tr><tr><td align="center">++x</td><td align="center">前自增：x先进行+1，再进行运算</td><td align="center">y &#x3D; ++x;x &#x3D; x+1，y &#x3D; x + 1</td></tr><tr><td align="center">x++</td><td align="center">后自增：再进行运算，x先进行+1</td><td align="center">y &#x3D; x++;y &#x3D; x,x &#x3D; x + 1</td></tr><tr><td align="center">–x</td><td align="center">前自减：x先进行-1，再进行运算</td><td align="center">y &#x3D; –x;x &#x3D; x-1，y &#x3D; x - 1</td></tr><tr><td align="center">x–</td><td align="center">后自增：再进行运算，x先进行-1</td><td align="center">y &#x3D; x–;y &#x3D; x,x &#x3D; x - 1</td></tr></tbody></table><blockquote><p>注意事项：</p><ol><li>整型与整型计算的结果，还是一个整型，所以如果10&#x2F;3，得到的结果是浮点型3.33333，此时系统会将这个数字强制类型转换成整型的结果，<wavy>舍去小数点后面的所有数字</wavy>，只保留整数部分3</li><li>在进行计算的时候，结果会进行类型提升，<wavy>将结果提升为取值氛围大的数据类型</wavy><ul><li>int 与 int 的计算结果是 int</li><li>int 与 long 的计算结果是 long</li><li>float 与 long 的计算结果是 float</li><li>float 与 double 的计算结果是 double</li></ul></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> y = <span class="number">0</span>,x = <span class="number">0</span>;</span><br><span class="line">   y = x++;</span><br><span class="line">   std::cout &lt;&lt; <span class="string">&quot;y = &quot;</span> &lt;&lt;  y &lt;&lt; <span class="string">&quot;;x = &quot;</span> &lt;&lt; x &lt;&lt; std::endl; <span class="comment">// y = 0;x = 1</span></span><br><span class="line">   </span><br><span class="line">   <span class="type">int</span> y = <span class="number">0</span>,x = <span class="number">0</span>;</span><br><span class="line">   y = ++x;</span><br><span class="line">   std::cout &lt;&lt; <span class="string">&quot;y = &quot;</span> &lt;&lt;  y &lt;&lt; <span class="string">&quot;;x = &quot;</span> &lt;&lt; x &lt;&lt; std::endl; <span class="comment">// y = 1;x = 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><blockquote><p>将等号<code>=</code>右边的值赋给左边的变量<br>下面表格的前提：int num &#x3D; 10;</p></blockquote><table><thead><tr><th align="center">运算符</th><th align="center">示例</th><th align="center">运算结果</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="center">num &#x3D; 10</td><td align="center">(num &#x3D; 10)  &#x3D;&gt;  10</td></tr><tr><td align="center">+&#x3D;</td><td align="center">num +&#x3D; 10</td><td align="center">num &#x3D; (int)(num +10)</td></tr><tr><td align="center">-&#x3D;</td><td align="center">num -&#x3D; 10</td><td align="center">num &#x3D; (int)(num -10)</td></tr><tr><td align="center">*&#x3D;</td><td align="center">num *&#x3D; 10</td><td align="center">num &#x3D; (int)(num *10)</td></tr><tr><td align="center">&#x2F;&#x3D;</td><td align="center">num &#x2F;&#x3D; 10</td><td align="center">num &#x3D; (int)(num &#x2F;10)</td></tr><tr><td align="center">%&#x3D;</td><td align="center">num %&#x3D; 10</td><td align="center">num &#x3D; (int)(num %10)</td></tr></tbody></table><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><blockquote><p>对两个变量进行大小关系的比较，最后比较的结果一定是布尔类型的</p></blockquote><table><thead><tr><th align="center">运算符</th><th align="center">示例</th><th align="center">运算结果</th></tr></thead><tbody><tr><td align="center">&lt;</td><td align="center">10 &lt; 20</td><td align="center">true</td></tr><tr><td align="center">&gt;</td><td align="center">10 &gt; 20</td><td align="center">false</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">10 &lt;&#x3D; 20</td><td align="center">true</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">10 &gt;&#x3D; 20</td><td align="center">false</td></tr><tr><td align="center">&#x3D;&#x3D;</td><td align="center">10 &#x3D;&#x3D; 20</td><td align="center">false</td></tr><tr><td align="center">!&#x3D;</td><td align="center">10 !&#x3D; 20</td><td align="center">true</td></tr></tbody></table><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><blockquote><p>对两个布尔类型的变量进行的逻辑操作</p></blockquote><table><thead><tr><th align="center">运算符</th><th align="left">描述</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="left">与运算，两边为真即为真，任意一个为假，结果即为假</td><td align="center">true &amp; true  &#x3D;&gt;  true</td></tr><tr><td align="center">|</td><td align="left">或运算，两边为假即为假，任意一个为真，结果即为真</td><td align="center">true | false  &#x3D;&gt;  true</td></tr><tr><td align="center">!</td><td align="left">非运算，非真即假，非假及真</td><td align="center">!true  &#x3D;&gt;  false</td></tr><tr><td align="center">^</td><td align="left">异或运算，相同为假，不同为真</td><td align="center">true  ^  true  &#x3D;&gt;  false</td></tr><tr><td align="center">&amp;&amp;</td><td align="left">短路与，左边的结果为假，右边的表达式不参与运算</td><td align="center">false &amp;&amp; true  &#x3D;&gt;  true</td></tr><tr><td align="center">||</td><td align="left">短路或，左边的结果为真，右边的表达式不参与运算</td><td align="center">true || false  &#x3D;&gt;  true</td></tr></tbody></table><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><blockquote><p>作用于两个整数数字的运算，将参与运算的每一个数字计算出补码，对补码中的每一位进行类似于逻辑运算的操作，1相当于True，0相当于False</p></blockquote><div class="note red anzhiyufont anzhiyu-icon-dengpao simple"><ul><li>原码：十进制数据的二进制表现形式，最左边为符号位，0为正，1为负</li><li>反码：正数的反码是本身，负数的反码在原码的基础上，符号位不变。数值取反，0变1，1变0</li><li>补码：正数的补码是本身，负数的补码在反码的基础上+1</li></ul></div><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">位与运算</td><td align="center">10  &amp;  20</td></tr><tr><td align="center">|</td><td align="center">位或运算</td><td align="center">10  &amp;  20</td></tr><tr><td align="center">^</td><td align="center">位异或运算</td><td align="center">10  &amp;  20</td></tr><tr><td align="center">~</td><td align="center">按位取反运算</td><td align="center">~10</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">位左移运算</td><td align="center">10  &lt;&lt;  1  &#x3D;&gt; 10 * 2</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">位右移运算</td><td align="center">10  &gt;&gt;  1  &#x3D;&gt; 10 &#x2F; 2</td></tr></tbody></table><h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><blockquote><p>语法：<code>condition（条件）</code> <code>？</code> <code>value1</code> <code>:</code> <code>value2</code><br><code>condition</code>：是一个bool类型的变量或者bool类型运算结果的表达式<br> 运算逻辑：如果<code>condition</code>的值是true,三目运算符的结果取value1，否则取value2</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> age = <span class="number">22</span>;</span><br><span class="line">   std::cout &lt;&lt; (age &gt;= <span class="number">18</span> ? <span class="string">&quot;已成年&quot;</span> : <span class="string">&quot;未成年&quot;</span>) &lt;&lt; std::endl; <span class="comment">// 已成年</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><p><strong>运算符优先级</strong></p><ul><li>在表达式中按照优先级先后进行运算,优先级高的先于优先级低的先运算。</li><li>优先级一样的按结合性来运算</li></ul><p><strong>运算符结合性</strong></p><p>左结合性：从左向右运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum = x + y + z;</span><br></pre></td></tr></table></figure><p>右结合性:从右向左运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a,b,c;</span><br><span class="line"><span class="type">int</span> d = <span class="number">100</span>;</span><br><span class="line">a = b = c = d += <span class="number">100</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>优先级别</th><th>运算符</th><th>运算形式</th><th>结合方向</th><th>名称或含义</th></tr></thead><tbody><tr><td>1</td><td>() [] . -&gt;</td><td>(e) a[e] x.y p-&gt;x</td><td>自左至右</td><td>圆括号 数组下标 成员运算符 用指针访问成员的指向运算符</td></tr><tr><td>2</td><td>-+ ++ – ! ~ (t) * &amp; sizeof</td><td>-e ++x或x++ !e ~e (t)e ￥p &amp;.x sizeof(t)</td><td>自右至左</td><td>负号和正号 自增运算和自减运算 逻辑非 按位取反 类型转换 指针运算，由地址求内容 求变量的地址 求某类型变量的长度</td></tr><tr><td>3</td><td>* &#x2F; %</td><td>e1 * e2</td><td>自左至右</td><td>乘、除和求余</td></tr><tr><td>4</td><td>+ -</td><td>e1 + e2</td><td>自左至右</td><td>加和减</td></tr><tr><td>5</td><td>&lt;&lt; &gt;&gt;</td><td>e1 &lt;&lt; e2</td><td>自左至右</td><td>左移和右移</td></tr><tr><td>6</td><td>&lt; &lt;&#x3D; &gt; &gt;&#x3D;</td><td>e1 &lt; e2</td><td>自左至右</td><td>关系运算（比较）</td></tr><tr><td>7</td><td>&#x3D;&#x3D; !&#x3D;</td><td>e1 &#x3D;&#x3D; e2</td><td>自左至右</td><td>等于和不等于比较</td></tr><tr><td>8</td><td>&amp;</td><td>e1 &amp; e2</td><td>自左至右</td><td>按位与</td></tr><tr><td>9</td><td>^</td><td>e1 ^ e2</td><td>自左至右</td><td>按位异或</td></tr><tr><td>10</td><td>|</td><td>e1 | e2</td><td>自左至右</td><td>按位或</td></tr><tr><td>11</td><td>&amp;&amp;</td><td>e1 &amp;&amp; e2</td><td>自左至右</td><td>逻辑与（并且）</td></tr><tr><td>12</td><td>||</td><td>e1 || e2</td><td>自左至右</td><td>逻辑或（或者)</td></tr><tr><td>13</td><td>? :</td><td>e1 ? e2 : e3</td><td>自右至左</td><td>条件运算 赋值运算</td></tr><tr><td>14</td><td>&#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D; &gt;&gt;&#x3D; &lt;&lt;&#x3D;&#x3D; &amp;&#x3D; ^&#x3D; |&#x3D;</td><td>x&#x3D;e  x+&#x3D;e</td><td>自右至左</td><td></td></tr><tr><td>15</td><td>,</td><td>e1,e2</td><td>自左至右</td><td>顺序求值运算</td></tr></tbody></table><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><blockquote><p>代码从上往下，依次执行</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="number">10</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="number">20</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="number">30</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="number">40</span>);</span><br><span class="line">   <span class="comment">// 输出： 10  20  30  40</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><blockquote><p>程序在某一个节点遇到了多种执行的可能性，根据条件，选择一个分支继续执行</p></blockquote><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><blockquote><p><code>if else</code> 语句：可用于变量的区间范围进行判断，根据结果选择分支继续执行</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件判断<span class="number">1</span> <span class="literal">true</span> or <span class="literal">false</span>)&#123;</span><br><span class="line">   <span class="comment">// 条件判断1结果为true，执行该括号内的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(条件判断<span class="number">1</span> <span class="literal">true</span> or <span class="literal">false</span>) &#123;</span><br><span class="line">   <span class="comment">// 条件判断1结果为false，条件判断2结果为true，执行该括号内的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">// 条件判断2结果为false，执行该括号内的代码</span></span><br><span class="line">&#125;....</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果if 或 else if 或 else 后面的括号中有且只有一条语句，此时括号可以省略</span></span><br><span class="line"><span class="keyword">if</span>(条件判断<span class="number">1</span> <span class="literal">true</span> or <span class="literal">false</span>) </span><br><span class="line">   <span class="comment">// 条件判断1结果为true，执行该条语句</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(条件判断<span class="number">1</span> <span class="literal">true</span> or <span class="literal">false</span>)</span><br><span class="line">   <span class="comment">// 条件判断1结果为false，条件判断2结果为true，执行该括号内的代码</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="comment">// 条件判断2结果为false，执行该括号内的代码</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">int</span> age = <span class="number">22</span>;</span><br><span class="line">   <span class="keyword">if</span>( age &gt;= <span class="number">16</span> &amp;&amp; age &lt;= <span class="number">18</span> )&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;青少年&quot;</span>);</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span>( age &gt;<span class="number">18</span> )&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;成年人&quot;</span>);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;年龄错误！！&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">int</span> age = <span class="number">22</span>;</span><br><span class="line">   <span class="keyword">if</span>( age &gt;= <span class="number">16</span> &amp;&amp; age &lt;= <span class="number">18</span> )</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;青少年&quot;</span>);</span><br><span class="line">   <span class="keyword">if</span>( age &gt;<span class="number">18</span> )</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;成年人&quot;</span>);</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;年龄错误！！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch-case"><a href="#switch-case" class="headerlink" title="switch-case"></a>switch-case</h3><blockquote><p><code>switch case</code>语句：用于多重分支且条件判断是等值（固定特定值）判断的情况</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="keyword">switch</span>(variable)&#123;</span><br><span class="line">      <span class="keyword">case</span> const1:</span><br><span class="line">         <span class="comment">// variable == const1,执行该代码段</span></span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> const1:</span><br><span class="line">         <span class="comment">// variable == const2,执行该代码段</span></span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         <span class="comment">// variable 没有匹配的值，则执行该代码段</span></span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>variable：确定的<code>字符</code>或<code>整数</code>值</li><li>case：值只能是<code>字符</code>或<code>整数</code>的字面量，不能是变量，值不允许重复</li><li>break：表示<code>跳出/结束</code>，结束switch语句</li><li>default：所有情况都不匹配，执行该处的内容，可以写在任意位置，也可以省略不写</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> month = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">123</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;春天&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">456</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;夏天&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">789</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;秋天&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">101112</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;冬天&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;没有该季节！！！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 输出：春天</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>switch case 语句中的的<code>穿透性</code>：</p><ul><li>当switch的变量和某一个case的值匹配上之后，将会跳过后续的case或者default的匹配，直接向后穿透</li><li>为了避免switch的穿透性，每一个case和default可以使用<code>break</code>，来跳出switch语句</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> month = <span class="number">456</span>;</span><br><span class="line">    <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">123</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;春天&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">456</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;夏天&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">789</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;秋天&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">101112</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;冬天&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;没有该季节！！！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    <span class="comment">// 输出：夏天  秋天  冬天  没有该季节！！！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当然也可以利用switch的穿透性实现特定的功能</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> month = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;春天&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;夏天&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;秋天&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;冬天&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;没有该季节！！！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    <span class="comment">// 输出：夏天</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><blockquote><p>某段代码需要被重复执行多次并且遵循一定规律，则使用循环结构</p></blockquote><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">   <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>条件表达式：循环终止的判断条件语句，结果为bool类型的表达式</li><li>循环体：n行循环要执行的语句</li></ul></blockquote><blockquote><p>流程说明：</p><ol><li>执行条件表达式，也就是执行循环是否终止的判断条件，表达式的值如果是false，则循环结束，如果是true，循环继续执行</li><li>执行循环语句，大括号中的代码，需要循环的代码</li><li>回到第一步再次执行，直到表达式的结果为false，while循环才会结束</li></ol></blockquote><blockquote><p>注意事项</p><ol><li>while循环本身没有循环变量的声明和初始化的部分，应在while循环前声明循环变量并赋值</li><li>while循环本身也没有控制循环终止的判断条件语句部分，所以需要再循环体中增加相应的控制语句，否则容易死循环</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">int</span> count = <span class="number">1</span>; <span class="comment">// 循环变量声明和初始化</span></span><br><span class="line">   <span class="keyword">while</span>(i &lt;= <span class="number">5</span>)&#123; <span class="comment">// 循环条件</span></span><br><span class="line">      <span class="comment">// 循环体</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i)</span><br><span class="line">      i++; <span class="comment">// 更新循环变量</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 输出：1 2 3 4 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>示例：需要在控制台上输入一个整型数字，如果用户在控制台上输入的不正确，让用户重复输入，直到输入正确为止</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入一个整数：&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>.fail())&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入错误，请重新输入：&quot;</span>;</span><br><span class="line">        <span class="built_in">cin</span>.clear();</span><br><span class="line">        <span class="built_in">cin</span>.ignore(numeric_limits&lt; streamsize &gt;::max(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">   <span class="comment">// 循环体</span></span><br><span class="line">&#125; <span class="keyword">while</span>(条件表达式);</span><br></pre></td></tr></table></figure><blockquote><p>流程说明</p><ol><li>先执行循环体中的语句</li><li>执行条件表达式（循环终止的条件判断语句），结果如果为<code>true</code>，继续执行，如果是<code>false</code>，则循环结束</li><li>回到第一步，再次执行，直到条件表达式的结果为<code>false</code></li></ol></blockquote><blockquote><p>注意事项</p><ul><li>do-while循环为先执行后判断，先执行一次循环体中的代码，然后再执行条件表达式，所以do-while循环至少执行一次</li><li>其他特点跟while循环一样</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 初始化部分</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 循环体</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="comment">// 循环变量更新</span></span><br><span class="line">        count++;</span><br><span class="line">    &#125; <span class="keyword">while</span>(count &lt; <span class="number">3</span>); <span class="comment">// 循环条件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(循环起点;循环条件;循环步长)&#123;</span><br><span class="line">   <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>循环起点：循环变量的<code>初始化</code>，如 int i &#x3D; 0</li><li>循环条件：循环<code>终止</code>的条件，为布尔表达式， 如 i &lt; 10</li><li>循环步长：循环改变的控制条件语句，如 i++</li><li>循环体：循环要执行的语句</li><li>表达式之间要用分号<code>;</code>分隔</li></ul></blockquote><blockquote><p>流程说明</p><ol><li>第一步：执行循环变量初始化语句（循环起点）</li><li>第二步：执行循环终止的判断条件表达式，结果为<code>ture</code>，继续执行第三步，结果为<code>false</code>，结束循环</li><li>第三步：执行循环语句</li><li>第四步：执行循环步长，也就是循环改变的控制条件语句，使循环变量的值发生改变</li><li>第五步：回到第二步，再次执行执行第二步到第五步，直到第二步的循环条件的表达式结果为<code>false</code>，循环结束</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++) &#123;</span><br><span class="line">       <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;当前循环变量的值：&quot;</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 输出： 0 1 2 3 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>for循环的小括号中每一个部分都可以省略不写,但是分号<code>;</code>不能省略</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>( ; ; )&#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      i++;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="流程控制的关键字"><a href="#流程控制的关键字" class="headerlink" title="流程控制的关键字"></a>流程控制的关键字</h3><blockquote><p><code>break</code>：</p><ul><li>用于终止某个语句块的执行</li><li>如果是在循环中，则是跳出所在的循环，如果是在switch语句中，则为跳出所在的switch语句</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; <span class="number">10</span>;i++) &#123;</span><br><span class="line">       <span class="keyword">if</span>(i == <span class="number">6</span>)&#123;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 输出：1 2 3 4 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>continue</code>：</p><ul><li>跳过本次循环，执行下一次循环，（如果有多次循环，默认继续执行离自己最近的循环）提前终止本次循环</li><li>只能在循环语句中使用</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; <span class="number">10</span>;i++) &#123;</span><br><span class="line">       <span class="keyword">if</span>(i == <span class="number">6</span>)&#123;</span><br><span class="line">           <span class="keyword">continue</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 输出：1 2 3 4 5 7 8 9 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>goto</code>：</p><ul><li>可以在任意的位置设置<code>标签</code>,使用关键字<code>goto</code>可以直接跳转到指定的<code>标签</code>的位置继续执行</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    label1:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>) </span><br><span class="line">    <span class="keyword">goto</span> label3;</span><br><span class="line"></span><br><span class="line">    label2:</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    label3:</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 输出：1 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数的概念"><a href="#函数的概念" class="headerlink" title="函数的概念"></a>函数的概念</h2><ul><li><p>函数就是把任意一段代码放在一个 <strong>盒子</strong> 里面</p></li><li><p>在我想要让这段代码执行的时候，直接执行这个 <strong>盒子</strong> 里面的代码就行</p></li><li><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个是我们以前写的一段代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数，这个 &#123;&#125; 就是那个 “盒子”</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fn</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 这个函数我们以前写的代码</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><ul><li><p>我们在定义函数和调用函数的时候都出现过 <code>()</code></p></li><li><p>现在我们就来说一下这个 <code>()</code> 的作用</p></li><li><p>就是用来放参数的位置</p></li><li><p>参数分为两种 <strong>形参</strong> 和 <strong>实参</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fn</span><span class="params">(行参写在这里)</span> &#123;</span><br><span class="line">  <span class="comment">// 一段代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(实参写在这里)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p><strong>形参和实参的作用</strong></p><ol><li><p>形参</p><ul><li><p>就是在函数内部可以使用的变量，在函数外部不能使用</p></li><li><p>每写一个单词，就相当于在函数内部定义了一个可以使用的变量（遵循变量名的命名规则和命名规范）</p></li><li><p>多个单词之间以 <code>,</code> 分隔</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 书写一个参数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fn</span><span class="params">(num)</span> &#123;</span><br><span class="line">  <span class="comment">// 在函数内部就可以使用 num 这个变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 书写两个参数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(num1, num2)</span> &#123;</span><br><span class="line">  <span class="comment">// 在函数内部就可以使用 num1 和 num2 这两个变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>行参的值是在函数调用的时候由实参决定的</strong></p></li></ul></li><li><p>实参</p><ul><li><p>在函数调用的时候给行参赋值的</p></li><li><p>也就是说，在调用的时候是给一个实际的内容的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fn</span><span class="params">(num)</span> &#123;</span><br><span class="line">  <span class="comment">// 函数内部可以使用 num </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数的本次调用，书写的实参是 100</span></span><br><span class="line"><span class="comment">// 那么本次调用的时候函数内部的 num 就是 100</span></span><br><span class="line">fn(<span class="number">100</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数的本次调用，书写的实参是 200</span></span><br><span class="line"><span class="comment">// 那么本次调用的时候函数内部的 num 就是 200</span></span><br><span class="line">fn(<span class="number">200</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>函数内部的行参的值，由函数调用的时候传递的实参决定</strong></p></li><li><p><strong>多个参数的时候，是按照顺序一一对应的</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fn</span><span class="params">(num1, num2)</span> &#123;</span><br><span class="line">  <span class="comment">// 函数内部可以使用 num1 和 num2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数本次调用的时候，书写的参数是 100 和 200</span></span><br><span class="line"><span class="comment">// 那么本次调用的时候，函数内部的 num1 就是 100，num2 就是 200</span></span><br><span class="line">fn(<span class="number">100</span>, <span class="number">200</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="函数的return"><a href="#函数的return" class="headerlink" title="函数的return"></a>函数的return</h2><ul><li><code>return</code> 返回的意思，其实就是给函数一个 <strong>返回值</strong> 和 <strong>终断函数</strong></li></ul><p><strong>返回值</strong></p><ul><li><p>函数调用本身也是一个表达式，表达式就应该有一个值出现</p></li><li><p><code>return</code> 关键字就是可以给函数执行完毕一个结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fn</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 执行代码</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时，fn() 这个表达式执行完毕之后就有结果出现了</span></span><br></pre></td></tr></table></figure><ul><li>我们可以在函数内部使用 <code>return</code> 关键把任何内容当作这个函数运行后的结果</li></ul></li></ul><p><strong>终断函数</strong></p><ul><li><p>当我开始执行函数以后，函数内部的代码就会从上到下的依次执行</p></li><li><p>必须要等到函数内的代码执行完毕</p></li><li><p>而 <code>return</code> 关键字就是可以在函数中间的位置停掉，让后面的代码不在继续执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fn</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;11&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;22&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">//后面不会执行了</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;33&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;44&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure></li></ul><h2 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h2><p><strong>为什么要声明?</strong></p><p>有些情况下，如果不对函数进行声明，编译器在编译的时候，可能不认识这个函数，因为编译器在编译 c 程序的时候，从上往下编译的。</p><p><strong>(1) 直接声明法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">func();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello kerwin\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(2)  间接声明法</strong></p><p>将函数的声明放在头文件中，.c 程序包含头文件即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">main.c</span><br><span class="line"><span class="meta">#<span class="keyword">include</span>”k.h”</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k.h</span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>使用函数的好处？ </p><p>1、定义一次，可以多次调用，减少代码的冗余度。 </p><p>2、使咱们代码，模块化更好，方便调试程序，而且阅读方便。</p></blockquote><h2 id="内存的分区"><a href="#内存的分区" class="headerlink" title="内存的分区"></a>内存的分区</h2><p><strong>1、内存：物理内存、虚拟内存</strong></p><ul><li><p>物理内存：实实在在存在的存储设备</p></li><li><p>虚拟内存：操作系统虚拟出来的内存。</p></li><li><p>操作系统会在物理内存和虚拟内存之间做映射。</p></li><li><p>在写应用程序的，咱们看到的都是虚拟地址。</p></li></ul><p><strong>2、在运行程序的时候，操作系统会将 虚拟内存进行分区。</strong></p><p>​<strong>1).堆</strong> </p><p>​在动态申请内存的时候，在堆里开辟内存。</p><p>​<strong>2).栈</strong> </p><p>​主要存放局部变量。</p><p>​<strong>3).静态全局区</strong></p><p>​1：未初始化的静态全局区</p><p>​静态变量（定义变量的时候，前面加 static 修饰），或全局变量，没有初始化的，存在此区</p><p>​2：初始化的静态全局区</p><p>​全局变量、静态变量，赋过初值的，存放在此区</p><p>​<strong>4).代码区</strong></p><p>​存放咱们的程序代码</p><p>​<strong>5).文字常量区</strong></p><p>​存放常量的。</p><h2 id="普通的全局变量"><a href="#普通的全局变量" class="headerlink" title="普通的全局变量"></a>普通的全局变量</h2><p>在函数外部定义的变量.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> number=<span class="number">100</span>;<span class="comment">//number 就是一个全局变量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用范围：</p><ul><li>普通全局变量的作用范围，是程序的所有地方。</li><li>只不过用之前需要声明。声明方法 extern int number;</li><li>注意声明的时候，不要赋值。</li></ul><p>生命周期：</p><ul><li>程序运行的整个过程，一直存在，直到程序结束。</li></ul><p>注意：</p><ul><li>定义普通的全局变量的时候，如果不赋初值，它的值默认为 0</li></ul><h2 id="静态全局变量-static"><a href="#静态全局变量-static" class="headerlink" title="静态全局变量 static"></a>静态全局变量 static</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">定义全局变量的时候，前面用 <span class="type">static</span> 修饰。</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> number=<span class="number">100</span>;<span class="comment">//number 就是一个静态全局变量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用范围：</p><ul><li>只能在它定义的.c（源文件）中有效</li></ul><p>生命周期：</p><ul><li>在程序的整个运行过程中，一直存在。</li></ul><p>注意：</p><ul><li>定义静态全局变量的时候，如果不赋初值，它的值默认为 0。</li></ul><h2 id="普通的局部变量"><a href="#普通的局部变量" class="headerlink" title="普通的局部变量"></a>普通的局部变量</h2><p>在函数内部定义的，或者复合语句中定义的变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num;<span class="comment">//普通局部变量</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>)&#123;</span><br><span class="line">       <span class="type">int</span> a;<span class="comment">//普通局部变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用范围：</p><ul><li>在函数中定义的变量，在它的函数中有效</li><li>在复合语句中定义的，在它的复合语句中有效。</li></ul><h2 id="静态的局部变量"><a href="#静态的局部变量" class="headerlink" title="静态的局部变量"></a>静态的局部变量</h2><p>定义局部变量的时候，前面加 static 修饰</p><p>作用范围： </p><ul><li>在它定义的函数或复合语句中有效。</li></ul><p>生命周期：</p><ul><li>第一次调用函数的时候，开辟空间赋值，函数结束后，不释放，以后再调用函数的时候，就不再为其开辟空间，也不赋初值，用的是以前的那个变量。</li></ul><h2 id="静态函数"><a href="#静态函数" class="headerlink" title="静态函数"></a>静态函数</h2><p>在定义函数的时候，返回值类型前面加 static 修饰。这样的函数 被称为静态函数。</p><p>static 限定了函数的作用范围，在定义的.c 中有效。</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="数组的概念"><a href="#数组的概念" class="headerlink" title="数组的概念"></a>数组的概念</h2><p>数组是若干个相同类型的变量在内存中有序存储的集合。</p><p>int a[5];&#x2F;&#x2F;定义了一个整型的数组 a，a 是数组的名字，数组中有 5 个元素，每个元素的类型都是 int 类型，而且在内存中连续存储。</p><p>这十个元素分别是 a[0] a[1] a[2] a[3] a[4]</p><img src="../../../../../Data/OneDrive/桌面/c/c.assets/image-20220730112642632.png" alt="image-20220730112642632" style="zoom:67%;float:left;" /><h2 id="数组的分类"><a href="#数组的分类" class="headerlink" title="数组的分类"></a>数组的分类</h2><p>1）字符数组</p><p><code>char s[10]; s[0],s[1]....s[9];</code></p><p>2）短整型的数组</p><p><code>short  a[10]; </code></p><p>3）整型的数组</p><p><code>int a[10]; </code></p><ol start="4"><li>长整型的数组</li></ol><p><code>lont a[5];</code></p><p>5）浮点型的数组（单、双）</p><p><code>float a[6]; a[4]=3.14f;</code></p><p><code>double a[8]; a[7]=3.115926;</code></p><p>6）指针数组</p><p><code>char *a[10]</code></p><p>7）结构体数组</p><p><code>struct student a[10];</code></p><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>数组名【行下标】【列下标】</p><p>int  a    [3] [3] </p><table><thead><tr><th>arr[0,0]</th><th>arr[0,1]</th><th>arr[0,2]</th></tr></thead><tbody><tr><td>arr[1,0]</td><td>arr[1,1]</td><td>arr[1,2]</td></tr><tr><td>arr[2,0]</td><td>arr[2,1]</td><td>arr[2,2]</td></tr></tbody></table><h2 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h2><ul><li>排序，就是把一个乱序的数组，通过我们的处理，让他变成一个有序的数组</li></ul><p><strong>冒泡排序</strong></p><p><img src="/../../../../../Data/OneDrive/%E6%A1%8C%E9%9D%A2/c/c.assets/bubble.gif"></p><ul><li><p>先遍历数组，让挨着的两个进行比较，如果前一个比后一个大，那么就把两个换个位置</p></li><li><p>数组遍历一遍以后，那么最后一个数字就是最大的那个了</p></li><li><p>然后进行第二遍的遍历，还是按照之前的规则，第二大的数字就会跑到倒数第二的位置</p></li><li><p>以此类推，最后就会按照顺序把数组排好了</p></li></ul><p><strong>选择排序</strong></p><p><img src="/../../../../../Data/OneDrive/%E6%A1%8C%E9%9D%A2/c/c.assets/selection.gif"></p><ul><li>先假定数组中的第 0 个就是最小的数字的索引</li><li>然后遍历数组，只要有一个数字比我小，那么就替换之前记录的索引</li><li>知道数组遍历结束后，就能找到最小的那个索引，然后让最小的索引换到第 0 个的位置</li><li>再来第二趟遍历，假定第 1 个是最小的数字的索引</li><li>在遍历一次数组，找到比我小的那个数字的索引</li><li>遍历结束后换个位置</li><li>依次类推，也可以把数组排序好</li></ul><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="指针的概念"><a href="#指针的概念" class="headerlink" title="指针的概念"></a>指针的概念</h2><img src="../../../../../Data/OneDrive/桌面/c/c.assets/image-20220802101023536.png" alt="image-20220802101023536" style="zoom:67%;float:left;" /><p><code>字符变量 char ch=‘b’; ch 占 1 个字节，它有一个地址编号，这个地址编号就是ch 的地址整型变量 int a=0x12 34 56 78; a 占 4 个字节，它占有 4 个字节的存储单元，有4 个地址编号。</code></p><img src="../../../../../Data/OneDrive/桌面/c/c.assets/image-20220802101124817.png" alt="image-20220802101124817" style="zoom:67%;float:left;" /><h2 id="指针变量的定义"><a href="#指针变量的定义" class="headerlink" title="指针变量的定义"></a>指针变量的定义</h2><p>1.简单的指针变量</p><p>数据类型 * 指针变量名;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> * p;<span class="comment">//定义了一个指针变量 p </span></span><br></pre></td></tr></table></figure><p>在 定义指针变量的时候 * 是用来修饰变量的，说明变量 p 是个指针变量。</p><p>2.关于指针的运算符</p><p>&amp; 取地址 、 *取值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">0x1234abcd</span>;</span><br><span class="line"><span class="type">int</span> *p;<span class="comment">//在定义指针变量的时候*代表修饰的意思，修饰 p 是个指针变量。</span></span><br><span class="line"> p=&amp;a;<span class="comment">//把 a 的地址给 p 赋值 ，&amp;是取地址符，</span></span><br></pre></td></tr></table></figure><img src="../../../../../Data/OneDrive/桌面/c/c.assets/image-20220802101453052.png" alt="image-20220802101453052" style="zoom:67%;float:left;" /><h2 id="指针的用处"><a href="#指针的用处" class="headerlink" title="指针的用处"></a>指针的用处</h2><p><strong>直接影响原数据</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *b)</span> &#123;</span><br><span class="line"><span class="type">int</span> temp = *a;</span><br><span class="line">*a = *b;</span><br><span class="line">*b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> *arr,<span class="type">int</span> length)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">swap(&amp;arr[j], &amp;arr[j + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p=&amp;a[<span class="number">0</span>];</span><br><span class="line">指针变量 p 保存了数组 a 中第 <span class="number">0</span> 个元素的地址，即 a[<span class="number">0</span>]的地址</span><br></pre></td></tr></table></figure><img src="../../../../../Data/OneDrive/桌面/c/c.assets/image-20220803101840802.png" alt="image-20220803101840802" style="zoom:67%;float:left;" /><p><code>通过指针变量运算加取值的方法来引用数组的元素</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p=a; *(p+<span class="number">2</span>)=<span class="number">100</span>;<span class="comment">//也是可以的，相当于 a[2]=100</span></span><br><span class="line">解释：p 是第 <span class="number">0</span> 个元素的地址，p+<span class="number">2</span> 是 a[<span class="number">2</span>]这个元素的地址。对第二个元素的地址取值，即 a[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h2 id="指针的分类"><a href="#指针的分类" class="headerlink" title="指针的分类"></a>指针的分类</h2><p><code>按指针指向的数据的类型来分</code></p><p>1:字符指针</p><p>字符型数据的地址 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *p;<span class="comment">//定义了一个字符指针变量，只能存放字符型数据的地址编号</span></span><br></pre></td></tr></table></figure><p>2：短整型指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> *p;<span class="comment">//定义了一个短整型的指针变量 p，只能存放短整型变量的地址</span></span><br></pre></td></tr></table></figure><p>3：整型指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p;<span class="comment">//定义了一个整型的指针变量 p，只能存放整型变量的地址</span></span><br></pre></td></tr></table></figure><p>4：长整型指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> *p;<span class="comment">//定义了一个长整型的指针变量 p，只能存放长整型变量的地址</span></span><br></pre></td></tr></table></figure><p>5：float 型的指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> *p;<span class="comment">//定义了一个 float 型的指针变量 p，只能存放 float 型变量的地址</span></span><br></pre></td></tr></table></figure><p>6：double 型的指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> *p;<span class="comment">//定义了一个 double 型的指针变量 p，只能存放 double 型变量的地址</span></span><br></pre></td></tr></table></figure><p>7：函数指针 </p><p>8、结构体指针 </p><p>9、指针的指针 </p><p>10、数组指针 </p><p>11、通用指针 void *p;</p><blockquote><p>无论什么类型的指针变量，在 32 位系统下，都是 4 个字节。 </p><p>指针只能存放对应类型的变量的地址编号。</p></blockquote><h2 id="字符串和指针"><a href="#字符串和指针" class="headerlink" title="字符串和指针"></a>字符串和指针</h2><p>字符串就是以’\0’结尾的若干的字符的集合：比如“hello world”。</p><p>字符串的地址，是第一个字符的地址。如：字符串“hello world”的地址，其实是字符串中字符’h’的地址。</p><p>我们可以定义一个字符指针变量保存字符串的地址,比如：char *s &#x3D;”hello world”;</p><p><strong>字符串的可修改性</strong></p><p>字符串内容是否可以修改，取决于字符串存放在哪里</p><ol><li><p>存放在数组中的字符串的内容是可修改的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">100</span>]=”kerwin”;</span><br><span class="line">str[<span class="number">0</span>]=‘y’;<span class="comment">//正确可以修改的</span></span><br></pre></td></tr></table></figure></li><li><p>文字常量区里的内容是不可修改的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *str=”kerwin”; </span><br><span class="line">*str =’y’;<span class="comment">//错误，存放在文字常量区，不可修改</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><p><code>定义一个数组，数组中有若干个相同类型指针变量，这个数组被称为指针数组int *p[5]</code></p><p><code>指针数组本身是个数组，是个指针数组，是若干个相同类型的指针变量构成的集合</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *name[<span class="number">3</span>] = &#123;<span class="string">&quot;kerwin&quot;</span>,<span class="string">&quot;tiechui&quot;</span>,<span class="string">&quot;xiaoming&quot;</span>&#125;;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,name[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针的指针"><a href="#指针的指针" class="headerlink" title="指针的指针"></a>指针的指针</h2><p><code>指针的指针，即指针的地址，</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">0x12345678</span>；</span><br><span class="line">假如：a 的地址是 <span class="number">0x00002000</span></span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p =&amp;a;</span><br><span class="line">则 p 中存放的是 a 的地址编号即 <span class="number">0x00002000</span></span><br><span class="line">    </span><br><span class="line">假如：指针变量 p 的地址编号是 <span class="number">0x00003000</span>，这个地址编号就是指针的地址</span><br><span class="line"><span class="type">int</span> **q;</span><br><span class="line">q=&amp;p;<span class="comment">//q 保存了 p 的地址，也可以说 q 指向了 p</span></span><br><span class="line">则 q 里存放的就是 <span class="number">0x00003000</span></span><br></pre></td></tr></table></figure><img src="../../../../../Data/OneDrive/桌面/c/c.assets/image-20220804145952789.png" alt="image-20220804145952789" style="zoom:67%;float:left;" /><h2 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h2><p><code>本身是个指针，指向一个数组，加 1 跳一个数组，即指向下个数组。</code></p><p>指向的数组的类型（*指针变量名）[指向的数组的元素个数] </p><p><code>int (*p)[5];</code></p><p>&#x2F;&#x2F;定义了一个数组指针变量 p，p 指向的是整型的有 5 个元素的数组p+1 往下指 5 个整型，跳过一个有 5 个整型元素的数组。</p>   <img src="../../../../../Data/OneDrive/桌面/c/c.assets/image-20220803203736931.png" alt="image-20220803203736931" style="zoom:67%;float:left;" />   <img src="../../../../../Data/OneDrive/桌面/c/c.assets/image-20220803203746786.png" alt="image-20220803203746786" style="zoom:67%;" /><img src="../../../../../Data/OneDrive/桌面/c/c.assets/image-20220803200143055.png" alt="image-20220803200143055" style="zoom:67%;float:left;" /><h2 id="数组名字取地址"><a href="#数组名字取地址" class="headerlink" title="数组名字取地址"></a>数组名字取地址</h2><p><code>变成 数组指针</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%p\n&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a+1=%p\n&quot;</span>,a+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;a=%p\n&quot;</span>,&amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;a+1=%p\n&quot;</span>,&amp;a+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>a 和&amp;a 所代表的地址编号是一样的，即他们指向同一个存储单元，但是a和&amp;a 的指针类型不同。</code></p><p><code>a 是个 int *类型的指针，是 a[0]的地址。 &amp;a 变成了数组指针，加 1 跳一个 10 个元素的整型一维数组</code></p><h2 id="数组名字和指针变量的异同"><a href="#数组名字和指针变量的异同" class="headerlink" title="数组名字和指针变量的异同"></a>数组名字和指针变量的异同</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>]= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p=a;</span><br></pre></td></tr></table></figure><p><strong>相同点：</strong></p><p>a 是数组的名字，是 a[0]的地址，p&#x3D;a 即 p 保存了 a[0]的地址，即 a 和 p 都指向a[0]，所以在引用数组元素的时候，a 和 p 等价 引用数组元素回顾： a[1]、**(a+1)、p[1]、* *(p+1) 都是对数组 a 中 a[1]元素的引用。</p><p><strong>不同点：</strong></p><ol><li><p>a 是常量、p 是变量</p></li><li><p>对 a 取地址，和对 p 取地址结果不同</p></li></ol><p>因为 a 是数组的名字，所以对 a 取地址结果为数组指针。</p><p>p 是个指针变量，所以对 p 取地址（&amp;p）结果为指针的指针。</p><h2 id="给函数传指针参数"><a href="#给函数传指针参数" class="headerlink" title="给函数传指针参数"></a>给函数传指针参数</h2><p><code>要想改变主调函数中变量的值，必须传变量的地址，而且还得通过*+地址去赋值。无论这个变量是什么类型的。</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">char</span> **barr)</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, barr[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">barr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr1[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;;</span><br><span class="line"><span class="type">int</span> arr2[] = &#123; <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;;</span><br><span class="line"><span class="type">int</span>* arr[] = &#123; arr1,arr2 &#125;;</span><br><span class="line">fun(arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, arr[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数返回值是指针"><a href="#函数返回值是指针" class="headerlink" title="函数返回值是指针"></a>函数返回值是指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">swap</span><span class="params">( <span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="type">int</span> temp = a; <span class="comment">//临时变量先存其中一个值</span></span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> arr[<span class="number">2</span>]; <span class="comment">//静态</span></span><br><span class="line">arr[<span class="number">0</span>] = a;</span><br><span class="line">arr[<span class="number">1</span>] = b;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"><span class="type">int</span> *x = swap(myarr[j], myarr[j + <span class="number">1</span>]);</span><br><span class="line">myarr[j] = x[<span class="number">0</span>];</span><br><span class="line">myarr[j + <span class="number">1</span>] = x[<span class="number">1</span>];</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h2 id="初识函数指针"><a href="#初识函数指针" class="headerlink" title="初识函数指针"></a>初识函数指针</h2><blockquote><p>咱们定义的函数，在运行程序的时候，会将函数的指令加载到内存 的代码段。所以函数也有起始地址。</p><p> c 语言规定：函数的名字就是函数的首地址，即函数的入口地址 咱们就可以定义一个指针变量，来存放函数的地址。 这个指针变量就是函数指针变量。</p></blockquote><img src="../../../../../Data/OneDrive/桌面/c/c.assets/image-20220806134839960.png" alt="image-20220806134839960" style="zoom:67%;float:left;" /><h2 id="函数指针的定义和调用"><a href="#函数指针的定义和调用" class="headerlink" title="函数指针的定义和调用"></a>函数指针的定义和调用</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>(*p)(<span class="type">int</span>,<span class="type">int</span>);<span class="comment">//定义了一个函数指针变量 p,p 指向的函数</span></span><br><span class="line"></span><br><span class="line">p=max; </span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(*p)(<span class="number">30</span>,<span class="number">50</span>);</span><br><span class="line">p(<span class="number">30</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure><h2 id="函数指针的用处"><a href="#函数指针的用处" class="headerlink" title="函数指针的用处"></a>函数指针的用处</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">call_back</span><span class="params">(<span class="type">int</span> current , <span class="type">int</span> total)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;压缩进度是：%d------%d&quot;</span> , current , total);  <span class="comment">// 22------100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">compress</span><span class="params">(<span class="type">char</span>* file_name  ,<span class="type">void</span>(call_back)(<span class="type">int</span> , <span class="type">int</span>))</span>&#123;</span><br><span class="line">    call_back(<span class="number">22</span> , <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    compress(<span class="string">&quot;kerwin.jpg&quot;</span> , call_back);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="水煮易混淆指针"><a href="#水煮易混淆指针" class="headerlink" title="水煮易混淆指针"></a>水煮易混淆指针</h2><p>1、 int *a[5];</p><p> 这是个指针数组，数组 a 中有 5 个整型的指针变量</p><p>a[0]~a[4] ，每个元素都是 int *类型的指针变量</p><p>2、int (*a)[5];</p><p>数组指针变量，它是个指针变量。它占 8 个字节，存地址编号。</p><p>它指向一个数组，它加 1 的话，指向下一行。</p><p>3、 int **p;</p><p>这个是个指针的指针，保存指针变量的地址。</p><p>它经常用在保存指针的地址：</p><p>4、int *f(void);</p><p>注意：*f 没有用括号括起来</p><p>它是个函数的声明，声明的这个函数返回值为 int *类型的。</p><p>5、int (*f)(void);</p><p>注意<em>f 用括号括起来了，</em>修饰 f 说明，f 是个指针变量。</p><p>f 是个函数指针变量，存放函数的地址，它指向的函数，</p><p>必须有一个 int 型的返回值，没有参数。</p><h2 id="特殊指针"><a href="#特殊指针" class="headerlink" title="特殊指针"></a>特殊指针</h2><ol><li>空类型的指针（void *）</li></ol><p><code>void* 通用指针，任何类型的地址都可以给 void*类型的指针变量赋值。</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">memcpy</span><span class="params">(<span class="type">void</span> *dest, <span class="type">const</span> <span class="type">void</span> *src, <span class="type">size_t</span> n)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为对于这种通用型接口，你不知道用户的数据类型是什么，但是你必须能够处理用户的各种类型数据，因而会使用void<em>。void</em>能包容地接受各种类型的指针。也就是说，如果你期望接口能够接受任何类型的参数，你可以使用void<em>类型。但是在具体使用的时候，你必须转换为具体的指针类型。例如，你传入接口的是int</em>，那么你在使用的时候就应该按照int*使用。</p><ol start="2"><li>空指针 NULL</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *p=<span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>p 哪里都不指向，也可以认为 p 指向内存编号为 0 的存储单位。</p><h1 id="动态内存申请"><a href="#动态内存申请" class="headerlink" title="动态内存申请"></a>动态内存申请</h1><h2 id="初识动态内存"><a href="#初识动态内存" class="headerlink" title="初识动态内存"></a>初识动态内存</h2><p><code>Ｃ语言提供了一些内存管理函数，这些内存管理函数可以按需要动态的分配内存空间，也可把不再使用的空间回收再次利用。</code></p><p><strong>静态分配</strong></p><p>1、 在程序编译或运行过程中，按事先规定大小分配内存空间的分配方式。int a [10] </p><p>2、 必须事先知道所需空间的大小。 </p><p>3、 分配在栈区或全局变量区，一般以数组的形式。 </p><p>4、 按计划分配。</p><p><strong>动态分配</strong></p><p>1、在程序运行过程中，根据需要大小自由分配所需空间。</p><p>2、按需分配。</p><p>3、分配在堆区，一般使用特定的函数进行分配。</p><h2 id="malloc-函数"><a href="#malloc-函数" class="headerlink" title="malloc 函数"></a>malloc 函数</h2><p>void * malloc(int size )</p><p>在内存的动态存储区(堆区)中分配一块长度为 size 字节的连续区域，用来存放类型说明符指定的类型。函数原型返回 void*指针，使用时必须做相应的强制类型转换 .</p><p>返回值：</p><ul><li><p>分配空间的起始地址 ( 分配成功 )</p></li><li><p>NULL ( 分配失败 )</p></li></ul><p>注意：</p><ul><li>在调用 malloc 之后，一定要判断一下，是否申请内存成功。 </li><li>如果多次 malloc 申请的内存，第 1 次和第 2 次申请的内存不一定是连续的</li></ul><h2 id="free-函数（释放内存函数）"><a href="#free-函数（释放内存函数）" class="headerlink" title="free 函数（释放内存函数）"></a>free 函数（释放内存函数）</h2><p>free 函数释放 p 指向的内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *p=(<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br></pre></td></tr></table></figure><h2 id="calloc-函数"><a href="#calloc-函数" class="headerlink" title="calloc 函数"></a>calloc 函数</h2><p>在内存的堆中，申请 n 块，每块的大小为 size 个字节的连续区域</p><p>函数的返回值： </p><ul><li>返回 申请的内存的首地址（申请成功） </li><li>返回 NULL（申请失败）</li></ul><p>注意：malloc 和 calloc 函数都是用来申请内存的。</p><p>区别：</p><p>​ 1) 函数的名字不一样 </p><p>​ 2) 参数的个数不一样 </p><p>​ 3) malloc 申请的内存，内存中存放的内容是随机的，不确定的，而calloc 函数申请的内存中的内容为 0</p><h2 id="realloc-函数"><a href="#realloc-函数" class="headerlink" title="realloc 函数"></a>realloc 函数</h2><p>在原先 s 指向的内存基础上重新申请内存，新的内存的大小为 new_size 个字节，如果原先内存后面有足够大的空间，就追加，如果后边的内存不够用，则relloc 函数会在堆区找一个 newsize 个字节大小的内存申请，将原先内存中的内容拷贝过来，然后释放原先的内存，最后返回 新内存的地址。</p><img src="../../../../../Data/OneDrive/桌面/c/c.assets/image-20220807141500827.png" alt="image-20220807141500827" style="zoom:67%;float:left;" /><h2 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h2><p><code>申请的内存，首地址丢了，找不了，再也没法使用了，也没法释放了，这块内存就被泄露了。</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *p;</span><br><span class="line">p=(<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="comment">//接下来，可以用 p 指向的内存了</span></span><br><span class="line">p=<span class="string">&quot;kerwin&quot;</span>;<span class="comment">//p 指向别的地方了</span></span><br><span class="line"><span class="comment">//从此以后，再也找不到你申请的 100 个字节了。则动态申请的 100 个字节就被泄露了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *p;</span><br><span class="line">p=(<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);    </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    func();</span><br><span class="line">    func();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每调用一次 fun 泄露 100 个字节</span></span><br></pre></td></tr></table></figure><h1 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h1><h2 id="字符串拷贝函数strcpy-s"><a href="#字符串拷贝函数strcpy-s" class="headerlink" title="字符串拷贝函数strcpy_s"></a>字符串拷贝函数strcpy_s</h2><p><code>拷贝 src 指向的字符串到 dest 指针指向的内存中，’\0’也会拷贝</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">if</span> (!p) <span class="keyword">return</span>;</span><br><span class="line">strcpy_s(p, <span class="number">7</span>,<span class="string">&quot;kerwin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, p);</span><br></pre></td></tr></table></figure><h2 id="测字符串长度函数strlen"><a href="#测字符串长度函数strlen" class="headerlink" title="测字符串长度函数strlen"></a>测字符串长度函数strlen</h2><p><code>测字符指针 s 指向的字符串中字符的个数，不包括’\0’</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str1[<span class="number">20</span>]=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *str2 =<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(str1)); <span class="comment">//20</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(str2));<span class="comment">//8</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(str1));<span class="comment">//5</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(str2));<span class="comment">//5</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串追加函数strcat-s"><a href="#字符串追加函数strcat-s" class="headerlink" title="字符串追加函数strcat_s"></a>字符串追加函数strcat_s</h2><p><code>strcat 函数追加 src 字符串到 dest 指向的字符串的后面。追加的时候会追加’\0’</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* str = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">if</span> (str == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">scanf_s(<span class="string">&quot;%s&quot;</span>, str, <span class="number">100</span>);</span><br><span class="line"><span class="type">char</span> *str2 = <span class="string">&quot;先生/女士&quot;</span>;</span><br><span class="line">strcat_s(str, <span class="number">100</span>,str2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br></pre></td></tr></table></figure><h2 id="字符串比较函数strcmp"><a href="#字符串比较函数strcmp" class="headerlink" title="字符串比较函数strcmp"></a>字符串比较函数strcmp</h2><p><code>比较 s1 和 s2 指向的字符串的大小， 比较的方法：逐个字符去比较 ascII 码，一旦比较出大小返回。 如果所有字符都一样，则返回 0</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* a = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="type">char</span>* b = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">scanf_s(<span class="string">&quot;%s&quot;</span>, a,<span class="number">100</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%s&quot;</span>, b,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">if</span> (a == <span class="literal">NULL</span> || b == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(a, b) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入正确&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符查找函数strchr"><a href="#字符查找函数strchr" class="headerlink" title="字符查找函数strchr"></a>字符查找函数strchr</h2><p><code>在字符指针 s 指向的字符串中，找 ascii 码为 c 的字符 注意，是首次匹配，如果过说 s 指向的字符串中有多个 ASCII 为 c 的字符，则找的是第1 个字符</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* str[] = &#123; <span class="string">&quot;teichui&quot;</span>,<span class="string">&quot;xiaoming&quot;</span>,<span class="string">&quot;kerwin&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> x;</span><br><span class="line"></span><br><span class="line">scanf_s(<span class="string">&quot;%c&quot;</span>, &amp;x,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i= <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(str) / <span class="keyword">sizeof</span>(<span class="type">char</span>*); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strchr</span>(str[i], x) != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串匹配函数strstr"><a href="#字符串匹配函数strstr" class="headerlink" title="字符串匹配函数strstr"></a>字符串匹配函数strstr</h2><p><code>char *strstr(const char *haystack, const char *needle);</code></p><p><code>在 haystack 指向的字符串中查找 needle 指向的字符串，也是首次匹配</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* str[] = &#123; <span class="string">&quot;teichui&quot;</span>,<span class="string">&quot;xiaoming&quot;</span>,<span class="string">&quot;kerwin&quot;</span>&#125;;</span><br><span class="line"><span class="type">char</span> x[<span class="number">100</span>];</span><br><span class="line">scanf_s(<span class="string">&quot;%s&quot;</span>, x,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i= <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(str) / <span class="keyword">sizeof</span>(<span class="type">char</span>*); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strstr</span>(str[i], x) != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串转换数值atoi"><a href="#字符串转换数值atoi" class="headerlink" title="字符串转换数值atoi"></a>字符串转换数值atoi</h2><p>atoi&#x2F;atol&#x2F;atof 字符串转换功能</p><p>函数的声明：int atoi(const char *nptr);</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num;</span><br><span class="line">num=atoi(“<span class="number">12</span>岁”);</span><br><span class="line">则 num 的值为 <span class="number">12</span></span><br></pre></td></tr></table></figure><h2 id="字符串切割函数strtok"><a href="#字符串切割函数strtok" class="headerlink" title="字符串切割函数strtok"></a>字符串切割函数strtok</h2><p>函数声明：char *strtok(char *str, const char *delim);</p><p>字符串切割，按照 delim 指向的字符串中的字符，切割 str 指向的字符串。其实就是在 str 指向的字符串中发现了 delim 字符串中的字符，就将其变成’\0’, 调用一次 strtok 只切割一次，切割一次之后，再去切割的时候 strtok 的第一个参数传 NULL，意思是接着上次切割的位置继续切</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">split</span><span class="params">(<span class="type">char</span> *p,<span class="type">char</span> **myp)</span> &#123;</span><br><span class="line"><span class="type">char</span>* buf = <span class="literal">NULL</span>;</span><br><span class="line">myp[<span class="number">0</span>] = strtok_s(p,<span class="string">&quot;|&quot;</span>, &amp;buf);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (myp[i]) &#123;</span><br><span class="line">i++;</span><br><span class="line">myp[i] = strtok_s(<span class="literal">NULL</span>, <span class="string">&quot;|&quot;</span>, &amp;buf);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="空间设定函数memset"><a href="#空间设定函数memset" class="headerlink" title="空间设定函数memset"></a>空间设定函数memset</h2><p>函数声明：void* memset(void *ptr,int value,size_t num);</p><p>memset 函数是将 ptr 指向的内存空间的 num 个字节全部赋值为 value</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* str = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">if</span> (!str)<span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//memset(str, -1, 100);</span></span><br><span class="line"><span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++)</span><br><span class="line">&#123; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,str[i]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><h2 id="初识结构体"><a href="#初识结构体" class="headerlink" title="初识结构体"></a>初识结构体</h2><p><code>在程序开发的时候，有些时候我们需要将不同类型的数据组合成一个有机的整体</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结构体是一种构造类型的数据结构， 是一种或多种基本类型或构造类型的数据的集合。</p></blockquote><h2 id="结构体初始化与访问"><a href="#结构体初始化与访问" class="headerlink" title="结构体初始化与访问"></a>结构体初始化与访问</h2><p>结构体变量，是个变量，这个变量是若干个相同或不同数据构成的集合注：</p><ol><li>在定义结构体变量之前首先得有结构体类型，然后再定义变量</li><li>在定义结构体变量的时候，可以顺便给结构体变量赋初值，被称为结构体的初始化</li><li>结构体变量初始化的时候，各个成员顺序初始化</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> &#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">student1</span>=</span> &#123;<span class="string">&quot;tiechui&quot;</span>,<span class="number">100</span>,<span class="number">18</span>&#125;; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">student0</span>;</span></span><br><span class="line">strcpy_s(student0.name, <span class="number">100</span>, <span class="string">&quot;kerwin&quot;</span>);</span><br><span class="line">student0.score = <span class="number">100</span>;</span><br><span class="line">student0.age = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h2 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h2><p><code>结构体数组是个数组，由若干个相同类型的结构体变量构成的集合</code></p><p>struct 结构体类型名 数组名[元素个数];</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>[3];</span></span><br></pre></td></tr></table></figure><h2 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h2><p><code>即结构体的地址，结构体变量存放内存中，也有起始地址 咱们定义一个变量来存放这个地址，那这个变量就是结构体指针变量。 结构体指针变量也是个指针，既然是指针在 64 位环境下，指针变量的占 8 个字节，存放一个地址编号。</code></p><p>struct 结构体类型名 * 结构体指针变量名;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">student1</span>;</span></span><br><span class="line"></span><br><span class="line">p  = &amp;student1;</span><br><span class="line">(*p).name</span><br><span class="line">p-&gt;name</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结构体与函数"><a href="#结构体与函数" class="headerlink" title="结构体与函数"></a>结构体与函数</h2><p><code>给函数传结构体变量的地址</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">input</span><span class="params">(<span class="keyword">struct</span> stu *student)</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请录入姓名，年龄， 成绩\n&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%s%d%d&quot;</span>, student-&gt;name, <span class="number">100</span>, &amp;student-&gt;age, &amp;student-&gt;score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结构体内存分配"><a href="#结构体内存分配" class="headerlink" title="结构体内存分配"></a>结构体内存分配</h2><p>结构体变量大小是，它所有成员的大小之和。</p><h3 id="规则-1"><a href="#规则-1" class="headerlink" title="规则 1"></a>规则 1</h3><p><strong>以多少个字节为单位开辟内存 给结构体变量分配内存的时候，会去结构体变量中找基本类型的成员哪个基本类型的成员占字节数多，就以它大大小为单位开辟内存。</strong> </p><p> (1)：成员中只有 char 型数据 ，以 1 字节为单位开辟内存。</p><p> (2)：成员中出现了 short int 类型数据，没有更大字节数的基本类型数据。以 2 字节为单位开辟内存 </p><p> (3)：出现了 int float 没有更大字节的基本类型数据的时候以 4 字节为单位开辟内存。</p><p> (4)：出现了 double 类型的数据， 以 8 字节为单位开辟内存。</p><h3 id="规则-2"><a href="#规则-2" class="headerlink" title="规则 2"></a>规则 2</h3><p>(1)：char 1 字节对齐 ，即存放 char 型的变量，内存单元的编号是1 的倍数即可。</p><p>(2)：short int 2 字节对齐 ，即存放 short int 型的变量，起始内存单元的编号是2 的倍数即可。</p><p>(3)：int 4 字节对齐 ，即存放 int 型的变量，起始内存单元的编号是4 的倍数即可</p><p>(4)：long int 在 32 位平台下，4 字节对齐 ，即存放 long int 型的变量，起始内存单元的编号是4的倍数即可 </p><p>(5)：float 4 字节对齐 ，即存放 float 型的变量，起始内存单元的编号是4 的倍数即可</p><p>(6)：double 8 字节对齐，即存放 double 型变量的起始地址，必须是 8 的倍数，double 变量占8字节</p><h3 id="字节对齐的好处"><a href="#字节对齐的好处" class="headerlink" title="字节对齐的好处"></a>字节对齐的好处</h3><p>用空间来换时间，提高 cpu 读取数据的效率</p><img src="../../../../../Data/OneDrive/桌面/c/c.assets/image-20220817114718562.png" alt="image-20220817114718562" style="zoom:67%;float:left;" /><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p><code>概念：链表是一种 物理存储结构上非连续 、非顺序的存储结构，数据元素的 逻辑顺序 是通过链表中的 指针链 接 次序实现的 。</code></p><p><img src="/../../../../../Data/OneDrive/%E6%A1%8C%E9%9D%A2/c/c.assets/image-20220818105810715.png" alt="image-20220818105810715"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> iNumber;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>* <span class="title">pNext</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">struct</span> student* <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>* <span class="title">pHead</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>* <span class="title">pEnd</span>, * <span class="title">pNew</span>;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pEnd = pNew = (<span class="keyword">struct</span> student*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> student));</span><br><span class="line"><span class="keyword">if</span> (!pNew) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入名字，和学号\n&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%s&quot;</span>, pNew-&gt;name, <span class="number">100</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;pNew-&gt;iNumber);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pNew-&gt;iNumber != <span class="number">0</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">pNew-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">pEnd = pNew;</span><br><span class="line">pHead = pNew;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pNew-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">pEnd-&gt;pNext = pNew;</span><br><span class="line">pEnd = pNew;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pNew = (<span class="keyword">struct</span> student*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> student));</span><br><span class="line"><span class="keyword">if</span> (!pNew) <span class="keyword">return</span>;</span><br><span class="line">scanf_s(<span class="string">&quot;%s&quot;</span>, pNew-&gt;name, <span class="number">100</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;pNew-&gt;iNumber);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pHead;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> student* pHead)</span> &#123;</span><br><span class="line"><span class="type">int</span> index = <span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">pTemp</span> =</span> pHead;</span><br><span class="line"><span class="keyword">while</span> (pTemp != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第%d个学生信息\n&quot;</span>, index);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s,%d\n&quot;</span>, pTemp-&gt;name, pTemp-&gt;iNumber);</span><br><span class="line">pTemp = pTemp-&gt;pNext;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>* <span class="title">pHead</span> =</span> create();</span><br><span class="line"></span><br><span class="line">print(pHead);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h1><p>共用体和结构体类似，也是一种构造类型的数据结构。把 struct 改成 union 就可以了。</p><p><code>几个不同的变量共同占用一段内存的结构，在C语言中，被称作“共用体”类型结构共用体所有成员占有同一段地址空间 共用体的大小是其占内存长度最大的成员的大小</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">&#125;stu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> salary;</span><br><span class="line">&#125;tea;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    stu student;</span><br><span class="line">    tea teacher;</span><br><span class="line">&#125; any;</span><br></pre></td></tr></table></figure><p>共用体的特点： </p><p>​1、同一内存段可以用来存放几种不同类型的成员，但每一瞬时只有一种起作用</p><p>​2、共用体变量中起作用的成员是最后一次存放的成员，在存入一个新的成员后原有的成员的值会被覆盖 </p><p>​3、共用体变量的地址和它的各成员的地址都是同一地址</p><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p><code>将变量的值一一列举出来，变量的值只限于列举出来的值的范围内</code></p><p>enum 枚举类型名  { 枚举值列表； }; </p><p>在枚举值表中应列出所有可用值,也称为枚举元素</p><p>枚举元素是常量，默认是从 0 开始编号的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">TYPE</span> &#123;</span> STU = <span class="number">1</span>, TEA &#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">TYPE</span> <span class="title">type</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (type == STU) &#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><p>宏定义是一个值&#x2F;表达式，不是一种类型</p></li><li><p>枚举是一种类型，可以定义枚举类型的一个变量</p></li></ul><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><h2 id="原码反码补码"><a href="#原码反码补码" class="headerlink" title="原码反码补码"></a>原码反码补码</h2><p><code>正数在内存中以原码形式存放，负数在内存中以补码形式存放</code></p><p>正数的 原码&#x3D;反码&#x3D;补码</p><p>原码：将一个整数，转换成二进制，就是其原码。 如单字节的 5 的原码为：0000 0101；-5 的原码为 1000 0101。</p><p>反码：正数的反码就是其原码；负数的反码是将原码中，除符号位以外，每一位取反。如单字节的 5 的反码为：0000 0101；-5 的反码为 1111 1010。</p><p>补码：正数的补码就是其原码；负数的反码+1 就是补码。 如单字节的 5 的补码为：0000 0101；-5 的补码为 1111 1011。</p><h2 id="位运算-1"><a href="#位运算-1" class="headerlink" title="位运算"></a>位运算</h2><p><code>无论是正数还是负数，编译系统都是按照内存中存储的内容进行位运算。</code></p><ul><li><p>&amp;按位 与 </p><p>任何值与 0 得 0，与 1 保持不变</p></li><li><p>|按位 或</p><p>任何值或 1 得 1，或 0 保持不变</p></li><li><p>~ 按位取反</p><p>1 变 0，0 变 1</p></li><li><p>^ 按位异或</p><p>相异得 1，相同得 0</p></li><li><p>位移</p><p>&gt;&gt;右移   &lt;&lt; 左移</p></li></ul><h1 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h1><ol><li>预编译</li></ol><p>​将.c 中的头文件展开、宏展开 生成的文件是.i 文件 </p><ol start="2"><li>编译</li></ol><p>​将预处理之后的.i 文件生成 .s 汇编文件 </p><ol start="3"><li>汇编</li></ol><p>​ 将.s 汇编文件生成.o 目标文件 </p><ol start="4"><li>链接</li></ol><p>​ 将.o 文件链接成目标文件</p><ol start="5"><li>执行</li></ol><h2 id="宏定义define"><a href="#宏定义define" class="headerlink" title="宏定义define"></a>宏定义define</h2><p><code>定义宏用 define 去定义, 宏是在预编译的时候进行替换。</code></p><p>(1) 不带参宏</p><p>#define PI 3.1415</p><p>在预编译的时候如果代码中出现了 PI 就用 3.1415 去替换。</p><p>(2) 带参宏</p><p>#define  MAX(a,b)  (a&gt;b?a:b)</p><p><code>将来在预处理的时候替换成 实参替代字符串的形参，其他字符保留</code></p><p><strong>带参宏和带参函数的区别</strong> </p><ul><li><p>带参宏被调用多少次就会展开多少次，执行代码的时候没有函数调用的过程，不需要压栈弹栈。所以带参宏，是浪费了空间，因为被展开多次，节省时间。 </p></li><li><p>带参函数，代码只有一份，存在代码段，调用的时候去代码段取指令，调用的时候要，压栈弹栈。有个调用的过程。 所以说，带参函数是浪费了时间，节省了空间。 </p></li><li><p>带参函数的形参是有类型的，带参宏的形参没有类型名。</p></li></ul><h2 id="选择性编译"><a href="#选择性编译" class="headerlink" title="选择性编译"></a>选择性编译</h2><p>（1）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> KERWIN</span></span><br><span class="line">代码段一 </span><br><span class="line"><span class="meta">#<span class="keyword">else</span> </span></span><br><span class="line">    代码段二</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p> (2)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> KERWIN</span></span><br><span class="line">代码段一 </span><br><span class="line"><span class="meta">#<span class="keyword">else</span> </span></span><br><span class="line">    代码段二</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p> (3)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> KERWIN==1</span></span><br><span class="line">代码段一 </span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> KERWIN==2</span></span><br><span class="line">    代码段二</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    代码段三</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>注意和 if else 语句的区别</strong></p><ul><li><p>if else 语句都会被编译，通过条件选择性执行代码</p></li><li><p>选择性编译，只有一块代码被编译</p></li></ul><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="初识文件"><a href="#初识文件" class="headerlink" title="初识文件"></a>初识文件</h2><p>文件用来存放程序、文档、音频、视频数据、图片等数据的。 </p><p>文件就是存放在磁盘上的，一些数据的集合。</p><p><strong>磁盘文件</strong>： 指一组相关数据的有序集合,通常存储在外部介质(如磁盘)上，使用时才调入内存。</p><p><strong>设备文件</strong>：在操作系统中把每一个与主机相连的输入、输出设备看作是一个文件，把它们的输入、输出等同于对磁盘文件的读和写。</p><p>键盘：标准输入文件 </p><p>屏幕：标准输出文件 </p><p>其它设备：打印机、触摸屏、摄像头、音箱等</p><h2 id="标准-io-库函数对磁盘文件的读取"><a href="#标准-io-库函数对磁盘文件的读取" class="headerlink" title="标准 io 库函数对磁盘文件的读取"></a>标准 io 库函数对磁盘文件的读取</h2><img src="../../../../../Data/OneDrive/桌面/c/c.assets/image-20220824104049479.png" alt="image-20220824104049479" style="zoom:67%;float:left" /><p>文件缓冲区是库函数申请的一段内存，由库函数对其进行操作，程序员没有必要知道存放在哪里，只需要知道对文件操作的时候的一些缓冲特点即可。</p><h2 id="磁盘文件的分类"><a href="#磁盘文件的分类" class="headerlink" title="磁盘文件的分类"></a>磁盘文件的分类</h2><p>一个文件通常是磁盘上一段命名的存储区 ,计算机的存储在物理上是二进制的，所以物理上所有的磁盘文件本质上都是一样的：以字节为单位进行顺序存储.</p><p>从用户或者操作系统使用的角度</p><p>把文件分为： </p><pre><code>文本文件：基于字符编码的文件 二进制文件：基于值编码的文件</code></pre><p><strong>文本文件、二进制文件对比</strong></p><p><strong>译码</strong>： </p><pre><code>文本文件编码基于字符定长，译码容易些； 二进制文件编码是变长的，译码难一些（不同的二进制文件格式，有不同的译码方式，一般需要特定软件进行译码）。</code></pre><p><strong>空间利用率</strong></p><p>二进制文件用一个比特来代表一个意思(位操作)； </p><p>而文本文件任何一个意思至少是一个字符。 </p><p>所以二进制文件，空间利用率高。</p><p><strong>可读性：</strong></p><p>文本文件用通用的记事本工具就几乎可以浏览所有文本文件 </p><p>二进制文件需要一个具体的文件解码器</p><h2 id="文件指针"><a href="#文件指针" class="headerlink" title="文件指针"></a>文件指针</h2><p><code>文件指针在程序中用来标识（代表）一个文件的，在打开文件的时候得到文件指针，文件指针就用来代表咱们打开的文件。</code></p><p>FILE * 指针变量标识符；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">iobuf</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> cnt; <span class="comment">// 剩余的字符，如果是输入缓冲区，那么就表示缓冲区中还有多少个字符未被读取</span></span><br><span class="line">    <span class="type">char</span> *ptr; <span class="comment">// 下一个要被读取的字符的地址</span></span><br><span class="line">    <span class="type">char</span> *base; <span class="comment">// 缓冲区基地址</span></span><br><span class="line">    <span class="type">int</span> flag; <span class="comment">// 读写状态标志位</span></span><br><span class="line">    <span class="type">int</span> fd; <span class="comment">// 文件描述符</span></span><br><span class="line">    <span class="comment">// 其他成员</span></span><br><span class="line">&#125; FILE;</span><br></pre></td></tr></table></figure><blockquote><p>在缓冲文件系统中,每个被使用的文件都要在内存中开辟一块 FILE 类型的区域,存放与操作文件相关的信息</p></blockquote><img src="../../../../../Data/OneDrive/桌面/c/c.assets/image-20220824104646521.png" alt="image-20220824104646521" style="zoom:67%;float:left;" /><p>对文件操作的步骤：</p><pre><code> 1、对文件进行读写等操作之前要打开文件得到文件指针  2、可以通过文件指针对文件进行读写等操作  3、读写等操作完毕后，要关闭文件，关闭文件后，就不能再通过此文件指针操作文件了</code></pre><h3 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h3><p>FILE *fopen(const char *path, const char *mode);</p><p>函数的参数：</p><ul><li>参数 1:打开的文件的路径</li><li>参数 2：文件打开的方式，即以什么样的方式  r w a +</li></ul><p><img src="/../../../../../Data/OneDrive/%E6%A1%8C%E9%9D%A2/c/c.assets/image-20220824105245000.png" alt="image-20220824105245000"></p><p>返回值： </p><ul><li>成功：打开的文件对应的文件指针 </li><li>失败：返回 NULL</li></ul><h3 id="fclose"><a href="#fclose" class="headerlink" title="fclose"></a>fclose</h3><p>int fclose(FILE *fp);   </p><p>关闭 fp 所代表的文件</p><p>返回值： </p><ul><li>成功返回 0 </li><li>失败返回非 0</li></ul><h3 id="fgetc-与-fputc"><a href="#fgetc-与-fputc" class="headerlink" title="fgetc 与 fputc"></a>fgetc 与 fputc</h3><p>int fgetc(FILE *stream);</p><p>fgetc 从 stream 所标识的文件中读取一个字节，将字节值返回</p><p><strong>返回值</strong>：  读到文件结尾返回 EOF</p><p>EOF 是在 stdio.h 文件中定义的符号常量，值为-1</p><p>int fputc(int c, FILE *stream)</p><p>fputc 将 c 的值写到 stream 所代表的文件中。</p><p><strong>返回值</strong>： </p><pre><code>如果输出成功，则返回输出的字节值； 如果输出失败，则返回一个 EOF。</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span> (disable:4996)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* fp1,*fp2;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">fp1 = fopen(<span class="string">&quot;.\\a.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fp1 == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Cannot open the file\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">fp2 = fopen(<span class="string">&quot;.\\b.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp2 == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Cannot open the file\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ((ch = fgetc(fp1)) != EOF)</span><br><span class="line">&#123;</span><br><span class="line">fputc(ch, fp2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fclose(fp1);</span><br><span class="line">fclose(fp2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fgets-与-fputs"><a href="#fgets-与-fputs" class="headerlink" title="fgets 与 fputs"></a>fgets 与 fputs</h3><p>char *fgets(char *s, int size, FILE *stream);</p><p>从 stream 所代表的文件中读取字符，在读取的时候碰到换行符或者是碰到文件的末尾停止读取，或者是读取了 size-1 个字节停止读取，在读取的内容后面会加一个\0,作为字符串的结尾</p><p>int fputs(const char *s, FILE *stream);</p><p>将 s 指向的字符串，写到 stream 所代表的文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">FILE* fp1, * fp2;</span><br><span class="line"></span><br><span class="line">char str[100];</span><br><span class="line"></span><br><span class="line">int error1 = fopen_s(&amp;fp1, &quot;kerwin.txt&quot;, &quot;r&quot;);</span><br><span class="line">if (error1 != 0) &#123;</span><br><span class="line">printf(&quot;打开失败&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">int error2 = fopen_s(&amp;fp2, &quot;copy.txt&quot;, &quot;a&quot;);</span><br><span class="line">if (error2 != 0) &#123;</span><br><span class="line">printf(&quot;打开失败&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">fgets(str, 100, fp1);</span><br><span class="line">fputs(str, fp2);</span><br><span class="line">printf(&quot;|%s|\n&quot;, str);</span><br><span class="line"></span><br><span class="line">fclose(fp1);</span><br><span class="line">fclose(fp2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h3><p>size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);</p><p>fread 函数从 stream 所标识的文件中读取数据，每块是 size 个字节，共nmemb 块，存放到ptr 指向的内存里</p><p>返回值： 实际读到的块数。</p><h3 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite"></a>fwrite</h3><p>size_t fwrite(void *ptr, size_t size, size_t nmemb, FILE *stream);</p><p>fwrite 函数将 ptr 指向的内存里的数据，向 stream 所标识的文件中写入数据，每块是size 个字节，共nmemb 块。</p><h3 id="rewind"><a href="#rewind" class="headerlink" title="rewind"></a>rewind</h3><p>rewind 复位读写位置</p><p>void rewind(文件指针);</p><p>把文件内部的位置指针移到文件首</p><h3 id="fseek"><a href="#fseek" class="headerlink" title="fseek"></a>fseek</h3><p>int fseek(FILE *stream, long offset, int whence);</p><p>移动文件流的读写位置.</p><p>whence 起始位置 </p><ul><li><p>文件开头 SEEK_SET 0 </p></li><li><p>文件当前位置 SEEK_CUR 1 </p></li><li><p>文件末尾 SEEK_END 2</p></li></ul><p>位移量: 以起始点为基点，向前、后移动的字节数，正数往文件末尾方向偏移，负数往文件开头方向偏移。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FILE* fp;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> error = fopen_s(&amp;fp, <span class="string">&quot;kerwin.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (error != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">fseek(fp, <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> bir[<span class="number">100</span>];</span><br><span class="line">fgets(bir,<span class="number">100</span>,fp);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, bir);</span><br></pre></td></tr></table></figure><h3 id="ftell"><a href="#ftell" class="headerlink" title="ftell"></a>ftell</h3><p>测文件读写位置距文件开始有多少个字节</p><p>long ftell(文件指针);</p><p>返回值： 返回当前读写位置(距离文件起始的字节数)，出错时返回-1.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">int</span> length;</span><br><span class="line">length = ftell(fp)</span><br></pre></td></tr></table></figure><h1 id="千锋图书管理借阅系统"><a href="#千锋图书管理借阅系统" class="headerlink" title="千锋图书管理借阅系统"></a>千锋图书管理借阅系统</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bookInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">100</span>];</span><br><span class="line"><span class="type">float</span> price;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bookInfo</span> <span class="title">data</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">list</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Node* <span class="title function_">createHead</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">headNode</span> =</span> (<span class="keyword">struct</span> Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (headNode == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">headNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> headNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> Node* <span class="title function_">createNode</span><span class="params">(<span class="keyword">struct</span> bookInfo data)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">newNode</span> =</span> (<span class="keyword">struct</span> Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (newNode == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">newNode-&gt;data = data;</span><br><span class="line">newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">insertBook</span><span class="params">(<span class="keyword">struct</span> Node *headNode,<span class="keyword">struct</span> bookInfo data)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据 传来的data,创建一个新的Node 结构体，newNode</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">newNode</span> =</span> createNode(data);</span><br><span class="line">newNode-&gt;next = headNode-&gt;next;</span><br><span class="line">headNode-&gt;next = newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">readInfo</span><span class="params">(<span class="type">char</span>* filename, <span class="keyword">struct</span> Node* headNode)</span> &#123;</span><br><span class="line"><span class="comment">//fscanf 返回EOF;</span></span><br><span class="line">FILE* fp = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">fp = fopen(filename, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bookInfo</span> <span class="title">temp</span>;</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s %f %d\n&quot;</span>,temp.name,&amp;temp.price,&amp;temp.num) != EOF) &#123;</span><br><span class="line">insertBook(<span class="built_in">list</span>, temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">saveInfo</span><span class="params">(<span class="type">char</span> *filename,<span class="keyword">struct</span> Node *headNode)</span> &#123;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">FILE* fp = fopen(filename, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="comment">//写入文件 fwrite , fprintf</span></span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">move</span> =</span> headNode-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (move != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;%s %.1f %d\n&quot;</span>, move-&gt;data.name, move-&gt;data.price, move-&gt;data.num);</span><br><span class="line"></span><br><span class="line">move = move-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">showlist</span><span class="params">(<span class="keyword">struct</span> Node* headNode)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">move</span> =</span> headNode-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (move != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %.1f %d\n&quot;</span>, move-&gt;data.name, move-&gt;data.price, move-&gt;data.num);</span><br><span class="line"></span><br><span class="line">move = move-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Node* <span class="title function_">searchByName</span><span class="params">(<span class="keyword">struct</span> Node *headNode,<span class="type">char</span> *name)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">move</span> =</span> headNode-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (move != <span class="literal">NULL</span> &amp;&amp; <span class="built_in">strcmp</span>(move-&gt;data.name,name)) &#123;</span><br><span class="line"></span><br><span class="line">move = move-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> move;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteByName</span><span class="params">(<span class="keyword">struct</span> Node* headNode, <span class="type">char</span>* name)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">move</span> =</span> headNode-&gt;next;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">prev</span> =</span> headNode;</span><br><span class="line"><span class="keyword">while</span> (move != <span class="literal">NULL</span> &amp;&amp; <span class="built_in">strcmp</span>(move-&gt;data.name, name)) &#123;</span><br><span class="line">prev = move;</span><br><span class="line">move = move-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (move == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">prev-&gt;next = move-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(move);</span><br><span class="line">move = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">keyEvent</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> key = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;key);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bookInfo</span> <span class="title">temp</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">result</span>;</span></span><br><span class="line"><span class="keyword">switch</span> (key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; [录入] \n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; 录入的书籍信息，名字，价格，数量\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s%f%d&quot;</span>,temp.name,&amp;temp.price,&amp;temp.num);</span><br><span class="line"><span class="comment">//printf(&quot;%s,%.1f,%d&quot;, temp.name, temp.price, temp.num);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步到链表</span></span><br><span class="line">insertBook(<span class="built_in">list</span>,temp);</span><br><span class="line"><span class="comment">// 同步文件</span></span><br><span class="line">saveInfo(<span class="string">&quot;kerwin.txt&quot;</span>, <span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; [速览] \n&quot;</span>);</span><br><span class="line">showlist(<span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; [借阅] \n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; 查询的书名是：\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, temp.name);</span><br><span class="line"></span><br><span class="line">result = searchByName(<span class="built_in">list</span>, temp.name);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未找到相关书籍，无法借阅\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">if</span> (result-&gt;data.num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">result-&gt;data.num--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;借阅成功\n&quot;</span>);</span><br><span class="line">saveInfo(<span class="string">&quot;kerwin.txt&quot;</span>, <span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没有库存，无法借阅&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; [归还] \n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; 查询的书名是：\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, temp.name);</span><br><span class="line"></span><br><span class="line">result = searchByName(<span class="built_in">list</span>, temp.name);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未找到相关书籍，无法借阅\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">result-&gt;data.num++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;归还成功\n&quot;</span>);</span><br><span class="line">saveInfo(<span class="string">&quot;kerwin.txt&quot;</span>, <span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; [查找] \n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; 查询的书名是：\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, temp.name);</span><br><span class="line"></span><br><span class="line">result = searchByName(<span class="built_in">list</span>, temp.name);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未找到相关书籍\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;书名 价格 数量\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %.1f %d\n&quot;</span>, result-&gt;data.name, result-&gt;data.price, result-&gt;data.num);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; [删除] \n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; 删除的书名是：\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, temp.name);</span><br><span class="line">deleteByName(<span class="built_in">list</span>,temp.name);</span><br><span class="line">saveInfo(<span class="string">&quot;kerwin.txt&quot;</span>,<span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; [退出] \n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);<span class="comment">//ctrl+c;</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;----------------------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;千锋图书管理借阅系统\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0.录入书籍\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.速览书籍\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2.借阅书籍\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3.归还书籍\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;4.查找书籍\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;5.删除书籍\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;6.退出系统\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;----------------------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入(0~6):&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//初始化头部指针。</span></span><br><span class="line"><span class="built_in">list</span> = createHead();</span><br><span class="line"><span class="comment">// 读取原来文件的数据.</span></span><br><span class="line">readInfo(<span class="string">&quot;kerwin.txt&quot;</span>, <span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">menu();</span><br><span class="line">keyEvent();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++程序设计</title>
      <link href="/2024/10/04/c++/"/>
      <url>/2024/10/04/c++/</url>
      
        <content type="html"><![CDATA[<h1 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h1><blockquote><p>第一个程序：打印输出HelloWorld</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// using namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello World!!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>#include</code>：引用头文件</li><li><code>main</code>：程序的入口（主函数），一个项目只能有一个主函数</li><li><code>std</code>：已经定义的命名空间，可释放注释,省略std<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;Hello World!!&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure></li><li><code>cout</code>：C++中的输出类</li><li><code>endl</code>：换行函数，可以释放缓存区</li></ul><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><ul><li>以两个斜线<code>//</code>开始，斜线之后的内容都是注释的内容，不会被编译<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// std::cout &lt;&lt; &quot;Hello World!!&quot; &lt;&lt; std::endl;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><ul><li>以<code>/*</code>开始，以<code>*/</code>结束，中间的所有内容都是注释的内容，可以换行，内容不会被编译<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/* std::cout &lt;&lt; &quot;Hello World!!&quot; &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">    std::cout &lt;&lt; &quot;Hello World!!&quot; &lt;&lt; std::endl; */</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello World!!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><blockquote><p>标识符：是由字母,数字,下划线,组成的一个字符序列，用来表示程序中的数据</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span> <span class="comment">// x代表10</span></span><br><span class="line">y = <span class="number">20</span> <span class="comment">// y代表20</span></span><br><span class="line">x + y = <span class="number">30</span></span><br></pre></td></tr></table></figure><blockquote><p>标识符的命名规范</p></blockquote><ul><li>由字母,数字,下划线组成，不能有其他的组成部分</li><li>不能以数字开头，需要以字母或者下划线组成</li><li>不能与系统关键字重复</li><li>区分大小写</li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><blockquote><p>整型：就是整数的类型，描述的是整数数字</p></blockquote><table><thead><tr><th align="center">数据类型</th><th align="center">关键字</th><th align="center">空间大小</th><th align="center">数据范围</th></tr></thead><tbody><tr><td align="center">短整型</td><td align="center">short</td><td align="center">2字节</td><td align="center">[2^-15,2^15-1]</td></tr><tr><td align="center">整型</td><td align="center">int</td><td align="center">4字节</td><td align="center">[2^-31,2^31-1]</td></tr><tr><td align="center">长整型</td><td align="center">long</td><td align="center">windows：4字节</td><td align="center">[2^-31,2^31-1]</td></tr><tr><td align="center">长长整型</td><td align="center">long long</td><td align="center">8字节</td><td align="center">[2^-63,2^63-1]</td></tr></tbody></table><ul><li><code>sizeof()</code>：返回一个数据类型或者一个变量的空间占用大小<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl; <span class="comment">// 4</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; endl; <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><blockquote><p>浮点型：就是小数的类型，用来描述的是小数数字</p></blockquote><table><thead><tr><th align="center">数据类型</th><th align="center">关键字</th><th align="center">空间大小</th><th align="center">精确范围</th></tr></thead><tbody><tr><td align="center">单精度浮点型</td><td align="center">float</td><td align="center">4字节</td><td align="center">小数点后面7位</td></tr><tr><td align="center">双精度浮点型</td><td align="center">double</td><td align="center">8字节</td><td align="center">小数点后面15位</td></tr></tbody></table><h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><blockquote><p>用来描述非真即假，非假及真的数据类型</p></blockquote><table><thead><tr><th align="center">数据类型</th><th align="center">关键字</th><th align="center">空间大小</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">布尔型</td><td align="center">bool</td><td align="center">1字节</td><td align="center">true   |    false</td></tr></tbody></table><h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><blockquote><p>用来描述一个文本内容中最小组成单位</p></blockquote><table><thead><tr><th align="center">数据类型</th><th align="center">关键字</th><th align="center">空间大小</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">字符型</td><td align="center">char</td><td align="center">1字节</td><td align="center">单引号<code>&#39;&#39;</code>引起来的内容</td></tr></tbody></table><h2 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h2><blockquote><p>由若干个字符组成的一个有序的字符序列</p></blockquote><table><thead><tr><th align="center">数据类型</th><th align="center">关键字</th><th align="center">空间大小</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">字符串型</td><td align="center">std::string</td><td align="center"></td><td align="center">单引号<code>&quot;&quot;</code>引起来的内容</td></tr></tbody></table><h1 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><blockquote><p>变化的量,可以修改值</p></blockquote><blockquote><p>定义变量的语法：</p><ol><li><code>数据类型</code> <code>标识符(变量名)</code></li><li><code>数据类型</code> <code>标识符</code> &#x3D; <code>值</code></li><li><code>数据类型</code> <code>标识符1[= 值]</code>，<code>标识符2[= 值]</code>，<code>标识符3[= 值]</code>…</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">short</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="type">long</span> c = <span class="number">20</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> d = <span class="number">30</span>;</span><br><span class="line"><span class="type">float</span> e = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">double</span> f = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="type">bool</span> g = <span class="literal">true</span>;</span><br><span class="line"><span class="type">char</span> h = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">std::string i = <span class="string">&quot;Hello World&quot;</span>; </span><br></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><blockquote><p>不变化的量，不可以修改值</p></blockquote><blockquote><p>定义常量的语法：<code>const</code> <code>数据类型</code> <code>标识符(变量名)</code></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><blockquote><p>转义字符<code>\</code></p></blockquote><ol><li>配合某些特殊字符使用，使其变成普通字符<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::string str = <span class="string">&quot;Hello \&quot; World&quot;</span>; <span class="comment">// 输出：Hello &quot; World </span></span><br></pre></td></tr></table></figure></li><li>配合某些特定的普通字符使用，代表某些特殊含义<ul><li><code>\t</code>：制表符 tab 四个空格</li><li><code>\n</code>：换行符</li><li><code>\r</code>：回车符</li></ul></li></ol><h1 id="控制台输入"><a href="#控制台输入" class="headerlink" title="控制台输入"></a>控制台输入</h1><blockquote><p><code>cin</code>：读取控制台上输入的内容，并且给某一个变量进行赋值</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">std::cin &gt;&gt; num; </span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n1 = <span class="number">0</span>，n2 = <span class="number">0</span>,n3 = <span class="number">0</span>;</span><br><span class="line">std::cin &gt;&gt; n1; </span><br><span class="line">std::cin &gt;&gt; n2; </span><br><span class="line">std::cin &gt;&gt; n3;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;n1 = &quot;</span>  &lt;&lt; n1 &lt;&lt; <span class="string">&quot;,n2 = &quot;</span> &lt;&lt; n2 &lt;&lt; <span class="string">&quot;,n3 = &quot;</span> &lt;&lt; n3;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入：123空格456空格789</span></span><br><span class="line"><span class="comment">// 输入：123回车456回车789</span></span><br><span class="line"><span class="comment">// 输出都为：n1 = 123,n2 = 456,n3 = 789</span></span><br><span class="line"><span class="comment">// 输入：3.14 123 -&gt; n1 = 3,n2 = 14,n3 = 123</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>缓冲区问题：<br>在控制台输入的内容都被暂存到了一个<code>缓冲区</code>中，<code>cin</code>从<code>缓冲区</code>取数据给变量进行赋值<br>遇到<code>.</code>和<code>空格</code>会被忽略，可使用<code>cin.ignore()</code>来忽略缓冲区的内容</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> num = <span class="number">0</span>,num2 = <span class="number">0</span>,num3 = <span class="number">0</span>;</span><br><span class="line">   cin.<span class="built_in">ignore</span>(); <span class="comment">// 忽略一位`.`和`空格`,参数是忽略个数</span></span><br><span class="line">   cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(),<span class="string">&quot;\n&quot;</span>); <span class="comment">//忽略所有内容</span></span><br><span class="line">   cin &gt;&gt; num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以连续输入</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num1=<span class="number">0</span>,num2=<span class="number">0</span>,num3=<span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; num1 &gt;&gt; num2 &gt;&gt; num3;</span><br><span class="line">    cout &lt;&lt; num1 &lt;&lt; num2 &lt;&lt; num3 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>错误处理</p><ul><li>cin内部会维护一个状态，来记录本次的读取操作是否正常</li><li>cin.good()；cin读取状态正确 值为1，否则为0</li><li>cin.fail()：cin读取状态错误 值为1，否则为0</li><li>如果被标记为<code>fail</code>状态，则会影响后续的读取操作</li><li><code>cin.clear()</code>：恢复状态，清除错误状态</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> num1 = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入一个整型的数字：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; num1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;good = &quot;</span> &lt;&lt; cin.<span class="built_in">good</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;fail = &quot;</span> &lt;&lt; cin.<span class="built_in">fail</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    cin.<span class="built_in">clear</span>() <span class="comment">// 若上面的cin输入错误，使用cin.clear()清除的错误状态，后面的输入才可以正常执行</span></span><br><span class="line">    cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(),<span class="string">&quot;\n&quot;</span>); <span class="comment">// 清空缓冲区内容，也可以清除错误状态</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> num1 = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入一个整型的数字：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; num1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h1><blockquote><p>宏定义：在文件的头部，使用<code>#define</code>来定义一个标识符，用来描述一个字符串，这个字符串就成为宏定义，使用时会自动替换为定义的值</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUCCESS_CODE 1 <span class="comment">// 宏定义</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   std::cout &lt;&lt; SUCCESS_CODE;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1><blockquote><p>为了避免各种类库的命名的标识符冲突，C++引入了关键字<code>namespace</code>(命名空间&#x2F;名字空间&#x2F;名称空间)，可以更好的控制标识符的作用域</p></blockquote><h2 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h2><blockquote><p>定义：<code>namespace</code> <code>命名空间名</code>{ … };<br>使用：<code>命名空间名</code>::<code>成员名</code></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> A &#123;</span><br><span class="line">   <span class="type">int</span> numA = <span class="number">10</span>;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">function</span><span class="params">()</span></span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 命名空间可以嵌套</span></span><br><span class="line">   <span class="keyword">namespace</span> AA &#123;</span><br><span class="line">      <span class="type">int</span> numAA = <span class="number">20</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> B&#123;</span><br><span class="line">   <span class="type">int</span> numB = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">// 命名空间的使用</span></span><br><span class="line">   std::cout &lt;&lt; A::numA &lt;&lt; std::endl;</span><br><span class="line">   std::cout &lt;&lt; A::AA::numAA &lt;&lt; std::endl;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>命名空间是开放的，可以随时向一个命名空间添加成员</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> A&#123;</span><br><span class="line">   <span class="type">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 命名空间中添加成员</span></span><br><span class="line"><span class="keyword">namespace</span> A&#123;</span><br><span class="line">   <span class="type">int</span> a2 = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   std::cout &lt;&lt; A::a2 &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="using关键字"><a href="#using关键字" class="headerlink" title="using关键字"></a>using关键字</h2><blockquote><p>直接引用<wavy>指定的命名空间</wavy>或<wavy>指定空间的指定成员</wavy></p><ol><li>导入命名空间：<code>using</code> <code>namespace</code> <code>命名空间</code></li><li>导入命名空间的成员：<code>using</code> <code>命名空间</code>::<code>成员</code></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">using</span> <span class="keyword">namespace</span> A; <span class="comment">// 引用命名空间</span></span><br><span class="line">   <span class="keyword">using</span> A::numA; <span class="comment">// 引用命名空间中的成员</span></span><br><span class="line">   std::cout &lt;&lt; numA &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项：</p><ol><li>如果引用的命名空间存在和当前的命名空间相同的成员，<wavy>默认使用当前的命名空间中的成员</wavy></li><li>如果引用的多个命名空间中存在相同名字的成员，且当前命名空间中没有这个成员，此时出现二义性。<wavy>命名空间不能省略</wavy></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> constant1&#123;</span><br><span class="line">   <span class="type">const</span> <span class="type">int</span> MAX_SCORE = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> constant2&#123;</span><br><span class="line">   <span class="type">const</span> <span class="type">int</span> MAX_SCORE = <span class="number">150</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果引用的命名空间存在和当前的命名空间相同的成员，默认使用当前的命名空间中的成员</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">const</span> <span class="type">int</span> MAX_SCORE = <span class="number">200</span>;</span><br><span class="line">   std::cout &lt;&lt; MAX_SCORE &lt;&lt; std::endl;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">using</span> <span class="keyword">namespace</span> constant1;</span><br><span class="line">   std::cout &lt;&lt; MAX_SCORE &lt;&lt; std::endl; <span class="comment">// 使用当前命名空间的成员  200</span></span><br><span class="line">   std::cout &lt;&lt; constant1::MAX_SCORE &lt;&lt; std::endl; <span class="comment">// 使用引用的命名空间，则命名空间不能省略 100</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果引用的多个命名空间中存在相同名字的成员，且当前命名空间中没有这个成员</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">using</span> <span class="keyword">namespace</span> constant1;</span><br><span class="line">   <span class="keyword">using</span> <span class="keyword">namespace</span> constant2;</span><br><span class="line">   std::cout &lt;&lt; MAX_SCORE &lt;&lt; std::endl;  <span class="comment">// 报错：MAX_SCORE 不明确</span></span><br><span class="line">   std::cout &lt;&lt; constant1::MAX_SCORE &lt;&lt; std::endl; <span class="comment">// 命名空间不能省略 100</span></span><br><span class="line">   std::cout &lt;&lt; constant2::MAX_SCORE &lt;&lt; std::endl; <span class="comment">// 命名空间不能省略 150</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><blockquote><p>对数字类型（整型，浮点型，字符型）的数据进行运算</p></blockquote><table><thead><tr><th align="center">运算符</th><th align="center">含义</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">对两个数字进行相加的计算</td><td align="center">10 + 3 &#x3D; 13</td></tr><tr><td align="center">-</td><td align="center">对两个数字进行相减的计算</td><td align="center">10 - 3 &#x3D; 7</td></tr><tr><td align="center">*</td><td align="center">对两个数字进行相乘的计算</td><td align="center">10 * 3 &#x3D; 30</td></tr><tr><td align="center">&#x2F;</td><td align="center">对两个数字进行相除的计算</td><td align="center">10 &#x2F; 3 &#x3D; 3</td></tr><tr><td align="center">%</td><td align="center">对两个数字进行求模的计算（求余数）</td><td align="center">10 % 3 &#x3D; 1</td></tr><tr><td align="center">++x</td><td align="center">前自增：x先进行+1，再进行运算</td><td align="center">y &#x3D; ++x;x &#x3D; x+1，y &#x3D; x + 1</td></tr><tr><td align="center">x++</td><td align="center">后自增：再进行运算，x先进行+1</td><td align="center">y &#x3D; x++;y &#x3D; x,x &#x3D; x + 1</td></tr><tr><td align="center">–x</td><td align="center">前自减：x先进行-1，再进行运算</td><td align="center">y &#x3D; –x;x &#x3D; x-1，y &#x3D; x - 1</td></tr><tr><td align="center">x–</td><td align="center">后自增：再进行运算，x先进行-1</td><td align="center">y &#x3D; x–;y &#x3D; x,x &#x3D; x - 1</td></tr></tbody></table><blockquote><p>注意事项：</p><ol><li>整型与整型计算的结果，还是一个整型，所以如果10&#x2F;3，得到的结果是浮点型3.33333，此时系统会将这个数字强制类型转换成整型的结果，<wavy>舍去小数点后面的所有数字</wavy>，只保留整数部分3</li><li>在进行计算的时候，结果会进行类型提升，<wavy>将结果提升为取值氛围大的数据类型</wavy><ul><li>int 与 int 的计算结果是 int</li><li>int 与 long 的计算结果是 long</li><li>float 与 long 的计算结果是 float</li><li>float 与 double 的计算结果是 double</li></ul></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> y = <span class="number">0</span>,x = <span class="number">0</span>;</span><br><span class="line">   y = x++;</span><br><span class="line">   std::cout &lt;&lt; <span class="string">&quot;y = &quot;</span> &lt;&lt;  y &lt;&lt; <span class="string">&quot;;x = &quot;</span> &lt;&lt; x &lt;&lt; std::endl; <span class="comment">// y = 0;x = 1</span></span><br><span class="line">   </span><br><span class="line">   <span class="type">int</span> y = <span class="number">0</span>,x = <span class="number">0</span>;</span><br><span class="line">   y = ++x;</span><br><span class="line">   std::cout &lt;&lt; <span class="string">&quot;y = &quot;</span> &lt;&lt;  y &lt;&lt; <span class="string">&quot;;x = &quot;</span> &lt;&lt; x &lt;&lt; std::endl; <span class="comment">// y = 1;x = 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><blockquote><p>将等号<code>=</code>右边的值赋给左边的变量<br>下面表格的前提：int num &#x3D; 10;</p></blockquote><table><thead><tr><th align="center">运算符</th><th align="center">示例</th><th align="center">运算结果</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="center">num &#x3D; 10</td><td align="center">(num &#x3D; 10)  &#x3D;&gt;  10</td></tr><tr><td align="center">+&#x3D;</td><td align="center">num +&#x3D; 10</td><td align="center">num &#x3D; (int)(num +10)</td></tr><tr><td align="center">-&#x3D;</td><td align="center">num -&#x3D; 10</td><td align="center">num &#x3D; (int)(num -10)</td></tr><tr><td align="center">*&#x3D;</td><td align="center">num *&#x3D; 10</td><td align="center">num &#x3D; (int)(num *10)</td></tr><tr><td align="center">&#x2F;&#x3D;</td><td align="center">num &#x2F;&#x3D; 10</td><td align="center">num &#x3D; (int)(num &#x2F;10)</td></tr><tr><td align="center">%&#x3D;</td><td align="center">num %&#x3D; 10</td><td align="center">num &#x3D; (int)(num %10)</td></tr></tbody></table><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><blockquote><p>对两个变量进行大小关系的比较，最后比较的结果一定是布尔类型的</p></blockquote><table><thead><tr><th align="center">运算符</th><th align="center">示例</th><th align="center">运算结果</th></tr></thead><tbody><tr><td align="center">&lt;</td><td align="center">10 &lt; 20</td><td align="center">true</td></tr><tr><td align="center">&gt;</td><td align="center">10 &gt; 20</td><td align="center">false</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">10 &lt;&#x3D; 20</td><td align="center">true</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">10 &gt;&#x3D; 20</td><td align="center">false</td></tr><tr><td align="center">&#x3D;&#x3D;</td><td align="center">10 &#x3D;&#x3D; 20</td><td align="center">false</td></tr><tr><td align="center">!&#x3D;</td><td align="center">10 !&#x3D; 20</td><td align="center">true</td></tr></tbody></table><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><blockquote><p>对两个布尔类型的变量进行的逻辑操作</p></blockquote><table><thead><tr><th align="center">运算符</th><th align="left">描述</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="left">与运算，两边为真即为真，任意一个为假，结果即为假</td><td align="center">true &amp; true  &#x3D;&gt;  true</td></tr><tr><td align="center">|</td><td align="left">或运算，两边为假即为假，任意一个为真，结果即为真</td><td align="center">true | false  &#x3D;&gt;  true</td></tr><tr><td align="center">!</td><td align="left">非运算，非真即假，非假及真</td><td align="center">!true  &#x3D;&gt;  false</td></tr><tr><td align="center">^</td><td align="left">异或运算，相同为假，不同为真</td><td align="center">true  ^  true  &#x3D;&gt;  false</td></tr><tr><td align="center">&amp;&amp;</td><td align="left">短路与，左边的结果为假，右边的表达式不参与运算</td><td align="center">false &amp;&amp; true  &#x3D;&gt;  true</td></tr><tr><td align="center">||</td><td align="left">短路或，左边的结果为真，右边的表达式不参与运算</td><td align="center">true || false  &#x3D;&gt;  true</td></tr></tbody></table><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><blockquote><p>作用于两个整数数字的运算，将参与运算的每一个数字计算出补码，对补码中的每一位进行类似于逻辑运算的操作，1相当于True，0相当于False</p></blockquote><div class="note red anzhiyufont anzhiyu-icon-dengpao simple"><ul><li>原码：十进制数据的二进制表现形式，最左边为符号位，0为正，1为负</li><li>反码：正数的反码是本身，负数的反码在原码的基础上，符号位不变。数值取反，0变1，1变0</li><li>补码：正数的补码是本身，负数的补码在反码的基础上+1</li></ul></div><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">位与运算</td><td align="center">10  &amp;  20</td></tr><tr><td align="center">|</td><td align="center">位或运算</td><td align="center">10  &amp;  20</td></tr><tr><td align="center">^</td><td align="center">位异或运算</td><td align="center">10  &amp;  20</td></tr><tr><td align="center">~</td><td align="center">按位取反运算</td><td align="center">~10</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">位左移运算</td><td align="center">10  &lt;&lt;  1  &#x3D;&gt; 10 * 2</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">位右移运算</td><td align="center">10  &gt;&gt;  1  &#x3D;&gt; 10 &#x2F; 2</td></tr></tbody></table><h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><blockquote><p>语法：<code>condition（条件）</code> <code>？</code> <code>value1</code> <code>:</code> <code>value2</code><br><code>condition</code>：是一个bool类型的变量或者bool类型运算结果的表达式<br> 运算逻辑：如果<code>condition</code>的值是true,三目运算符的结果取value1，否则取value2</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> age = <span class="number">22</span>;</span><br><span class="line">   std::cout &lt;&lt; (age &gt;= <span class="number">18</span> ? <span class="string">&quot;已成年&quot;</span> : <span class="string">&quot;未成年&quot;</span>) &lt;&lt; std::endl; <span class="comment">// 已成年</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><blockquote><p>代码从上往下，依次执行</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   std::cout &lt;&lt; <span class="number">10</span> &lt;&lt; std::endl;</span><br><span class="line">   std::cout &lt;&lt; <span class="number">20</span> &lt;&lt; std::endl;</span><br><span class="line">   std::cout &lt;&lt; <span class="number">30</span> &lt;&lt; std::endl;</span><br><span class="line">   std::cout &lt;&lt; <span class="number">40</span> &lt;&lt; std::endl;</span><br><span class="line">   <span class="comment">// 输出： 10  20  30  40</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><blockquote><p>程序在某一个节点遇到了多种执行的可能性，根据条件，选择一个分支继续执行</p></blockquote><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><blockquote><p><code>if else</code> 语句：可用于变量的区间范围进行判断，根据结果选择分支继续执行</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件判断<span class="number">1</span> <span class="literal">true</span> <span class="keyword">or</span> <span class="literal">false</span>)&#123;</span><br><span class="line">   <span class="comment">// 条件判断1结果为true，执行该括号内的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(条件判断<span class="number">1</span> <span class="literal">true</span> <span class="keyword">or</span> <span class="literal">false</span>) &#123;</span><br><span class="line">   <span class="comment">// 条件判断1结果为false，条件判断2结果为true，执行该括号内的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">// 条件判断2结果为false，执行该括号内的代码</span></span><br><span class="line">&#125;....</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果if 或 else if 或 else 后面的括号中有且只有一条语句，此时括号可以省略</span></span><br><span class="line"><span class="keyword">if</span>(条件判断<span class="number">1</span> <span class="literal">true</span> <span class="keyword">or</span> <span class="literal">false</span>) </span><br><span class="line">   <span class="comment">// 条件判断1结果为true，执行该条语句</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(条件判断<span class="number">1</span> <span class="literal">true</span> <span class="keyword">or</span> <span class="literal">false</span>)</span><br><span class="line">   <span class="comment">// 条件判断1结果为false，条件判断2结果为true，执行该括号内的代码</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="comment">// 条件判断2结果为false，执行该括号内的代码</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> age = <span class="number">22</span>;</span><br><span class="line">   <span class="keyword">if</span>( age &gt;= <span class="number">16</span> &amp;&amp; age &lt;= <span class="number">18</span> )&#123;</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;青少年&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span>( age &gt;<span class="number">18</span> )&#123;</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;成年人&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;年龄错误！！&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> age = <span class="number">22</span>;</span><br><span class="line">   <span class="keyword">if</span>( age &gt;= <span class="number">16</span> &amp;&amp; age &lt;= <span class="number">18</span> )</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;青少年&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>( age &gt;<span class="number">18</span> )</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;成年人&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;年龄错误！！&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch-case"><a href="#switch-case" class="headerlink" title="switch-case"></a>switch-case</h3><blockquote><p><code>switch case</code>语句：用于多重分支且条件判断是等值（固定特定值）判断的情况</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">switch</span>(variable)&#123;</span><br><span class="line">      <span class="keyword">case</span> const1:</span><br><span class="line">         <span class="comment">// variable == const1,执行该代码段</span></span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> const1:</span><br><span class="line">         <span class="comment">// variable == const2,执行该代码段</span></span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         <span class="comment">// variable 没有匹配的值，则执行该代码段</span></span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>variable：确定的<code>字符</code>或<code>整数</code>值</li><li>case：值只能是<code>字符</code>或<code>整数</code>的字面量，不能是变量，值不允许重复</li><li>break：表示<code>跳出/结束</code>，结束switch语句</li><li>default：所有情况都不匹配，执行该处的内容，可以写在任意位置，也可以省略不写</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> month = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">123</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;春天&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">456</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;夏天&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">789</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;秋天&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">101112</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;冬天&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;没有该季节！！！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 输出：春天</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>switch case 语句中的的<code>穿透性</code>：</p><ul><li>当switch的变量和某一个case的值匹配上之后，将会跳过后续的case或者default的匹配，直接向后穿透</li><li>为了避免switch的穿透性，每一个case和default可以使用<code>break</code>，来跳出switch语句</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> month = <span class="number">456</span>;</span><br><span class="line">    <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">123</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;春天&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">456</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;夏天&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">789</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;秋天&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">101112</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;冬天&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;没有该季节！！！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    <span class="comment">// 输出：夏天  秋天  冬天  没有该季节！！！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当然也可以利用switch的穿透性实现特定的功能</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> month = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;春天&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;夏天&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;秋天&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;冬天&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;没有该季节！！！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    <span class="comment">// 输出：夏天</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><blockquote><p>某段代码需要被重复执行多次并且遵循一定规律，则使用循环结构</p></blockquote><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">   <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>条件表达式：循环终止的判断条件语句，结果为bool类型的表达式</li><li>循环体：n行循环要执行的语句</li></ul></blockquote><blockquote><p>流程说明：</p><ol><li>执行条件表达式，也就是执行循环是否终止的判断条件，表达式的值如果是false，则循环结束，如果是true，循环继续执行</li><li>执行循环语句，大括号中的代码，需要循环的代码</li><li>回到第一步再次执行，直到表达式的结果为false，while循环才会结束</li></ol></blockquote><blockquote><p>注意事项</p><ol><li>while循环本身没有循环变量的声明和初始化的部分，应在while循环前声明循环变量并赋值</li><li>while循环本身也没有控制循环终止的判断条件语句部分，所以需要再循环体中增加相应的控制语句，否则容易死循环</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> count = <span class="number">1</span>; <span class="comment">// 循环变量声明和初始化</span></span><br><span class="line">   <span class="keyword">while</span>(i &lt;= <span class="number">5</span>)&#123; <span class="comment">// 循环条件</span></span><br><span class="line">      <span class="comment">// 循环体</span></span><br><span class="line">      std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">      i++; <span class="comment">// 更新循环变量</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 输出：1 2 3 4 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>示例：需要在控制台上输入一个整型数字，如果用户在控制台上输入的不正确，让用户重复输入，直到输入正确为止</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入一个整数：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    <span class="keyword">while</span>(cin.<span class="built_in">fail</span>())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入：&quot;</span>;</span><br><span class="line">        cin.<span class="built_in">clear</span>();</span><br><span class="line">        cin.<span class="built_in">ignore</span>(numeric_limits&lt; streamsize &gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        cin &gt;&gt; num;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">   <span class="comment">// 循环体</span></span><br><span class="line">&#125; <span class="keyword">while</span>(条件表达式);</span><br></pre></td></tr></table></figure><blockquote><p>流程说明</p><ol><li>先执行循环体中的语句</li><li>执行条件表达式（循环终止的条件判断语句），结果如果为<code>true</code>，继续执行，如果是<code>false</code>，则循环结束</li><li>回到第一步，再次执行，直到条件表达式的结果为<code>false</code></li></ol></blockquote><blockquote><p>注意事项</p><ul><li>do-while循环为先执行后判断，先执行一次循环体中的代码，然后再执行条件表达式，所以do-while循环至少执行一次</li><li>其他特点跟while循环一样</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化部分</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 循环体</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">// 循环变量更新</span></span><br><span class="line">        count++;</span><br><span class="line">    &#125; <span class="keyword">while</span>(count &lt; <span class="number">3</span>); <span class="comment">// 循环条件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(循环起点;循环条件;循环步长)&#123;</span><br><span class="line">   <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>循环起点：循环变量的<code>初始化</code>，如 int i &#x3D; 0</li><li>循环条件：循环<code>终止</code>的条件，为布尔表达式， 如 i &lt; 10</li><li>循环步长：循环改变的控制条件语句，如 i++</li><li>循环体：循环要执行的语句</li><li>表达式之间要用分号<code>;</code>分隔</li></ul></blockquote><blockquote><p>流程说明</p><ol><li>第一步：执行循环变量初始化语句（循环起点）</li><li>第二步：执行循环终止的判断条件表达式，结果为<code>ture</code>，继续执行第三步，结果为<code>false</code>，结束循环</li><li>第三步：执行循环语句</li><li>第四步：执行循环步长，也就是循环改变的控制条件语句，使循环变量的值发生改变</li><li>第五步：回到第二步，再次执行执行第二步到第五步，直到第二步的循环条件的表达式结果为<code>false</code>，循环结束</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++) &#123;</span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;当前循环变量的值：&quot;</span> &lt;&lt; i &lt;&lt; endl; </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 输出： 0 1 2 3 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>for循环的小括号中每一个部分都可以省略不写,但是分号<code>;</code>不能省略</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>( ; ; )&#123;</span><br><span class="line">      cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">      i++;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="流程控制的关键字"><a href="#流程控制的关键字" class="headerlink" title="流程控制的关键字"></a>流程控制的关键字</h3><blockquote><p><code>break</code>：</p><ul><li>用于终止某个语句块的执行</li><li>如果是在循环中，则是跳出所在的循环，如果是在switch语句中，则为跳出所在的switch语句</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; <span class="number">10</span>;i++) &#123;</span><br><span class="line">       <span class="keyword">if</span>(i == <span class="number">6</span>)&#123;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 输出：1 2 3 4 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>continue</code>：</p><ul><li>跳过本次循环，执行下一次循环，（如果有多次循环，默认继续执行离自己最近的循环）提前终止本次循环</li><li>只能在循环语句中使用</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; <span class="number">10</span>;i++) &#123;</span><br><span class="line">       <span class="keyword">if</span>(i == <span class="number">6</span>)&#123;</span><br><span class="line">           <span class="keyword">continue</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 输出：1 2 3 4 5 7 8 9 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>goto</code>：</p><ul><li>可以在任意的位置设置<code>标签</code>,使用关键字<code>goto</code>可以直接跳转到指定的<code>标签</code>的位置继续执行</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    label1:</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">goto</span> label3;</span><br><span class="line"></span><br><span class="line">    label2:</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    label3:</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;3&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 输出：1 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><blockquote><p>函数是一个可以多次使用的功能代码块</p></blockquote><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数的定义</span></span><br><span class="line">返回值类型 函数名(参数列表)&#123; <span class="comment">// 形参</span></span><br><span class="line">   函数体</span><br><span class="line">   <span class="keyword">return</span> 返回值 <span class="comment">// 有返回值则必须返回，没有则不用返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的调用</span></span><br><span class="line">函数名(参数列表) <span class="comment">// 实参</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>返回值：表示函数执行的结果，无返回值为<code>void</code>，有返回值就为对应的数据类型,<code>return</code>返回函数执行后的结果，并结束函数的执行</li><li>函数名：遵循标识符的命名规则</li><li>参数列表：定义若干个<code>参数</code>的部分，(参数类型 参数名1,参数类型 参数名2,参数类型，参数名3……)</li><li>函数体：函数的<code>功能</code>实现部分</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取两数最大的值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &gt; b)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="built_in">max</span>(<span class="number">10</span>,<span class="number">20</span>); </span><br><span class="line">    cout &lt;&lt; result &lt;&lt; endl; <span class="comment">//  输出：20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项</p><ul><li>函数不能嵌套</li><li>函数不调用，函数就不会被执行</li><li>函数定义写在<code>main</code>方法前面，但可以提前声明变量名</li><li>函数的执行会压到栈中去执行：<code>先进先出</code>，先调用的函数，在栈的底部存放，而新调用的函数，会在栈的顶部存放，程序先处理栈顶的函数中的逻辑</li><li>函数的调用：如果函数定义有参数列表，则调用时，<code>参数个数</code>和<code>参数类型</code>必须一致，调用时必须为每个参数赋值</li><li>形参：在定义函数的时候，小括号中定义的参数，由于这样的参数只有形式上的定义，并没有具体的值，因此被称为形式</li><li>实参：在调用函数的时候，小括号中定义的参数，由于这样的参数，位形参提供了确切的值，因此将这样的参数叫做<code>实际参数</code></li><li>传参：在调用的函数的时候，用实参给形参赋值，这样的过程叫做<code>传参</code></li><li>参数可以使用<code>const</code>来修饰，表示参数的值不允许<code>修改</code>的</li><li>在定义函数的时候，可以给参数一个默认值，但该参数要放到参数列表的<code>末尾</code>，传参时可以赋值，也可以不赋值</li></ul></blockquote><h2 id="函数的重载-OverLoad"><a href="#函数的重载-OverLoad" class="headerlink" title="函数的重载 OverLoad"></a>函数的重载 OverLoad</h2><blockquote><p>在一个类中的多个函数，<code>函数名相同</code>，<code>参数列表不同</code>(类型和数量不同)，则这两个函数就构成了重载关系</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2,<span class="type">int</span> num3)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2 + num3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> num1,<span class="type">double</span> num2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">add</span>(<span class="number">1</span>,<span class="number">2</span>) &lt;&lt; endl; <span class="comment">// 调用的是add(int,int)</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">add</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) &lt;&lt; endl; <span class="comment">// 调用的是add(int,int,int)</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">add</span>(<span class="number">1</span>,<span class="number">2.3</span>) &lt;&lt; endl; <span class="comment">// 调用的是add(int,double)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数的递归"><a href="#函数的递归" class="headerlink" title="函数的递归"></a>函数的递归</h2><blockquote><ul><li>递归：一种程序设计的思想，在解决问题的时候，可以将问题拆分成若干个小问题，这些小问题的解决方式，与大的问题解决方式相同，通过解决这些小问题，逐渐解决这个大问题</li><li>由于涉及到方法的循环调用，因此容易出现<code>死递归</code>的情况，即所有的方法调用没有出口，只能将方法压栈执行，但是无法结束方法，因此在使用递归的时候，需要设置有效的<code>出口条件</code>，<wavy>避免无穷递归</wavy></li><li>递进：每一次推进，计算都比上一次变得简单，直至简单到无需继续推进，就能获得结果，也叫到达出口</li><li>回归：基于出口的结果，逐层向上回归，一次计算每一层的结果，直至回归到最顶层</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算一个数字的阶乘，参数是需要计算阶乘的数字，返回值是计算的结果</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">multiply</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span> ) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 出口条件</span></span><br><span class="line">    <span class="keyword">return</span> n * <span class="built_in">multiply</span>(n - <span class="number">1</span>); <span class="comment">// 递进</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">multiply</span>(<span class="number">5</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算1 + 2 + 3 + ... + n的和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n + <span class="built_in">sum</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sum</span>(<span class="number">3</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用其他文件中的函数"><a href="#调用其他文件中的函数" class="headerlink" title="调用其他文件中的函数"></a>调用其他文件中的函数</h2><blockquote><ul><li><code>.cpp</code>文件中的内容是无法<code>跨文件</code>直接访问的， 若需要让某一个函数跨文件访问，需要为其定义一个<code>.h</code>文件，称为<code>头文件</code></li><li>在<code>头文件</code>中添加函数的<code>声明部分</code>即可，需要使用的时候，直接使用<code>#include</code>来包含指定的<code>头文件</code>即可完成</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tools.cpp文件</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">min</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span></span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (num1 &lt; num2)</span><br><span class="line">        <span class="keyword">return</span> num1;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num1 &lt; num2) </span><br><span class="line">        <span class="keyword">return</span> num2;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> num1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tools.h文件</span></span><br><span class="line"><span class="comment">// 头文件中只做声明，不做实现</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">min</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> <span class="comment">// 导入系统头文件时，用尖括号&lt;&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tools.h&quot;</span> <span class="comment">// 导入自定义头文件时，只能用双引号&quot;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(<span class="number">10</span>,<span class="number">20</span>) &lt;&lt; endl; <span class="comment">// 输出：20</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">min</span>(<span class="number">10</span>,<span class="number">20</span>) &lt;&lt; endl; <span class="comment">// 输出：10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="指针与引用"><a href="#指针与引用" class="headerlink" title="指针与引用"></a>指针与引用</h1><h2 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h2><h3 id="内存分区"><a href="#内存分区" class="headerlink" title="内存分区"></a>内存分区</h3><blockquote><p>在程序执行的时候，会在内存中开辟一些空间，存储数据，而内存又可以分为：<code>栈区</code>,<code>堆区</code>,<code>全局区</code>,<code>代码区</code>四个区</p></blockquote><h3 id="代码区"><a href="#代码区" class="headerlink" title="代码区"></a>代码区</h3><blockquote><p>代码区存放程序编译之后生成的<code>二进制代码</code>，例如我们写的函数就是存储在这。PS；函数在程序编译后，存储于<code>代码区</code>，调用函数时，会压到<code>栈区</code>执行其中的代码</p></blockquote><h3 id="全局区"><a href="#全局区" class="headerlink" title="全局区"></a>全局区</h3><blockquote><p>全局区内的变量在程序<code>编译</code>阶段已经<code>分配好内存空间</code>并<code>初始化</code>，这块内存在程序的整个运行期间都会存在，主要存放<code>静态变量</code>，<code>全局变量</code>，<code>全局常量</code></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局变量</span></span><br><span class="line"><span class="type">int</span> g_num1 = <span class="number">100</span>; </span><br><span class="line"><span class="comment">// 定义全局常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> g_num2 = <span class="number">100</span>; </span><br><span class="line"><span class="comment">// 定义全局静态变量</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> g_num3 = <span class="number">100</span>; </span><br><span class="line"><span class="comment">// 定义全局静态常量</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> g_num4 = <span class="number">100</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">// 定义局部变量</span></span><br><span class="line">   <span class="type">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">   <span class="comment">// 定义局部常量</span></span><br><span class="line">   <span class="type">const</span> <span class="type">int</span> num2 = <span class="number">10</span>;</span><br><span class="line">   <span class="comment">// 定义局部静态变量</span></span><br><span class="line">   <span class="type">static</span> <span class="type">int</span> mum3 = <span class="number">10</span>;</span><br><span class="line">   <span class="comment">// 定义局部静态常量</span></span><br><span class="line">   <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> num4 = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// &amp;:取地址符，获取数据的内存地址</span></span><br><span class="line">   cout &lt;&lt; &amp;g_num1 &lt;&lt; endl;  <span class="comment">// 全局区</span></span><br><span class="line">   cout &lt;&lt; &amp;g_num2 &lt;&lt; endl;  <span class="comment">// 全局区</span></span><br><span class="line">   cout &lt;&lt; &amp;g_num3 &lt;&lt; endl;  <span class="comment">// 全局区</span></span><br><span class="line">   cout &lt;&lt; &amp;g_num4 &lt;&lt; endl;  <span class="comment">// 全局区</span></span><br><span class="line">   </span><br><span class="line">   cout &lt;&lt; &amp;num1 &lt;&lt; endl;  <span class="comment">// 栈区</span></span><br><span class="line">   cout &lt;&lt; &amp;num2 &lt;&lt; endl;  <span class="comment">// 栈区</span></span><br><span class="line">   cout &lt;&lt; &amp;num3 &lt;&lt; endl;  <span class="comment">// 全局区</span></span><br><span class="line">   cout &lt;&lt; &amp;num4 &lt;&lt; endl;  <span class="comment">// 全局区</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈区"><a href="#栈区" class="headerlink" title="栈区"></a>栈区</h3><blockquote><p>栈区由<code>系统</code>进行的内存管理，主要存放<code>函数的参数</code>以及<code>局部变量</code>，在函数完成执行，系统会自<code>动释放栈区</code>的内存，不需要用户管理</p></blockquote><h3 id="堆区"><a href="#堆区" class="headerlink" title="堆区"></a>堆区</h3><blockquote><p> 堆区就是通过<code>new</code>、<code>malloc</code>、<code>realloc</code>分配的内存块，由<code>程序员</code>手动申请，手动释放，若不手动释放，程序结束后由系统回收，生命周期是整个程序执行期间，编译器不会负责它们的释放工作，需要用程序区释放。分配方式类似于数据结构中的链表。“内存泄漏”通常说的就是堆区。</p></blockquote><h3 id="内存中的数据残留"><a href="#内存中的数据残留" class="headerlink" title="内存中的数据残留"></a>内存中的数据残留</h3><blockquote><p>所谓的<code>删除数据</code>，删除的只是你对指定地址范围空间的<code>使用权</code>，你不能够再去使用这块空间了，但是这块空间中原来的内容是不会被删除掉的！</p></blockquote><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><blockquote><ul><li>定义变量就是在<code>内存</code>中开辟了一块指定大小的空间，空间开辟的大小取决于不同的<code>数据类型</code>所占用的空间大小。并且可以在这样的空间中进行值的赋值</li><li>指针：每一个开辟中的内存空间，都是有一个<code>唯一</code>的<code>地址</code>的，而这样的地址我们就称为是<code>指针</code></li><li><code>&amp;</code>：取地址操作符，取出变量的<code>内存地址</code></li><li><code>*</code>：间接寻址符：返回变量所指定地址的变量的<code>值</code></li></ul></blockquote><h3 id="指针的定义"><a href="#指针的定义" class="headerlink" title="指针的定义"></a>指针的定义</h3><blockquote><p>定义：<code>数据类型``*</code> <code>指针名</code></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明了一个普通变量 a</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="comment">//声明一个指针变量，指向变量 a 的地址</span></span><br><span class="line"><span class="type">int</span>* pa;</span><br><span class="line"><span class="comment">//通过取地址符&amp;，获取 a 的地址，赋值给指针变量</span></span><br><span class="line">pa = &amp;a;</span><br><span class="line"><span class="comment">//通过间接寻址符，获取指针指向的内容</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, *pa);</span><br></pre></td></tr></table></figure><blockquote><p>指针的类型</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; </span><br><span class="line">    <span class="type">int</span>*    pi;</span><br><span class="line">    <span class="type">short</span>*  ps;</span><br><span class="line">    <span class="type">long</span>*   pl;</span><br><span class="line">    <span class="type">float</span>*  pf;</span><br><span class="line">    <span class="type">double</span>* pd;</span><br><span class="line">    <span class="type">char</span>*   pc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>明明都是地址，为什么区分指针类型？因为<wavy>不同类型的指针±整数所跳过的字节数不同</wavy></li><li><code>int*</code>类型的指针 + 1 是跳过<code>四</code>个字节</li><li><code>double*</code>类型的指针 + 1 是跳过<code>八</code>个字节</li><li><code>char*</code>类型的指针 + 1 是跳过<code>一</code>个字节</li><li><code>指针</code> ± <code>整数</code>；是指针向前&#x2F;向后移动的<code>大小</code>（指针指向变量类型大小 * 整数）</li><li><code>指针</code> - <code>指针</code>：结果是两个指针之间所隔的<code>元素个数</code>，这种操作通常用于计算数组中两个元素之间的<code>距离</code>。</li></ul></blockquote><blockquote><ul><li>指针的作用就是通过<code>地址</code>取访问指针指向的<code>变量</code>。</li><li>指针的类型决定了指针解引用能够访问的<code>字节数</code>。</li><li>例如上面的 <code>int*</code>类型的指针能访问四个字节，<code>double*</code>类型的指针可以访问八个字节，<code>char*</code>类型的指针能够访问一个字节</li></ul></blockquote><h3 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h3><blockquote><p>空指针：指的是没有存储任何内存地址的<code>指针变量</code>，一般使用<code>NULL</code>来表示一个空的地址。通常情况下，使用空指针可以对指针变量进行<code>初始化</code>。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的指针变量p没有存储任何的地址，就是一个空指针。</span></span><br><span class="line"><span class="type">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置为NULL的指针变量，存储的地址其实是0，但是地址0到255的内存为系统内存，不允许访问</span></span><br><span class="line"><span class="comment">// 因此这里会出现“读取访问权限”的问题</span></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h3 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h3><blockquote><p>野指针：指针中存储有一个内存地址，但是这个地址指向的空间已经不存在了，这样的指针称为野指针</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里定义了一个指针变量，随便写了一个地址，这个地址对应的空间极有可能是不存在的</span></span><br><span class="line"><span class="type">int</span>* p = (<span class="type">int</span>*)<span class="number">0x1234</span>;</span><br><span class="line"><span class="comment">// 访问野指针，也是会出现问题的</span></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h3 id="常量指针"><a href="#常量指针" class="headerlink" title="常量指针"></a>常量指针</h3><ul><li><code>const</code>放在<code>*</code>之前，表示常量指针，即常量的指针</li><li>指针的指向是可以修改的，但是不能通过指针来修改指向<code>空间的值</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num1 = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> num2 = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const放在*之前，表示常量指针，即常量的指针</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* p1 = &amp;num1;</span><br><span class="line">p1 = &amp;num2;</span><br><span class="line"><span class="comment">// 指针的指向是可以修改的，但是不能通过指针来修改指向空间的值</span></span><br><span class="line"><span class="comment">// *p1 = 200;</span></span><br></pre></td></tr></table></figure><h3 id="指针常量"><a href="#指针常量" class="headerlink" title="指针常量"></a>指针常量</h3><ul><li><code>const</code>放在<code>*</code>之后，表示指针常量，即指针是一个常量值</li><li>可以通过指针来修改指向空间的值，但是不能修改指针的<code>地址指向</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num1 = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> num2 = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const放在*之后，表示指针常量，即这个指针是一个常量</span></span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> p2 = &amp;num1;</span><br><span class="line"><span class="comment">// 可以通过指针修改指向空间的值，但是指针的指向是不可以修改的</span></span><br><span class="line"><span class="comment">// p2 = &amp;num2;</span></span><br><span class="line">*p2 = <span class="number">300</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">interchange</span><span class="params">(<span class="type">int</span>* n1,<span class="type">int</span>* n2)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = *n1;</span><br><span class="line">    *n1 = *n2;</span><br><span class="line">    *n2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">interchange</span>(&amp;a,&amp;b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><ul><li>变量名实质上是一段连续内存空间的别名</li><li>引用可以作为一个已定义变量的<code>别名</code>，通过这个别名和原来的名字都能够找到这份数据</li><li>定义：<code>数据类型</code> <code>&amp;</code> <code>引用名</code></li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span>&amp; b = a;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl; <span class="comment">// 输出： a = 100</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;  <span class="comment">// 输出：b = 100</span></span><br><span class="line">    cout &lt;&lt; &amp;a == &amp;b &lt;&lt; endl; <span class="comment">// 输出：1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项：</p><ul><li><code>&amp;</code>在此不是求地址运算，而是起<code>标识</code>作用</li><li>类型标识符是指<code>目标变量</code>的类型</li><li>引用必须在定义的同时<code>初始化</code>，并且以后也要从一而终，不能再引用其它数据，有点类似于 <code>const</code>变量</li><li>引用初始化之后不能改变</li><li>不能有<code>NULL</code>引用。必须确保引用是和一块合法的存储单元关联</li><li>可以建立对<code>数组</code>的引用</li></ul></blockquote><h3 id="引用的本质"><a href="#引用的本质" class="headerlink" title="引用的本质"></a>引用的本质</h3><blockquote><p>所谓的引用，其实本质来讲就是一个<code>指针常量</code></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个整型的变量n</span></span><br><span class="line">    <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义n的引用</span></span><br><span class="line">    <span class="type">int</span>&amp; a = n; </span><br><span class="line">    <span class="comment">// 这里相当于是 int* const rn = &amp;a;</span></span><br><span class="line">    <span class="comment">// 这也就解释通了为什么rn和a引用的同一块空间，并且为什么rn不能修改引用</span></span><br><span class="line">    <span class="type">int</span>&amp; rn = n;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在通过引用进行空间访问的时候，系统会自动的转换成 *rn = 200;</span></span><br><span class="line">    rn = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常量引用"><a href="#常量引用" class="headerlink" title="常量引用"></a>常量引用</h3><blockquote><p>常量引用，就是对一个常量建立引用，又称为<code>常引用</code>。主要用在函数的形参部分，访问误操作导致在函数题中通过形参，修改实参的值</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里会出问题</span></span><br><span class="line">    <span class="comment">// n = 200;</span></span><br><span class="line">    cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><blockquote><p>数组（array）是一种线性数据结构，其将相同类型的元素存储在连续的内存空间中。我们将元素在数组中的位置称为该元素的索引（index）<br>数组：是一个数据容器，可以存储一个固定大小的<code>相同类型</code>元素的顺序<code>集合</code></p></blockquote><blockquote><p>特征：</p><ul><li>数组可以用来存储任意数据类型的数据，但是所有的数据需要是<code>相同</code>的数据类型</li><li>数组是一个定长的容器，一旦初始化完成，长度将<code>不能改变</code></li><li>数组中的元素被存储在一段<code>连续</code>的内存空间中</li><li><code>元素</code>: 数组中存储的每一个数据，称为数组中的元素</li><li><code>长度</code>: 数组的容量，即数组中可以存储多少个元素</li><li><code>遍历</code>: 依次获取数组中的每一个元素</li></ul></blockquote><h2 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h2><blockquote><ul><li><code>数据类型</code> <code>数组名</code>[<code>数组长度</code>]</li><li><code>数据类型</code> <code>数组名</code>[<code>数组长度</code>] &#x3D; {元素1，元素2，元素3……}</li><li><code>数据类型</code> <code>数组名</code>[] &#x3D; {元素1，元素2，元素3……}</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定义指定长度的数组，此时数组中填充的元素是不安全的</span></span><br><span class="line"><span class="type">int</span> array1[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 定义指定长度的数组，并使用默认的值来填充</span></span><br><span class="line"><span class="type">int</span> array2[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;<span class="comment">// 定义一个存储int类型元素的数组，填充10个初始的值。</span></span><br><span class="line"><span class="type">int</span> array3[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;<span class="comment">// 如果大括号中的初始的元素数量小于数组长度，剩余的元素填充默认值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 定义一个数组，指定数组中的元素，此时数组的长度由初始元素的数量来决定</span></span><br><span class="line"><span class="type">int</span> array4[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h2><blockquote><p>数组的访问：<br>为了能够区分数组中存储的每一个元素，在数组中存储的每一个元素都有一个唯一的<code>序号</code>，称为 <code>下标</code>。我们在访问数组中的元素的时候，通过下标来访问。</p><ul><li>注意事项: 数组中元素的下标是从<code>0</code>开始的！即数组中的元素下标范围是 <code>[0, 数组长度-1]</code></li><li>访问：<code>数组名</code>[<code>下标</code>]</li><li>修改：<code>数组名</code>[<code>下标</code>] &#x3D; 值</li><li><code>sizeof()</code>：返回一个对象或者类型所占的<code>内存字节数</code></li><li>注意事项: 通过下标访问数组元素的时候，<wavy>注意不要越界！</wavy></li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个数组</span></span><br><span class="line"><span class="type">int</span> array[<span class="number">10</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问下标为5的元素</span></span><br><span class="line">cout &lt;&lt; array[<span class="number">5</span>] &lt;&lt; endl;<span class="comment">// 读取值并输出</span></span><br><span class="line">array[<span class="number">5</span>] = <span class="number">50</span>;<span class="comment">// 修改指定下标的元素的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组长度的获取</span></span><br><span class="line"><span class="type">int</span> length = <span class="built_in">sizeof</span>(array) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组，并输出遍历到的元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    cout &lt;&lt; array[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的内存分析"><a href="#数组的内存分析" class="headerlink" title="数组的内存分析"></a>数组的内存分析</h2><blockquote><p>数组是一个容器，在内存中进行空间开辟的时候，并不是一个整体的空间，而是开辟了若干个<code>连续</code>的空间<br>例如：int array[10]<br>这个数组的长度为10，存储的元素数据类型是int。也就是说，需要在内存中开辟连续的10个4字节空间来存储元素。<br>array表示的是数组中<code>首元素</code>的<code>内存地址</code>！</p></blockquote><blockquote><p>int arr[10] &#x3D; {1, 2, 3, 4, 5};</p><ul><li>arr表示的是数组中<code>首元素</code>的<code>内存地址</code>。</li><li>可以直接通过 <code>*arr</code> 来找到数组中的<code>首元素</code></li><li>后面一个元素,可以通过arr的内存地址+4来访问到，再后面的一个元素，再加一个4….<br>（为什么要加4呢？因为这个数组中存储的元素类型是int，占据4个字节空间。如果是一个short数组，那就需要+2了）</li><li>C++将这一个元素的内存占用空间大小作为一个<code>单位</code> 例如: int数组，一个单位就是4个字节，short数组，一个单位就是2个字节<br>在进行元素访问的时候，首元素直接通过<code>*arr</code>就可以访问<br>后面的一位元素，偏移一个单位的地址<code>*(arr + 1)</code>个单位<br>再后面的一位元素，偏移两个单位的地址<code>*(arr + 2)</code>个单位<br>再后面的一位元素，偏移三个单位的地址<code>*(arr + 3)</code>个单位<br>这就是为什么，数组中元素的下标是从0开始的</li><li>注意事项：当数组作为参数传递到一个函数中的时候，传递的只是<code>首元素</code>的<code>地址</code>！</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(<span class="type">int</span>); <span class="comment">// 数组长度</span></span><br><span class="line">    cout &lt;&lt; len &lt;&lt; endl; </span><br><span class="line">    cout &lt;&lt; *arr &lt;&lt; endl; <span class="comment">// 数组中第一个元素的地址</span></span><br><span class="line">    cout &lt;&lt;  *(arr + <span class="number">1</span>) &lt;&lt; endl; <span class="comment">// 数组中第二个元素的地址</span></span><br><span class="line">    cout &lt;&lt;  *(arr + <span class="number">2</span>) &lt;&lt; endl; <span class="comment">// 数组中第三个元素的地址</span></span><br><span class="line">    cout &lt;&lt;  *(arr + <span class="number">3</span>) &lt;&lt; endl; <span class="comment">// 数组中第四个元素的地址</span></span><br><span class="line">    cout &lt;&lt;  *(arr + <span class="number">4</span>) &lt;&lt; endl; <span class="comment">// 数组中第五个元素的地址</span></span><br><span class="line">    cout &lt;&lt;  *(arr + <span class="number">5</span>) &lt;&lt; endl; <span class="comment">// 数组中第六个元素的地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的参数其实等价于 int* arr，只是一个指向首元素的地址</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArray1</span><span class="params">(<span class="type">int</span> arr[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 计算数组的长度</span></span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    cout &lt;&lt; len &lt;&lt; endl;<span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因此需要在一个函数中完成数组的遍历、排序等操作的时候，需要带上长度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArray2</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><h4 id="下标遍历"><a href="#下标遍历" class="headerlink" title="下标遍历"></a>下标遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算长度</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="范围遍历"><a href="#范围遍历" class="headerlink" title="范围遍历"></a>范围遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> ele : arr) &#123;</span><br><span class="line">    cout &lt;&lt; ele &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h3><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><blockquote><p>开启一个循环，每轮从未排序区间选择<code>最小</code>的元素，将其放到已排序区间的<code>末尾</code></p></blockquote><blockquote><p>设数组的长度为<code>n</code></p><ol><li>初始状态下，所有元素未排序，即未排序（索引）区间为<code>[0,n-1]</code></li><li>选取区间<code>[0,n-1]</code>中的最小元素，将其与索引<code>0</code>处的元素交换。完成后，数组前 1 个元素已排序</li><li>选取区间<code>[1,n-1]</code>中的最小元素，将其与索引<code>1</code>处的元素交换。完成后，数组前 2 个元素已排序。</li><li>以此类推。经过<code>n-1</code>轮选择与交换后，数组前<code>n-1</code>个元素已排序。</li><li>仅剩的一个元素必定是最大元素，无须排序，因此数组排序完成。</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/renzian/blog_renzian_images/selectionSort.gif" alt="image-selectionSort"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectionSort</span><span class="params">(<span class="type">int</span>* arr,<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="comment">// 设置最小值的下标</span></span><br><span class="line">        <span class="type">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; len; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[minIndex] &gt; arr[j])&#123;</span><br><span class="line">                <span class="comment">// 找到最小值,更新下标</span></span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 交换当前遍历的元素和记录的最小值下标位的元素</span></span><br><span class="line">        <span class="type">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[minIndex];</span><br><span class="line">        arr[minIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArray</span><span class="params">(<span class="type">int</span>* arr,<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;[&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i != len<span class="number">-1</span>)</span><br><span class="line">            cout &lt;&lt;  arr[i] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            cout &lt;&lt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个数组</span></span><br><span class="line">    <span class="type">int</span> array[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="comment">// 计算数组长度</span></span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">sizeof</span>(array) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择排序</span></span><br><span class="line">    <span class="built_in">sort</span>(array, len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出排序之后的数组</span></span><br><span class="line">    <span class="built_in">printArray</span>(array, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><blockquote><p>从数组最左端开始向右遍历，依次<wavy>比较相邻元素大小</wavy>，如果<code>左元素</code> &gt; <code>右元素</code>就交换二者。遍历完成后，最大的元素会被移动到数组的<code>最右端</code></p></blockquote><blockquote><p>设数组的长度为<code>n</code></p><ol><li>首先，对<code>n</code>个元素执行<code>冒泡</code>，将数组的最大元素交换至正确位置。</li><li>接下来，对剩余<code>n-1</code>个元素执行<code>冒泡</code>，将第二大元素交换至正确位置。</li><li>以此类推，经过<code>n-1</code>轮<code>冒泡</code>后，前<code>n-1</code>大的元素都被交换至正确位置。</li><li>仅剩的一个元素必定是最小元素，无须排序，因此数组排序完成。</li></ol></blockquote><p><img src="https://www.hello-algo.com/chapter_sorting/bubble_sort.assets/bubble_sort_overview.png" alt="image-bubbleSort"></p><p><img src="https://cdn.jsdelivr.net/gh/renzian/blog_renzian_images/bubbleSort.gif" alt="image-bubbleSort"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(<span class="type">int</span>* array, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="comment">// 比较相邻元素的大小</span></span><br><span class="line">            <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 相邻元素交换位置</span></span><br><span class="line">                <span class="type">int</span> temp = array[j];</span><br><span class="line">                array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">                array[j + <span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArray</span><span class="params">(<span class="type">int</span>* arr,<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;[&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i != len<span class="number">-1</span>)</span><br><span class="line">            cout &lt;&lt;  arr[i] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个数组</span></span><br><span class="line">    <span class="type">int</span> array[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="comment">// 计算数组长度</span></span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">sizeof</span>(array) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择排序</span></span><br><span class="line">    <span class="built_in">sort</span>(array, len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出排序之后的数组</span></span><br><span class="line">    <span class="built_in">printArray</span>(array, len);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组元素查找"><a href="#数组元素查找" class="headerlink" title="数组元素查找"></a>数组元素查找</h3><blockquote><p>数组元素查找指的是从给定的一个数组中查询<code>指定元素</code>出现的<code>下标</code><br>由于需要查询的元素在指定的数组中可能出现多次，在这里我们只需要找到一个即可</p></blockquote><h4 id="顺序查询法"><a href="#顺序查询法" class="headerlink" title="顺序查询法"></a>顺序查询法</h4><blockquote><p>顺序查询，<wavy>就是从前往后遍历数组</wavy>，将数组中的每一个元素和需要查询的元素进行对比。如果比较结果是相同的，说明找到了需要查询的元素。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从一个数组中查询指定的元素element出现的下标</span></span><br><span class="line"><span class="comment"> * @param array 需要查询元素的数组</span></span><br><span class="line"><span class="comment"> * @param len 数组的长度</span></span><br><span class="line"><span class="comment"> * @param element 需要查找的元素</span></span><br><span class="line"><span class="comment"> * @return 元素存在的下标，如果不存在这个元素，返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">indexOf</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* array, <span class="type">int</span> len, <span class="type">int</span> element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 遍历数组中的每一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] == element) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个数组</span></span><br><span class="line">    <span class="type">int</span> array[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="comment">// 计算数组长度</span></span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">sizeof</span>(array) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数组中查询元素</span></span><br><span class="line">    <span class="type">int</span> index = <span class="built_in">indexOf</span>(array, len, <span class="number">7</span>);</span><br><span class="line">    cout &lt;&lt; index &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二分查询法"><a href="#二分查询法" class="headerlink" title="二分查询法"></a>二分查询法</h4><blockquote><ul><li>二分查询， 即利用<wavy>数组中间的位置</wavy>， 将数组分为前后两个<code>子表</code>。</li><li>如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表</li><li>重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功</li></ul></blockquote><blockquote><p>注意：二分查询， 要求数组必须是<code>排序</code>的， 否则无法使用二分查询</p></blockquote><div class="tabs" id="binarysearch"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="binarysearch-1">Step 1</button><button type="button" class="tab " data-href="binarysearch-2">Step2</button><button type="button" class="tab " data-href="binarysearch-3">Step3</button><button type="button" class="tab " data-href="binarysearch-4">Step4</button><button type="button" class="tab " data-href="binarysearch-5">Step5</button><button type="button" class="tab " data-href="binarysearch-6">Step6</button><button type="button" class="tab " data-href="binarysearch-7">Step7</button></ul><div class="tab-contents"><div class="tab-item-content active" id="binarysearch-1"><p><img src="https://cdn.jsdelivr.net/gh/renzian/blog_renzian_images/binary_search_step1.png" alt="images_binary_search_step1"></p></div><div class="tab-item-content" id="binarysearch-2"><p><img src="https://cdn.jsdelivr.net/gh/renzian/blog_renzian_images/binary_search_step2.png" alt="images_binary_search_step2"></p></div><div class="tab-item-content" id="binarysearch-3"><p><img src="https://cdn.jsdelivr.net/gh/renzian/blog_renzian_images/binary_search_step3.png" alt="images_binary_search_step3"></p></div><div class="tab-item-content" id="binarysearch-4"><p><img src="https://cdn.jsdelivr.net/gh/renzian/blog_renzian_images/binary_search_step4.png" alt="images_binary_search_step4"></p></div><div class="tab-item-content" id="binarysearch-5"><p><img src="https://cdn.jsdelivr.net/gh/renzian/blog_renzian_images/binary_search_step5.png" alt="images_binary_search_step5"></p></div><div class="tab-item-content" id="binarysearch-6"><p><img src="https://cdn.jsdelivr.net/gh/renzian/blog_renzian_images/binary_search_step6.png" alt="images_binary_search_step6"></p></div><div class="tab-item-content" id="binarysearch-7"><p><img src="https://cdn.jsdelivr.net/gh/renzian/blog_renzian_images/binary_search_step7.png" alt="images_binary_search_step7"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从一个数组中查询指定的元素element出现的下标</span></span><br><span class="line"><span class="comment"> * @param array 需要查询元素的数组，升序排序的数组</span></span><br><span class="line"><span class="comment"> * @param len 数组的长度</span></span><br><span class="line"><span class="comment"> * @param element 需要查找的元素</span></span><br><span class="line"><span class="comment"> * @return 元素存在的下标，如果不存在这个元素，返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">indexOf</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* array, <span class="type">int</span> len, <span class="type">int</span> element)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义变量，确定需要查询的范围</span></span><br><span class="line">    <span class="type">int</span> minIndex = <span class="number">0</span>, maxIndex = len - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (minIndex &lt;= maxIndex) &#123;</span><br><span class="line">        <span class="comment">// 计算出新的中间下标</span></span><br><span class="line">        <span class="type">int</span> midIndex = (maxIndex + minIndex) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 比较中间值和需要查询的元素</span></span><br><span class="line">        <span class="keyword">if</span> (array[midIndex] &gt; element) &#123;</span><br><span class="line">            <span class="comment">// 中间值比要查询的元素大，此情况说明 target 在区间 [m+1, j] 中</span></span><br><span class="line">            maxIndex = midIndex - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[midIndex] &lt; element) &#123;</span><br><span class="line">            <span class="comment">// 中间值比要查询的元素小，此情况说明 target 在区间 [i, m-1] 中</span></span><br><span class="line">            minIndex = midIndex + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 找到目标元素，返回其索引</span></span><br><span class="line">            <span class="keyword">return</span> midIndex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 未找到目标元素，返回 -1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个数组</span></span><br><span class="line">    <span class="type">int</span> array[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="comment">// 计算数组长度</span></span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">sizeof</span>(array) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从数组中查询元素</span></span><br><span class="line">    <span class="type">int</span> index = <span class="built_in">indexOf</span>(array, len, <span class="number">7</span>);</span><br><span class="line">    cout &lt;&lt; index &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的练习"><a href="#数组的练习" class="headerlink" title="数组的练习"></a>数组的练习</h3><ol><li>设计一个函数，找出一个数组中最大的数字，连同所在的下标一起输出。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printMaxElementAndIndex</span><span class="params">(<span class="type">int</span>* array, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 空数组判断</span></span><br><span class="line">   <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;空数组，不存在最大值！&quot;</span> &lt;&lt; endl;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 不是空数组，假设数组中第0个元素就是最大的</span></span><br><span class="line">   <span class="type">int</span> maxElement = array[<span class="number">0</span>], maxIndex = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">// 遍历数组，依次和当前记录的最大值进行比较</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">       <span class="keyword">if</span> (array[i] &gt; maxElement) &#123;</span><br><span class="line">           <span class="comment">// 遍历到了新的最大值</span></span><br><span class="line">           maxElement = array[i];</span><br><span class="line">           maxIndex = i;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 输出结果</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;最大值是: &quot;</span> &lt;&lt; maxElement &lt;&lt; <span class="string">&quot;, 所在的下标是: &quot;</span> &lt;&lt; maxIndex &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>设计一个函数，判断一个数组是不是一个升序的数组。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkAscending</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* array, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 思路: 从前往后，依次比较两个相邻的元素，如果后面的元素比前面的小，就可以说明不是升序</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">       <span class="keyword">if</span> (array[i] &gt; array[i + <span class="number">1</span>]) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkAscending</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* array, <span class="type">int</span> maxIndex)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 递归:</span></span><br><span class="line">   <span class="keyword">if</span> (maxIndex == <span class="number">1</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> array[<span class="number">1</span>] &gt;= array[<span class="number">0</span>];</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 如果maxIndex位的元素大于等于maxIndex-1位的元素，并且前maxIndex-1位的元素是升序的，那么整体就是升序的</span></span><br><span class="line">   <span class="keyword">return</span> array[maxIndex] &gt;= array[maxIndex - <span class="number">1</span>] &amp;&amp; <span class="built_in">checkAscending</span>(array, maxIndex - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>设计一个函数，找出一个整型数组中的第二大的值。<ul><li>不可以通过排序实现，不能修改数组中的数据顺序</li><li>要考虑到最大的数字可能出现多次</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getSecondMax</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* array, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (len &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;没有次大值&quot;</span> &lt;&lt; endl;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 定义两个变量，分别用来记录最大值和次大值</span></span><br><span class="line">   <span class="type">int</span> max = array[<span class="number">0</span>], second = array[<span class="number">0</span>];</span><br><span class="line">   <span class="comment">// 遍历数组中的每一个元素</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">       <span class="keyword">if</span> (array[i] &gt; max) &#123;</span><br><span class="line">           <span class="comment">// 新的最大值出现了，需要更新最大值和次大值</span></span><br><span class="line">           second = max;</span><br><span class="line">           max = array[i];</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[i] &lt; max &amp;&amp; array[i] &gt; second) &#123;</span><br><span class="line">           <span class="comment">// 新的次大值出现了</span></span><br><span class="line">           second = array[i];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">return</span> second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>设计一个函数，将一个数组中的元素倒序排列（注意，不是降序）。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span>* array, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 交换第0位和最后一位，第一位和倒数第二位... 交换到一半即可</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">2</span>; i++) &#123;</span><br><span class="line">       <span class="type">int</span> temp = array[i];</span><br><span class="line">       array[i] = array[array.length - <span class="number">1</span> - i];</span><br><span class="line">       array[array.length - i - <span class="number">1</span>] = temp;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>将一个数组中的元素拷贝到另外一个数组中。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">copy</span><span class="params">(<span class="type">int</span>* src, <span class="type">int</span> srcLen, <span class="type">int</span>* dst, <span class="type">int</span> dstLen)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 遍历原数组，依次将元素拷贝到目标数组中</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; srcLen; i++) &#123;</span><br><span class="line">       <span class="comment">// 2. dst越界判断</span></span><br><span class="line">       <span class="keyword">if</span> (i &gt;= dstLen) &#123;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       dst[i] =  src[i];</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>设计一个函数，比较两个数组中的元素是否相同（数量、每一个元素都相同，才认为是相同的数组）。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">equals</span><span class="params">(<span class="type">int</span>* array1, <span class="type">int</span> arr1Len, <span class="type">int</span>* array2, <span class="type">int</span> arr2Len)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 特殊判断</span></span><br><span class="line">   <span class="keyword">if</span> (array1 == <span class="literal">NULL</span> || array2 == <span class="literal">NULL</span> || arr1Len != arr2Len) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 逐个元素进行比较</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr1Len; i++) &#123;</span><br><span class="line">       <span class="keyword">if</span> (array1[i] != array2[i]) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h3><p>有时候我们对数组进行操作的时候，需要进行数组的拷贝，而此时会有<code>浅拷贝</code>和<code>深拷贝</code>两种数组的拷贝形式。</p><ul><li>浅拷贝：也就是<code>地址拷贝</code>，拷贝到的是数组的<code>首元素地址</code>。</li><li>深拷贝：定义一个<code>新的数组</code>，长度与原来的数组相同，<wavy>将原来数组中的每一个元素依次拷贝到新的数组中</wavy>。</li></ul><p>从上述的说明中，可以看出，所谓的浅拷贝其实就是拷贝了一个地址，得到的数组与原来的数组指向的其实是同一块空间。因此对一个数组进行的操作都会对另外一个数组产生影响。而深拷贝则不然，深拷贝是创建了一个全新的数组，虽然元素与原来的数组元素相同，但是从内存上来看的话，这是一个全新的数组，修改这个数组不会对另外一个数组产生任何影响。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个需要拷贝的数组</span></span><br><span class="line">    <span class="type">int</span> array[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 浅拷贝、地址拷贝</span></span><br><span class="line">    <span class="type">int</span>* array_copy_1 = array;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 深拷贝，创建一个新的等长的数组，并将元素依次拷贝过来</span></span><br><span class="line">    <span class="type">int</span> array_copy_deep[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        array_copy_deep[i] = array[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><h4 id="二维数组的介绍"><a href="#二维数组的介绍" class="headerlink" title="二维数组的介绍"></a>二维数组的介绍</h4><blockquote><p>数组其实就是一个容器，存储着若干的数据。数组中可以存储<code>任意类型</code>的元素，可以存储<code>整数</code>、可以存储浮点<code>数字</code>、可以存储<code>字符串</code>，其实数组中也可以存储一个<code>数组</code></p></blockquote><blockquote><p>如果一个数组中存储的元素类型是一个<code>数组</code>，那么这样的数组就是<code>二维数组</code></p></blockquote><p>理论上讲还有三维数组、四维数组，只不过一般不去讨论。我们在讨论多维数组的时候，基本也就是指的二维数组了。</p><h4 id="二维数组的定义"><a href="#二维数组的定义" class="headerlink" title="二维数组的定义"></a>二维数组的定义</h4><p>通常我们会将二维数组比作一个<code>行列矩阵</code>，二维数组有多少元素，相当于有多少行。二维数组中的小一维数组有多少元素，相当于有多少列</p><blockquote><p>二维数组的定义：</p><ol><li>数据类型 标识符[<code>行数</code>][<code>列数</code>];</li><li>数据类型 标识符[<code>行数</code>][<code>列数</code>] &#x3D; { {val1, val2, val3}, {val1, val2, val3} };</li><li>数据类型 标识符[<code>行数</code>][<code>列数</code>] &#x3D; { val1, val2, val3, val4 };</li><li>数据类型 标识符[][<code>列数</code>] &#x3D; { val1, val2, val3, … };</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义二维数组:</span></span><br><span class="line">    <span class="comment">// 数据类型 标识符[行数][列数];</span></span><br><span class="line">    <span class="type">int</span> array1[<span class="number">3</span>][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据类型 标识符[行数][列数] = &#123; &#123;val1, val2, val3&#125;, &#123;val1, val2, val3&#125; &#125;;</span></span><br><span class="line">    <span class="type">int</span> array2[<span class="number">3</span>][<span class="number">5</span>] = &#123;</span><br><span class="line">            &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;,</span><br><span class="line">            &#123;<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>&#125;,</span><br><span class="line">            &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据类型 标识符[行数][列数] = &#123; val1, val2, val3, val4 &#125;;</span></span><br><span class="line">    <span class="comment">// 此时系统会将这些元素中，每5个元素组合到一起</span></span><br><span class="line">    <span class="comment">// 最后剩余到不到5个的元素，补0凑够5位拼成一个数组</span></span><br><span class="line">    <span class="type">int</span> array3[<span class="number">3</span>][<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">200</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据类型 标识符[][列数] = &#123; val1, val2, val3, ... &#125;</span></span><br><span class="line">    <span class="type">int</span> array4[][<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二维数组的使用"><a href="#二维数组的使用" class="headerlink" title="二维数组的使用"></a>二维数组的使用</h4><p>二维数组中的元素访问与一维数组是相同的，通过下标来进行访问即可！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>] = &#123;</span><br><span class="line">            &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;,</span><br><span class="line">            &#123;<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>&#125;,</span><br><span class="line">            &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    cout &lt;&lt; arr[<span class="number">2</span>][<span class="number">2</span>] &lt;&lt; endl; <span class="comment">// 输出：1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="面向对象介绍"><a href="#面向对象介绍" class="headerlink" title="面向对象介绍"></a>面向对象介绍</h2><h3 id="面向对象与面向过程"><a href="#面向对象与面向过程" class="headerlink" title="面向对象与面向过程"></a>面向对象与面向过程</h3><ul><li><strong>面向过程</strong></li><li>是一种看待问题、解决问题的思维方式，着眼点在于<wavy>问题是如何一步步的解决的 ，然后亲力亲为的解决问题</wavy></li><li><strong>面向对象</strong></li><li>是一种看待问题、解决问题的思维方式，着眼点在于<wavy>找到一个能够帮助解决问题的实体，然后委托这个实体来解决问题</wavy></li></ul><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><h4 id="小明买电脑"><a href="#小明买电脑" class="headerlink" title="小明买电脑"></a>小明买电脑</h4><ul><li><p>面向过程</p><ol><li>(小明)去市场买配件</li><li>(小明)将零件运回家里</li><li>(小明)将电脑组装起来</li></ol></li><li><p>面向对象</p><ol><li>找到一个能够帮助买电脑的朋友 – 老王</li><li>委托老王去买电脑配件</li><li>委托老王把电脑运回来</li><li>委托老王把电脑组装起来</li></ol></li></ul><h4 id="把大象装冰箱"><a href="#把大象装冰箱" class="headerlink" title="把大象装冰箱"></a>把大象装冰箱</h4><ul><li><p>面向过程</p><ol><li>(我)打开冰箱门</li><li>(我)把大象装进冰箱</li><li>(我)关上冰箱门</li></ol></li><li><p>面向对象</p><ol><li>冰箱，开门</li><li>大象，进去冰箱里</li><li>冰箱，关门</li></ol></li></ul><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><p>在面向对象的编程思想中，着眼点在于找到一个能够帮助解决问题的实体，然后委托这个实体解决问题。</p><p>在这里，这个具有特定的功能，<wavy>能够解决特定问题的实体</wavy>，就是一个<code>对象</code>。</p><p>由若干个具有相同的特征和行为的对象的组成的<code>集合</code>，就是一个<code>类</code>。</p><p><code>类是对象的集合，对象是类的个体</code></p><h2 id="类的设计与对象的创建"><a href="#类的设计与对象的创建" class="headerlink" title="类的设计与对象的创建"></a>类的设计与对象的创建</h2><h3 id="类的设计"><a href="#类的设计" class="headerlink" title="类的设计"></a>类的设计</h3><p>从若干个具有相同的<code>特征</code>和<code>行为</code>的对象中，提取出这些相同的特征和行为，设计为一个<code>类</code></p><p>类中定义所有的对象共有的<code>特征</code>和<code>行为</code>，其中，特征用<code>属性</code>表示，行为用<code>方法</code>表示</p><p>所谓<code>属性</code>，其实就是定义在类中的一个<code>变量</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类的定义</span></span><br><span class="line"><span class="keyword">class</span> 类名&#123;</span><br><span class="line">权限修饰符:</span><br><span class="line">   成员变量;</span><br><span class="line">   成员变量;</span><br><span class="line">   成员变量;</span><br><span class="line">   ......</span><br><span class="line">   </span><br><span class="line">权限修饰符:</span><br><span class="line">   成员函数<span class="number">1</span></span><br><span class="line">   成员函数<span class="number">2</span></span><br><span class="line">   成员函数<span class="number">3</span></span><br><span class="line">   ......</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设计一个类，描述人</span></span><br><span class="line"><span class="comment">// 属性: 姓名、性别、年龄</span></span><br><span class="line"><span class="comment">// 方法: 走路、吃饭</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string name;</span><br><span class="line">    string gender;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">walk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;人类会走路&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;人类会吃饭&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项:</p><ul><li>在类中定义的属性、方法，默认都是<code>private</code>的权限，在类外是不能访问的。如果需要在类外访问，需要修改为<code>public</code>权限。</li><li><code>public</code>: 在<code>任意位置</code>都可以访问</li><li><code>protected</code>: 在<code>当前类</code>和<code>子类</code>中可以访问</li><li><code>private</code>: 只能在<code>当前类</code>中访问</li></ul></blockquote><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1. 直接创建对象，隐式调用</span></span><br><span class="line">    Person Tom;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 显式调用</span></span><br><span class="line">    Person Tom = <span class="built_in">Person</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 关键字new   </span></span><br><span class="line">    Person* Tom = <span class="keyword">new</span> <span class="built_in">Person</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述的三种创建方式中，前两种方式是类似的。我们在创建对象的时候，区别主要是有没有使用关键字new。</p><table><thead><tr><th align="center"></th><th align="center">使用new</th><th align="center">没有使用new</th></tr></thead><tbody><tr><td align="center">内存方面</td><td align="center">在堆空间开辟</td><td align="center">在栈空间开辟</td></tr><tr><td align="center">内存管理</td><td align="center">需要手动使用delete销毁</td><td align="center">不需要手动销毁</td></tr><tr><td align="center">属性初始化</td><td align="center">自动有默认的初始值</td><td align="center">没有初始值</td></tr><tr><td align="center">语法</td><td align="center">需要用类*来接收变量</td><td align="center">不需要使用*</td></tr><tr><td align="center">成员访问</td><td align="center">通过.访问</td><td align="center">通过-&gt;访问</td></tr></tbody></table><h3 id="成员访问"><a href="#成员访问" class="headerlink" title="成员访问"></a>成员访问</h3><p>成员访问，即访问类中的成员（<code>属性</code>、<code>方法</code>）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建Person对象</span></span><br><span class="line">    Person xiaobai;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 访问类中的属性</span></span><br><span class="line">    xiaobai.name = <span class="string">&quot;xiao bai&quot;</span>;</span><br><span class="line">    xiaobai.age = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 访问类中的方法</span></span><br><span class="line">    xiaobai.<span class="built_in">walk</span>();</span><br><span class="line">    xiaobai.<span class="built_in">eat</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用new创建对象</span></span><br><span class="line">    Person* xiaobai = <span class="keyword">new</span> <span class="built_in">Person</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 访问类中的属性</span></span><br><span class="line">    xiaobai -&gt; name = <span class="string">&quot;xiao bai&quot;</span>;</span><br><span class="line">    xiaobai -&gt; age = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 访问类中的方法</span></span><br><span class="line">    xiaobai -&gt; <span class="built_in">walk</span>();</span><br><span class="line">    xiaobai -&gt; <span class="built_in">eat</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义的数据类型-类"><a href="#自定义的数据类型-类" class="headerlink" title="自定义的数据类型(类)"></a>自定义的数据类型(类)</h3><p>我们在定义类中的属性的时候，可以定义<code>int</code>类型、<code>float</code>类型、<code>字符串</code>类型等等，那么能不能定义为另外的一个类的类型呢？</p><p>可以的！类其实就是一种自定义的复杂的数据类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string name;</span><br><span class="line">    string color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;汪汪汪&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string name;</span><br><span class="line">    string gender;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">walk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;人类会走路&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;人类会吃饭&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="类外和其他文件中实现类函数"><a href="#类外和其他文件中实现类函数" class="headerlink" title="类外和其他文件中实现类函数"></a>类外和其他文件中实现类函数</h3><h4 id="类外实现"><a href="#类外实现" class="headerlink" title="类外实现"></a>类外实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">walk</span><span class="params">()</span></span>;<span class="comment">// 在这里只是定义</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Person::walk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;person walk&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他文件中实现"><a href="#其他文件中实现" class="headerlink" title="其他文件中实现"></a>其他文件中实现</h4><blockquote><p>  如果我们设计的类需要在其他的文件中访问，需要设计<code>头文件</code>！</p></blockquote><p><strong>person.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> BASIC_LEARNING_PERSON_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BASIC_LEARNING_PERSON_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">walk</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>person.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Person.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Person::walk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;person walk&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h3><p>我们在类中定义成员的时候（函数、属性），可以使用关键字<code>static</code>来修饰，而这里的关键字<code>static</code>表示的就是<code>静态</code></p><p>在一个类中，被<code>static</code>修饰的成员，称为<code>静态成员</code>，可以分为: <code>静态属性</code>、<code>静态函数</code></p><h4 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h4><blockquote><p>静态的属性内存是开辟在<code>全局区</code>的，与对象无关，<wavy>并不隶属于对象</wavy>。在程序编译的时候，就已经完成了空间的开辟与初始化的赋值操作了，并且在程序运行的整个过程中是始终保持的。</p></blockquote><blockquote><wavy>静态属性的空间开辟早于对象的创建</wavy>，并且静态属性不隶属于对象，<wavy>而是被所有的对象所共享的</wavy>。因此，如果你希望某一个属性是可以被所有的对象所共享的，就可以设置为静态的属性。</blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> part1 &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 静态的成员变量，必须在类内定义、类外初始化赋值</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> countOfObjs;</span><br><span class="line"><span class="comment">// 静态的常量，可以在类内定义，并同时进行初始化；也可以在类内定义、类外进行初始化</span></span><br><span class="line"><span class="type">const</span> <span class="type">static</span> <span class="type">int</span> MIN_AGE;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Person::countOfObjs = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Person::MIN_AGE = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> part1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问静态成员变量（属性）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以直接使用类来访问</span></span><br><span class="line">Person::countOfObjs = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以通过对象来访问，但是即便使用不同的对象，访问到的空间仍然是相同的空间</span></span><br><span class="line">Person xiaobai;</span><br><span class="line">Person xiaohei;</span><br><span class="line">xiaohei.countOfObjs = <span class="number">100</span>;</span><br><span class="line">cout &lt;&lt; xiaobai.countOfObjs &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态函数"><a href="#静态函数" class="headerlink" title="静态函数"></a>静态函数</h4><blockquote><p>被关键字<code>static</code>修饰的函数就是静态函数，与静态属性类似，静态函数依然不隶属于某一个对象，而是隶属于<code>当前类</code>的。静态的函数可以使用对象来调用，也可以直接使用类来调用。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> part1 &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;person test&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> part1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 使用类来访问</span></span><br><span class="line">Person::<span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造与析构"><a href="#构造与析构" class="headerlink" title="构造与析构"></a>构造与析构</h2><h3 id="构造函数的介绍"><a href="#构造函数的介绍" class="headerlink" title="构造函数的介绍"></a>构造函数的介绍</h3><p>构造函数，是一个比较特殊的函数。我们在使用一个类的对象的时候，需要为其分配空间。空间分配完成之后，我们一般都会对创建的<code>对象的属性</code>进行<code>初始化</code>的操作。而这个过程就可以在构造函数中来完成了。</p><p>因此: 构造函数是一个函数，是在对象创建的时候触发，用来对对象的属性进行初始化的赋值操作。</p><h3 id="构造函数的定义"><a href="#构造函数的定义" class="headerlink" title="构造函数的定义"></a>构造函数的定义</h3><ul><li>构造函数的名字，必须和<code>类的名字</code>相同！</li><li>构造函数不能写<code>返回值</code>类型！</li><li>构造函数可以有不同的<code>重载</code>！</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 这就是一个无参的构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;无参构造函数执行了!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这就是一个有参的构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;有参构造函数执行了！参数age = &quot;</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数的使用"><a href="#构造函数的使用" class="headerlink" title="构造函数的使用"></a>构造函数的使用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数的定义：</span></span><br><span class="line"><span class="comment">// 1、构造函数没有返回值类型，不能写，连void都不能写</span></span><br><span class="line"><span class="comment">// 2、构造函数的名字必须与类名相同</span></span><br><span class="line"><span class="comment">// 3、构造函数可以通过不同的参数，来实现重载(Overload)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person类的无参构造函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person类的有参构造函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age, <span class="type">int</span> score) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person(int, int)构造函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 构造函数的使用：是在创建对象的时候调用的。</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 显式调用</span></span><br><span class="line">   <span class="comment">// Person xiaoming = Person();</span></span><br><span class="line">   <span class="comment">// Person xiaoming = Person(10);</span></span><br><span class="line">   <span class="comment">// Person xiaoming = Person(10, 20);</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// Person xiaoming;// 注意事项：如果用这种缩写的方式，切记，如果使用无参构造函数的方式来创建对象，不能添加()</span></span><br><span class="line">   <span class="comment">// Person xiaoming(10);</span></span><br><span class="line">   <span class="comment">// Person xiaoming(10, 20);</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 隐式调用</span></span><br><span class="line">   <span class="comment">// Person xiaoming = &#123;&#125;;  // 这里的大括号可以省略不写</span></span><br><span class="line">   <span class="comment">// Person xiaoming = &#123;10&#125;;</span></span><br><span class="line">   <span class="comment">// Person xiaoming = &#123;10, 20&#125;;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// Person* xiaoming = new Person();</span></span><br><span class="line">   <span class="comment">// Person* xiaoming = new Person(10);</span></span><br><span class="line">   <span class="comment">// Person* xiaoming = new Person(10, 20);</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="explicit关键字"><a href="#explicit关键字" class="headerlink" title="explicit关键字"></a>explicit关键字</h3><p>C++提供了关键字<code>explicit</code>，禁止通过构造函数进行的<code>隐式转换</code>。声明为<code>explicit</code>的构造函数不能在隐式转换中使用。</p><blockquote><p>用来修饰构造函数的<code>修饰符</code>，表示无法通过隐式调用来访问这个构造函数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Person</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里创建对象会出错，因为一个参数的构造函数已经被修饰为了explicit，不允许隐式转换。</span></span><br><span class="line">    Person xiaoming = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数注意事项"><a href="#构造函数注意事项" class="headerlink" title="构造函数注意事项"></a>构造函数注意事项</h3><ul><li>如果在一个类中，没有手动写任意的构造函数，此时系统会自动为其提供一个<code>public</code>权限的<code>无参构造函数</code></li><li>如果在一个类中，写了任意的一个构造函数，此时系统将不再提供默认的无参构造函数。如果需要的话，需要自己书写</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Person p;<span class="comment">// 这样的对象创建会出错，因为现在Person类中，没有无参的构造函数。</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数初始化列表"><a href="#构造函数初始化列表" class="headerlink" title="构造函数初始化列表"></a>构造函数初始化列表</h3><p>我们自己书写构造函数，很大的一个用途就是对属性进行<code>初始化</code>的<code>赋值操作</code>，就像如下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    string gender;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Person</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的无参构造函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">// 希望给属性进行初始化的赋值操作</span></span><br><span class="line">        name = <span class="string">&quot;xiaobai&quot;</span>;</span><br><span class="line">        age = <span class="number">18</span>;</span><br><span class="line">        gender = <span class="string">&quot;male&quot;</span>;</span><br><span class="line">        score = <span class="number">99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Person</span>(string n, <span class="type">int</span> a, string g, <span class="type">int</span> s) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的有参构造函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">// 希望给属性使用指定的值进行初始化</span></span><br><span class="line">        name = n;</span><br><span class="line">        age = a;</span><br><span class="line">        gender = g;</span><br><span class="line">        score = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述的代码中，无论是无参的构造函数还是有参的构造函数，我们的目的都是在创建对象的时候，为属性进行初始化的赋值操作。但是重复的这样的赋值有点麻烦，此时，C++为我们提供了初始化列表的方式，来对属性进行初始化的赋值操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    string gender;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Person</span>() : <span class="built_in">name</span>(<span class="string">&quot;xiaobai&quot;</span>), <span class="built_in">age</span>(<span class="number">18</span>), <span class="built_in">gender</span>(<span class="string">&quot;male&quot;</span>), <span class="built_in">score</span>(<span class="number">99</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的无参构造函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Person</span>(string n, <span class="type">int</span> a, string g, <span class="type">int</span> s) : <span class="built_in">name</span>(n), <span class="built_in">age</span>(a), <span class="built_in">gender</span>(g), <span class="built_in">score</span>(s)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的有参构造函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h3><p>拷贝构造函数是C++中的另外一种构造函数，这个构造函数也是可以由系统自动提供的。<br>如果我们没有给一个类写拷贝构造函数，系统会自动的生成一个默认的<code>拷贝构造函数</code>，为每一个属性进行赋值。<br>如果需要在拷贝构造函数中实现自己的拷贝逻辑，需要自己书写拷贝构造函数。</p><p><strong>系统默认的拷贝构造函数：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Person</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的无参构造函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Person</span>(string n, <span class="type">int</span> a) &#123;</span><br><span class="line">        name = n;</span><br><span class="line">        age = a;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的有参构造函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在上述的Person类中，我们并没有去写拷贝构造函数，此时系统会自动的提供一个拷贝构造函数，实现对属性的赋值操作。</span></span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;xiaoming&quot;</span>, <span class="number">19</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 这里就是默认执行的拷贝构造函数，相当于 Person p2 = Person(p1);</span></span><br><span class="line">    <span class="comment">// 得到的对象p2的属性值与p1对象的属性值完全相同</span></span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1.name = &quot;</span> &lt;&lt; p1.name &lt;&lt; <span class="string">&quot;, p1.age = &quot;</span> &lt;&lt; p1.age &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2.name = &quot;</span> &lt;&lt; p2.name &lt;&lt; <span class="string">&quot;, p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自己实现拷贝构造函数：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Person</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的无参构造函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Person</span>(string n, <span class="type">int</span> a) &#123;</span><br><span class="line">        name = n;</span><br><span class="line">        age = a;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的有参构造函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的拷贝构造函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">        name = p.name;</span><br><span class="line">        age = p.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;xiaoming&quot;</span>, <span class="number">19</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 这里就是执行的拷贝构造函数，相当于 Person p2 = Person(p1);</span></span><br><span class="line">    <span class="comment">// 得到的对象p2的属性值与p1对象的属性值完全相同</span></span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1.name = &quot;</span> &lt;&lt; p1.name &lt;&lt; <span class="string">&quot;, p1.age = &quot;</span> &lt;&lt; p1.age &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2.name = &quot;</span> &lt;&lt; p2.name &lt;&lt; <span class="string">&quot;, p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><blockquote><p>我们将一个对象从空间开辟开始，到空间销毁结束，这样的过程称为是一个对象的一生，用<code>生命周期</code>来描述这样的过程。对象的生命周期的起点是<code>构造函数</code>，而对象的生命周期的终点就是<code>析构函数</code>。</p></blockquote><ul><li>析构函数，将会在对象被销毁之前自动调用。</li><li>析构函数也是可以由系统自动生成的。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span>* score;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Person</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的无参构造函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这就是Person的析构函数，析构函数只能这样书写，且不能有参数</span></span><br><span class="line">    <span class="comment">// 通常在析构函数中，我们会进行一些资源的释放，例如开辟的堆中的内存</span></span><br><span class="line">    ~<span class="built_in">Person</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的析构函数执行了，表示这个对象即将被销毁了&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (score != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> score;<span class="comment">// 释放对应的堆空间</span></span><br><span class="line">            score = <span class="literal">NULL</span>;<span class="comment">// 释放本来存储的地址，防止野指针</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深拷贝与浅拷贝的问题"><a href="#深拷贝与浅拷贝的问题" class="headerlink" title="深拷贝与浅拷贝的问题"></a>深拷贝与浅拷贝的问题</h3><p>深拷贝与浅拷贝是一个老生常谈的问题，在数组的部分提到过，在面向对象部分也有这两个概念。在这里我们首先需要先区分一下什么是深拷贝，什么是浅拷贝。</p><p><strong>浅拷贝：</strong>在拷贝构造函数中，直接完成属性的赋值操作。</p><p><strong>深拷贝：</strong>在拷贝构造函数中，创建一个新的空间，使得属性中的指针指向这个新的空间。</p><h4 id="浅拷贝案例"><a href="#浅拷贝案例" class="headerlink" title="浅拷贝案例"></a>浅拷贝案例</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span>* score;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> a, <span class="type">int</span> s) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的有参构造函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">        age = a;</span><br><span class="line">        score = <span class="keyword">new</span> <span class="built_in">int</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 拷贝构造函数的默认实现，是直接进行属性值的拷贝</span></span><br><span class="line">        age = p.age;</span><br><span class="line">        score = p.score;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">Person</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;析构函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">// 将score指向的堆空间销毁</span></span><br><span class="line">        <span class="keyword">if</span> (score != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> score;</span><br><span class="line">            score = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个对象</span></span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>, <span class="number">99</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 通过拷贝构造函数，拷贝出一个新的对象</span></span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在刚才的拷贝构造函数中，属性值直接进行值的拷贝，这个过程就是一个浅拷贝</span></span><br><span class="line">    <span class="comment">// 对比两个对象的score地址，完全相同</span></span><br><span class="line">    cout &lt;&lt; p1.score &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; p2.score &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 现在直接运行这个程序就会出问题了</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 问题出现原因：</span></span><br><span class="line">    <span class="comment">// 由于现在是浅拷贝，p2的属性score和p1的属性score存储的地址是完全相同的。</span></span><br><span class="line">    <span class="comment">// main函数执行结束，p1、p2都是局部变量，需要销毁。</span></span><br><span class="line">    <span class="comment">// 先销毁p2，执行p2的析构函数，此时p2.score指向的空间被销毁了。</span></span><br><span class="line">    <span class="comment">// 再销毁p1，执行p1的析构函数，此时p1.score指向了一个已经被销毁了空间，p1.score已经是一个野指针了。会出现问题！</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="深拷贝案例"><a href="#深拷贝案例" class="headerlink" title="深拷贝案例"></a>深拷贝案例</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span>* score;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> a, <span class="type">int</span> s) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的有参构造函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">        age = a;</span><br><span class="line">        score = <span class="keyword">new</span> <span class="built_in">int</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 拷贝构造函数的默认实现，是直接进行属性值的拷贝</span></span><br><span class="line">        age = p.age;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 这里不再是简简单单的值拷贝，而是在堆上创建了一个新的空间，新空间中存储原来p的score对应的值</span></span><br><span class="line">        <span class="comment">// 然后将这个新的空间地址给score进行赋值</span></span><br><span class="line">        score = <span class="keyword">new</span> <span class="built_in">int</span>(*p.score);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">Person</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;析构函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">// 将score指向的堆空间销毁</span></span><br><span class="line">        <span class="keyword">if</span> (score != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> score;</span><br><span class="line">            score = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个对象</span></span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>, <span class="number">99</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 通过拷贝构造函数，拷贝出一个新的对象</span></span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在刚才的拷贝构造函数中，score属性是开辟了一个新的空间的</span></span><br><span class="line">    <span class="comment">// 对比两个对象的score地址，不相同的</span></span><br><span class="line">    cout &lt;&lt; p1.score &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; p2.score &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对比两个对象的score指向的值，是相同的</span></span><br><span class="line">    cout &lt;&lt; *p1.score &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; *p2.score &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 此时程序执行结束前，p2.score指向的空间被销毁，与p1.score指向的空间没有关系</span></span><br><span class="line">    <span class="comment">// 因此，p1.score在进行空间销毁的时候也就不会有任何问题</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h2><h3 id="this是什么"><a href="#this是什么" class="headerlink" title="this是什么"></a>this是什么</h3><p>在C++中，this是一个<code>指针</code>，用来指向<code>当前的对象</code>的！</p><blockquote><p>在类中的成员函数的<code>参数列表</code>中默认有一个<code>this</code>参数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> a): <span class="built_in">age</span>(a) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，类Person中有一个函数getAge，可以返回属性age的值。那么问题来了，一个类可以有多个对象的。而非静态的属性age是隶属于对象的。不同的对象的age，在内存中的空间肯定也是不同的。如何区分需要返回哪一个对象的age呢？</p><p>在一个类中，涉及到成员的访问的时候，非静态的成员访问，通常都会使用<code>this</code>指针来访问。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> a): <span class="built_in">age</span>(a) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里使用this指针来访问age属性，这种写法是默认的，并且this是可以省略不写的</span></span><br><span class="line">    <span class="comment">// 那么所谓的当前对象到底是谁呢？</span></span><br><span class="line">    <span class="comment">// 最简单的理解就是: 哪个对象调用这个函数，this指针就指向谁</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this不可省略的情况"><a href="#this不可省略的情况" class="headerlink" title="this不可省略的情况"></a>this不可省略的情况</h3><p>绝大多数的情况下，在一个类的内部，<wavy>访问当前类中的非静态成员的时候</wavy>，<code>this</code>指针都是可以省略不写的。但是有一种情况，this指针不能省略，必须要显式的写出来:</p><p>如果在一个函数中出现了与当前类的属性<code>同名字</code>的<code>局部变量</code>！为了区分局部变量还是属性，此时的<code>this</code>指针不能省略。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在这个构造函数中，出现了一个局部变量age，与属性名字相同了</span></span><br><span class="line">    <span class="comment">// 于是为了区分这两个，需要使用this指针显式的指向age属性来进行访问</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回当前对象的函数"><a href="#返回当前对象的函数" class="headerlink" title="返回当前对象的函数"></a>返回当前对象的函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">    <span class="built_in">Point</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">int</span> x, <span class="type">int</span> y): <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回当前对象的引用</span></span><br><span class="line">    <span class="function">Point&amp; <span class="title">add</span><span class="params">(<span class="type">int</span> deltaX, <span class="type">int</span> deltaY)</span> </span>&#123;</span><br><span class="line">        x += deltaX;</span><br><span class="line">        y += deltaY;</span><br><span class="line">        <span class="comment">// this是一个指针，用来指向当前的对象</span></span><br><span class="line">        <span class="comment">// 因此，如果需要返回当前的对象的话，就需要使用*来访问</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空指针访问成员函数"><a href="#空指针访问成员函数" class="headerlink" title="空指针访问成员函数"></a>空指针访问成员函数</h3><p>在C++中，使用空指针是可以访问成员函数的，但是需要注意：不能在函数中出现<code>this</code>指针！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Person</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age): <span class="built_in">age</span>(age) &#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testFunction01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;testFunction01执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">testFunction02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;this是一个空指针&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;testFunction02执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个空对象</span></span><br><span class="line">    Person* person = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 函数访问</span></span><br><span class="line">    person-&gt;<span class="built_in">testFunction01</span>();<span class="comment">// 可以正常访问，因为在这个函数中没有使用到this指针</span></span><br><span class="line">    person-&gt;<span class="built_in">testFunction02</span>();<span class="comment">// 访问出问题，因为在这个函数中使用到了this指针</span></span><br><span class="line">    person-&gt;<span class="built_in">getAge</span>();<span class="comment">// 访问出问题，在这个函数中虽然没有写this，但是有属性的访问，默认就是用到的this</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常函数与常对象"><a href="#常函数与常对象" class="headerlink" title="常函数与常对象"></a>常函数与常对象</h3><h4 id="什么是常函数"><a href="#什么是常函数" class="headerlink" title="什么是常函数"></a>什么是常函数</h4><ul><li>使用关键字<code>const</code>修饰的函数，叫做常函数。</li><li>常函数中，不允许<code>修改</code>属性的值。</li><li>常函数中，不允许<code>调用</code>其他的普通函数。</li><li>如果想要在常函数中修改某个属性的值，需要将这个属性设置为<code>mutable</code>。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">int</span> score;<span class="comment">// 修饰为可变的，这个属性可以在常函数中进行修改</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Person</span>(string name, <span class="type">int</span> age, <span class="type">int</span> score): <span class="built_in">name</span>(name), <span class="built_in">age</span>(age), <span class="built_in">score</span>(score) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义常函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fixPerson</span><span class="params">(string newName, <span class="type">int</span> newAge, <span class="type">int</span> newScore)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        name = newName;<span class="comment">// 这里会出错，不允许在常函数中修改普通属性的值</span></span><br><span class="line">age = newAge;<span class="comment">// 这里会出错，不允许在常函数中修改普通属性的值</span></span><br><span class="line">        score = newScore;<span class="comment">// 这里可以正常修改，因此此时的score已经被修饰为mutable</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">test</span>();<span class="comment">// 这里会出错，不允许在常函数中调用其他的普通函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常对象"><a href="#常对象" class="headerlink" title="常对象"></a>常对象</h4><ul><li>在对象创建的时候，使用<code>const</code>修饰的对象，就是常对象</li><li>常对象可以访问任意的属性值，但是不能修改<code>普通属性</code>的值</li><li>常对象可以修改<code>mutable</code>属性的值</li><li>常对象只能调用<code>常函数</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 创建一个常对象</span></span><br><span class="line">   <span class="function"><span class="type">const</span> Person <span class="title">person</span><span class="params">(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="number">99</span>)</span></span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 使用这个常对象进行属性访问</span></span><br><span class="line">   cout &lt;&lt; person.name &lt;&lt; endl;<span class="comment">// 可以正常访问</span></span><br><span class="line">   person.age = <span class="number">100</span>;<span class="comment">// 不能进行修改</span></span><br><span class="line">   person.score = <span class="number">200</span>;<span class="comment">// mutable属性，可以修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><h3 id="友元是什么"><a href="#友元是什么" class="headerlink" title="友元是什么"></a>友元是什么</h3><p>类的主要特点之一是<code>数据隐藏</code>，即类的私有成员无法在类的外部(作用域之外)访问。但是，有时候需要在类的外部访问类的<code>私有成员</code>，怎么办？</p><p>解决方法是使用<code>友元函数</code>，友元函数是一种特权函数，C++允许这个特权函数访问私有成员</p><p>程序员可以把一个全局函数、某个类中的成员函数、甚至整个类声明为友元。</p><h3 id="全局函数做友元"><a href="#全局函数做友元" class="headerlink" title="全局函数做友元"></a>全局函数做友元</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> &#123;</span><br><span class="line">    <span class="comment">// 将全局函数作为友元</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">gotoBed</span><span class="params">(Home* home)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string livingRoom = <span class="string">&quot;这里是客厅&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string bedRoom = <span class="string">&quot;这里是卧室&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gotoBed</span><span class="params">(Home* home)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 可以访问公共部分</span></span><br><span class="line">    cout &lt;&lt; home-&gt;livingRoom &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 可以访问私有部分</span></span><br><span class="line">    cout &lt;&lt; home-&gt;bedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建对象</span></span><br><span class="line">    Home home;</span><br><span class="line">    <span class="built_in">gotoBed</span>(&amp;home);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员函数做友元"><a href="#成员函数做友元" class="headerlink" title="成员函数做友元"></a>成员函数做友元</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义有这样一个类，但是类中的成员是看不到的</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好基友</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodGay</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">GoodGay</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Home* home;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我的家</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> &#123;</span><br><span class="line">    <span class="comment">// 将基友的visit函数作为友元</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">GoodGay::visit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string livingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string bedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">GoodGay::<span class="built_in">GoodGay</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;home = <span class="keyword">new</span> <span class="built_in">Home</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GoodGay::visit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; home-&gt;livingRoom &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; home-&gt;bedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    GoodGay gay;</span><br><span class="line">    gay.<span class="built_in">visit</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类做友元"><a href="#类做友元" class="headerlink" title="类做友元"></a>类做友元</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 友元类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodGay</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">GoodGay</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Home* home;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> &#123;</span><br><span class="line">    <span class="comment">// 友元类</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">GoodGay</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string livingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string bedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">GoodGay::<span class="built_in">GoodGay</span>() &#123;</span><br><span class="line">    home = <span class="keyword">new</span> <span class="built_in">Home</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GoodGay::visit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; home-&gt;livingRoom &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; home-&gt;bedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    GoodGay gay;</span><br><span class="line">    gay.<span class="built_in">visit</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><h3 id="什么是运算符重载"><a href="#什么是运算符重载" class="headerlink" title="什么是运算符重载"></a>什么是运算符重载</h3><blockquote><p>运算符重载，就是对已有的运算符<wavy>重新进行定义</wavy>，赋予其另一种功能，以适应不同的数据类型。</p></blockquote><p>运算符重载(operator overloading)只是一种<wavy>语法上的方便</wavy>，也就是它只是另一种函数<code>调用</code>的方式。<br>在c++中，可以定义一个<code>处理类</code>的<code>新运算符</code>。这种定义很像一个普通的<code>函数定义</code>，只是函数的名字由关键字<code>operator</code>及其紧跟的<code>运算符</code>组成。差别仅此而已。它像任何其他函数一样也是一个函数，当编译器遇到适当的模式时，就会调用这个函数。</p><p><strong>语法：</strong><br>定义重载的运算符就像定义函数，只是该函数的名字是<code>operator@</code>,这里的<code>@</code>代表了被<code>重载的运算符</code>。函数的参数中参数个数取决于两个因素。</p><ul><li>运算符是一元(一个参数)的还是二元(两个参数)；</li><li>运算符被定义为<code>全局函数</code>(对于一元是一个参数，对于二元是两个参数)还是<code>成员函数</code>(对于一元没有参数，对于二元是一个参数-此时该类的对象用作左耳参数)</li></ul><p><strong>注意：</strong><br>有些人很容易滥用运算符重载。它确实是一个有趣的工具。但是应该注意，它仅仅是一种语法上的方便而已，是另外一种函数调用的方式。从这个角度来看，只有在能使涉及类的代码更易写，尤其是更易读时(请记住，读代码的机会比我们写代码多多了)才有理由重载运算符。如果不是这样，就改用其他更易用，更易读的方式。</p><h3 id="可重载的运算符"><a href="#可重载的运算符" class="headerlink" title="可重载的运算符"></a>可重载的运算符</h3><p>几乎所有的运算符都可以重载，但运算符重载的使用时相当受限制的。特别是不能改变运算符<code>优先级</code>，不能改变运算符的<code>参数个数</code>。这样的限制有意义，否则，所有这些行为产生的运算符只会混淆而不是澄清语意。</p><p><strong>可重载的运算符</strong></p><table><thead><tr><th align="center">+</th><th align="center">-</th><th align="center">*</th><th align="center">&#x2F;</th><th align="center">%</th><th align="center">^</th><th align="center">&amp;</th><th align="center">|</th><th align="center">~</th></tr></thead><tbody><tr><td align="center">!</td><td align="center">&#x3D;</td><td align="center">&lt;</td><td align="center">&gt;</td><td align="center">+&#x3D;</td><td align="center">-&#x3D;</td><td align="center">*&#x3D;</td><td align="center">&#x2F;&#x3D;</td><td align="center">%&#x3D;</td></tr><tr><td align="center">^&#x3D;</td><td align="center">&amp;&#x3D;</td><td align="center">|&#x3D;</td><td align="center">&lt;&lt;</td><td align="center">&gt;&gt;</td><td align="center">&gt;&gt;&#x3D;</td><td align="center">&lt;&lt;&#x3D;</td><td align="center">&#x3D;&#x3D;</td><td align="center">!&#x3D;</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">&gt;&#x3D;</td><td align="center">&amp;&amp;</td><td align="center">||</td><td align="center">++</td><td align="center">–</td><td align="center">-&gt;*</td><td align="center">‘</td><td align="center">-&gt;</td></tr><tr><td align="center">[]</td><td align="center">()</td><td align="center">new</td><td align="center">delete</td><td align="center">new[]</td><td align="center">delete[]</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p><strong>不可重载的运算符</strong></p><table><thead><tr><th align="center">.</th><th align="center">::</th><th align="center">.*</th><th align="center">?:</th><th align="center">sizeof</th><th></th><th></th><th></th><th align="center"></th></tr></thead></table><h3 id="运算符重载-1"><a href="#运算符重载-1" class="headerlink" title="运算符重载: +"></a>运算符重载: +</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 定义属性</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义构造函数，用来初始化属性</span></span><br><span class="line">    <span class="built_in">Point</span>(): <span class="built_in">x</span>(<span class="number">0</span>), <span class="built_in">y</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">int</span> x, <span class="type">int</span> y): <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在类内实现的运算符重载，类中的成员函数的参数列表中默认有一个this参数</span></span><br><span class="line">    Point <span class="keyword">operator</span>+(<span class="type">const</span> Point&amp; p) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;x + p.x, y + p.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局函数实现运算符重载</span></span><br><span class="line">Point <span class="keyword">operator</span>-(<span class="type">const</span> Point&amp; p1, <span class="type">const</span> Point&amp; p2) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;p1.x - p2.x, p1.y - p2.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Point <span class="title">p2</span><span class="params">(<span class="number">15</span>, <span class="number">25</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    Point res = p1 + p2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;res.x = &quot;</span> &lt;&lt; res.x &lt;&lt; <span class="string">&quot;, res.y = &quot;</span> &lt;&lt; res.y &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Point res2 = p1 - p2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;res2.x = &quot;</span> &lt;&lt; res2.x &lt;&lt; <span class="string">&quot;, res2.y = &quot;</span> &lt;&lt; res2.y &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运算符重载-2"><a href="#运算符重载-2" class="headerlink" title="运算符重载: ++"></a>运算符重载: ++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 定义属性</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义构造函数，用来初始化属性</span></span><br><span class="line">    <span class="built_in">Point</span>(): <span class="built_in">x</span>(<span class="number">0</span>), <span class="built_in">y</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">int</span> x, <span class="type">int</span> y): <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运算符前置，先运算、后取值</span></span><br><span class="line">    Point <span class="keyword">operator</span>++() &#123;</span><br><span class="line">        x++;</span><br><span class="line">        y++;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在类内实现的运算符重载，运算符后置</span></span><br><span class="line">    Point <span class="keyword">operator</span>++(<span class="type">int</span>) &#123;</span><br><span class="line">        <span class="comment">// 先创建一个对象，记录原来的值</span></span><br><span class="line">        Point tmp = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">// 属性自增</span></span><br><span class="line">        x++;</span><br><span class="line">        y++;</span><br><span class="line">        <span class="comment">// 返回之前记录的值</span></span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Point <span class="keyword">operator</span>--(Point&amp; point) &#123;</span><br><span class="line">    point.x--;</span><br><span class="line">    point.y--;</span><br><span class="line">    <span class="keyword">return</span> point;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point <span class="keyword">operator</span>--(Point&amp; point, <span class="type">int</span>) &#123;</span><br><span class="line">    Point tmp = point;</span><br><span class="line">    point.x--;</span><br><span class="line">    point.y--;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Point <span class="title">p2</span><span class="params">(<span class="number">15</span>, <span class="number">25</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    Point res1 = ++p1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;res1.x = &quot;</span> &lt;&lt; res1.x &lt;&lt; <span class="string">&quot;, res1.y = &quot;</span> &lt;&lt; res1.y &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1.x = &quot;</span> &lt;&lt; p1.x &lt;&lt; <span class="string">&quot;, p1.y = &quot;</span> &lt;&lt; p1.y &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Point res2 = p2++;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;res2.x = &quot;</span> &lt;&lt; res2.x &lt;&lt; <span class="string">&quot;, res2.y = &quot;</span> &lt;&lt; res2.y &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2.x = &quot;</span> &lt;&lt; p2.x &lt;&lt; <span class="string">&quot;, p2.y = &quot;</span> &lt;&lt; p2.y &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运算符重载-3"><a href="#运算符重载-3" class="headerlink" title="运算符重载: &lt;&lt;"></a>运算符重载: &lt;&lt;</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> Point&amp; p);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 定义属性</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义构造函数，用来初始化属性</span></span><br><span class="line">    <span class="built_in">Point</span>(): <span class="built_in">x</span>(<span class="number">0</span>), <span class="built_in">y</span>(<span class="number">0</span>), <span class="built_in">privateField</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">int</span> x, <span class="type">int</span> y): <span class="built_in">x</span>(x), <span class="built_in">y</span>(y), <span class="built_in">privateField</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> privateField;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在类外定义运算符重载，全局函数</span></span><br><span class="line"><span class="comment">// 我希望在这里能够将Point类中的私有属性也拼接起来，因此需要做成友元</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> Point&amp; p) &#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; p.x &lt;&lt; <span class="string">&quot;, y = &quot;</span> &lt;&lt; p.y &lt;&lt; <span class="string">&quot;, privateField = &quot;</span> &lt;&lt; p.privateField;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1: &quot;</span> &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运算符重载-4"><a href="#运算符重载-4" class="headerlink" title="运算符重载: &#x3D;"></a>运算符重载: &#x3D;</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">    <span class="type">int</span>* p;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Person</span>(): <span class="built_in">age</span>(<span class="number">0</span>), <span class="built_in">score</span>(<span class="number">0</span>), <span class="built_in">p</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> Person&amp; person) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;拷贝构造函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">        age = person.age;</span><br><span class="line">        score = person.score;</span><br><span class="line">        p = <span class="keyword">new</span> <span class="built_in">int</span>(*person.p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载赋值运算符</span></span><br><span class="line">    Person&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Person&amp; person) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;重载赋值运算符执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">        age = person.age;</span><br><span class="line">        score = person.score;</span><br><span class="line">        p = <span class="keyword">new</span> <span class="built_in">int</span>(*person.p);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Person</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;析构函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> p;</span><br><span class="line">            p = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个对象</span></span><br><span class="line">    Person p1;</span><br><span class="line">    p1.age = <span class="number">18</span>;</span><br><span class="line">    p1.score = <span class="number">99</span>;</span><br><span class="line">    p1.p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里，虽然是等号运算符，但是p2对象还没有完成空间开辟、实例化，那么在这里会调用拷贝构造函数，而非重载的等号运算符</span></span><br><span class="line">    Person p2 = p1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改p2的属性值</span></span><br><span class="line">    p2.age = <span class="number">20</span>;</span><br><span class="line">    p2.score = <span class="number">100</span>;</span><br><span class="line">    p2.p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里的p1已经开辟空间了，这里就会触发重载的等号运算符</span></span><br><span class="line">    p1 = p2;</span><br><span class="line">    cout &lt;&lt; p1.age &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; p1.score &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; p1.p &lt;&lt; <span class="string">&quot; =&gt;&quot;</span> &lt;&lt; *p1.p &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; p2.age &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; p2.score &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; p2.p &lt;&lt; <span class="string">&quot; =&gt;&quot;</span> &lt;&lt; *p2.p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><blockquote><p>面向对象编程思想中，有三大特性：<code>封装</code>、<code>继承</code>、<code>多态</code>。</p></blockquote><p>封装可以有广义和狭义上的概念。广义上的封装，我们可以将一些功能相近的一些类放入一个模块中。这里我们更多强调的是狭义上的封装性。</p><ul><li>定义:我们可以通过对具体属性的封装实现.把对<code>成员变量</code>的<code>访问</code>进行<code>私有化</code>,让他只能在<code>类内部可见</code>,<wavy>通过公共的方法间接实现访问</wavy></li><li>优点:提高了代码的安全性,复用性和可读性.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 将不希望对外提供直接访问的属性封装起来</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>(): <span class="built_in">name</span>(<span class="string">&quot;&quot;</span>), <span class="built_in">age</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">Student</span>(string name, <span class="type">int</span> age) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setAge</span><span class="params">(<span class="type">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">0</span> &amp;&amp; age &lt;= <span class="number">130</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="程序中的继承"><a href="#程序中的继承" class="headerlink" title="程序中的继承"></a>程序中的继承</h3><p>在现实生活中，我们与父母有<code>继承</code>的关系，在java中也存在继承的思想，来提高代码的复用性、代码的拓展性。</p><p>程序中的继承，是类与类之间的特征和行为的一种赠予或获取。一个类可以将自己的<code>属性</code>和<code>方法</code>赠予其他的类，一个类也可以从其他的类中获取他们的属性和方法。</p><p>两个类之间的继承，必须满足 <strong>is a</strong> 的关系。</p><p>两个类之间，A类将属性和特征赠予B类。此时A类被称为是<strong>父类</strong>，B类被称为是<strong>子类</strong>，两者之间的关系是<strong>子类继承自父类</strong></p><p><img src="https://shawn-qianfeng.oss-cn-beijing.aliyuncs.com/img/202209060920326.png" alt="image-20220906092001239"></p><h3 id="继承的语法"><a href="#继承的语法" class="headerlink" title="继承的语法"></a>继承的语法</h3><p>在C++中，在定义类的时候，类名后面使用<code>冒号</code>来定义<code>父类</code>。</p><ul><li>类中的所有成员都可以继承给子类，但是私有的成员，由于访问权限的限制，子类无法访问。</li><li>一个类在继承了其他类之后，也可以被其他类<code>继承</code>。</li><li>使用继承，可以简化代码、提高代码的复用性、提高代码的拓展性，最重要的是让类与类之间产生了继承关系，是多态的前提。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>: <span class="keyword">public</span> Animal &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Dog dog;</span><br><span class="line">    dog.<span class="built_in">test</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承的三种方式"><a href="#继承的三种方式" class="headerlink" title="继承的三种方式"></a>继承的三种方式</h3><p>在C++中，继承有三种方式，分别是：<code>公共继承</code>、<code>保护继承</code>和<code>私有继承</code>。其实只是一个访问权限的问题。</p><ul><li><strong>公共继承：</strong>继承到父类中的属性，保留原本的访问权限（私有除外）</li><li><strong>保护继承：</strong>继承到父类中的属性，超过<code>protected</code>权限的部分将降为<code>protected</code>权限（私有除外）</li><li><strong>私有继承：</strong>继承到父类中的属性，访问权限都为<code>private</code>权限（私有除外）</li></ul><p>C++中默认使用的是<code>私有继承</code>！</p><h4 id="公共继承"><a href="#公共继承" class="headerlink" title="公共继承"></a>公共继承</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义类，分别定义三种访问权限的属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> publicField;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> protectedField;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> privateField;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义自类，公共继承</span></span><br><span class="line"><span class="comment">// 继承到的 publicField，还是public权限</span></span><br><span class="line"><span class="comment">// 继承到的 protectedField，还是protected权限</span></span><br><span class="line"><span class="comment">// privateField是私有权限的，无法继承给自类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass</span>: <span class="keyword">public</span> BaseClass &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; publicField &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; protectedField &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SubClass sc;</span><br><span class="line">    cout &lt;&lt; sc.publicField &lt;&lt; endl;<span class="comment">// 在类外依然可以访问</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; sc.protectedField &lt;&lt; endl;// 类外不能访问，因为这是保护权限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="保护继承"><a href="#保护继承" class="headerlink" title="保护继承"></a>保护继承</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义类，分别定义三种访问权限的属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> publicField;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> protectedField;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> privateField;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义自类，保护继承</span></span><br><span class="line"><span class="comment">// 继承到的 publicField，原来是public权限，现在是protected权限</span></span><br><span class="line"><span class="comment">// 继承到的 protectedField，还是protected权限</span></span><br><span class="line"><span class="comment">// privateField是私有权限的，无法继承给自类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass</span>: <span class="keyword">protected</span> BaseClass &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; publicField &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; protectedField &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SubClass sc;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; sc.publicField &lt;&lt; endl;// 在类不能访问，因为这是保护权限</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; sc.protectedField &lt;&lt; endl;// 类外不能访问，因为这是保护权限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="私有继承"><a href="#私有继承" class="headerlink" title="私有继承"></a>私有继承</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义类，分别定义三种访问权限的属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> publicField;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> protectedField;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> privateField;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义自类，私有继承</span></span><br><span class="line"><span class="comment">// 继承到的 publicField，是私有权限</span></span><br><span class="line"><span class="comment">// 继承到的 protectedField，是私有权限</span></span><br><span class="line"><span class="comment">// privateField是私有权限的，无法继承给自类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass</span>: <span class="keyword">public</span> BaseClass &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; publicField &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; protectedField &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SubClass sc;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; sc.publicField &lt;&lt; endl;// 类外不能访问，因为这里是私有权限</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; sc.protectedField &lt;&lt; endl;// 类外不能访问，因为这里是私有权限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承中的构造和析构"><a href="#继承中的构造和析构" class="headerlink" title="继承中的构造和析构"></a>继承中的构造和析构</h3><p>子类对象在创建的时候，需要先调用父类中的构造函数，用来初始化父类部分。因此，子类对象创建的时候，先调用父类的构造函数，再调用子类自己的构造函数。</p><p>而析构函数的调用正好相反，先调用子类的析构函数，再调用父类的析构函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Animal</span>() &#123;</span><br><span class="line">        age = <span class="number">0</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;父类中的无参构造函数调用了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Animal</span><span class="params">(<span class="type">int</span> age)</span>: age(age) &#123;</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;父类中的有参构造函数调用了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Animal</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;父类中的析构函数调用了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>: <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;子类中的无参构造函数被调用了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Dog</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;子类中的析构函数被调用了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Dog <span class="title">dog</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述的代码中可以看到，子类对象在创建的时候，需要先调用父类中的构造函数来构造父类部分。这里默认是调用父类中的无参构造函数。那么问题来了：如果父类中没有无参构造函数，或者父类中的无参构造函数是私有的，怎么办？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Animal</span><span class="params">(<span class="type">int</span> age)</span>: age(age) &#123;</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;父类中的有参构造函数调用了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Animal</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;父类中的析构函数调用了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>: <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Dog</span><span class="params">(<span class="type">int</span> age)</span> : Animal(age) &#123;</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;子类中的无参构造函数被调用了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Dog</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;子类中的析构函数被调用了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Dog <span class="title">dog</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="父类子类成员同名的情况"><a href="#父类子类成员同名的情况" class="headerlink" title="父类子类成员同名的情况"></a>父类子类成员同名的情况</h3><p>如果父类和子类中出现了同名字的成员（属性、函数），子类会将从父类继承到的成员隐藏起来。此时使用子类对象来访问的时候，默认访问的是子类中的成员。如果想要访问父类中的成员，需要手动指定作用域。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showAge</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;父类中的函数showAge被调用，age = &quot;</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>: <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showAge</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;子类中的函数showAge被调用，age = &quot;</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Dog dog;</span><br><span class="line">    dog.age = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    dog.<span class="built_in">showAge</span>();          <span class="comment">// 默认调用的是子类中的函数</span></span><br><span class="line">    dog.Animal::<span class="built_in">showAge</span>();  <span class="comment">// 如果想要调用父类中的函数，需要显式调用</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; dog.age &lt;&lt; endl;            <span class="comment">// 默认访问自类中的属性age</span></span><br><span class="line">    cout &lt;&lt; dog.Animal::age &lt;&lt; endl;    <span class="comment">// 如果想要调用父类中的属性age，需要显式调用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><h4 id="多继承语法"><a href="#多继承语法" class="headerlink" title="多继承语法"></a>多继承语法</h4><p>我们可以从一个类继承，我们也可以能同时从多个类继承，这就是多继承。但是由于多继承是非常受争议的，从多个类继承可能会导致函数、变量等同名导致较多的歧义。</p><p>多继承会带来一些二义性的问题，如果两个基类中有同名的函数或者变量，那么通过派生类对象去访问这个函数或变量时就不能明确到底调用从基类1继承的版本还是从基类2继承的版本？</p><p>解决方法就是显示指定调用那个基类的版本。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base1::func1&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base2::func1&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base2::func2&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 派生类继承Base1、Base2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2&#123;&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Derived derived;</span><br><span class="line">    <span class="comment">// func1是从Base1继承来的还是从Base2继承来的？</span></span><br><span class="line">    <span class="comment">// derived.func1();</span></span><br><span class="line">    derived.<span class="built_in">func2</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解决歧义:显示指定调用那个基类的func1</span></span><br><span class="line">    derived.Base1::<span class="built_in">func1</span>();</span><br><span class="line">    derived.Base2::<span class="built_in">func1</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h4><p>两个派生类继承同一个基类而又有某个类同时继承者两个派生类，这种继承被称为菱形继承，或者钻石型继承。</p><img src="https://shawn-qianfeng.oss-cn-beijing.aliyuncs.com/img/202209061112713.png" alt="image-20220906111216636" style="zoom:30%;" /><p>这种继承所带来的问题：</p><ul><li><p>羊继承了动物的数据和函数，鸵同样继承了动物的数据和函数，当草泥马调用函数或者数据时，就会产生二义性。</p></li><li><p>草泥马继承自动物的函数和数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BigBase</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BigBase</span>()&#123; mParam = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123; cout &lt;&lt; <span class="string">&quot;BigBase::func&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> mParam;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span> : <span class="keyword">public</span> BigBase &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span> : <span class="keyword">public</span> BigBase &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2 &#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Derived derived;</span><br><span class="line">    <span class="comment">// 对“func”的访问不明确</span></span><br><span class="line">    <span class="comment">// derived.func();</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; derived.mParam &lt;&lt; endl;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;derived.Base1::mParam:&quot;</span> &lt;&lt; derived.Base1::mParam &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;derived.Base2::mParam:&quot;</span> &lt;&lt; derived.Base2::mParam &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="虚继承"><a href="#虚继承" class="headerlink" title="虚继承"></a>虚继承</h4><p>Base1，Base2采用虚继承方式继承BigBase,那么BigBase被称为虚基类。</p><p>通过虚继承解决了菱形继承所带来的二义性问题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BigBase</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BigBase</span>()&#123; mParam = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123; cout &lt;&lt; <span class="string">&quot;BigBase::func&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> mParam;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> BigBase&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> BigBase&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Derived derived;</span><br><span class="line">    <span class="comment">//二义性问题解决</span></span><br><span class="line">    derived.<span class="built_in">func</span>();</span><br><span class="line">    cout &lt;&lt; derived.mParam &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//输出结果:12</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Derived size:&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Derived) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="多态的基本概念"><a href="#多态的基本概念" class="headerlink" title="多态的基本概念"></a>多态的基本概念</h3><h4 id="什么是多态"><a href="#什么是多态" class="headerlink" title="什么是多态"></a>什么是多态</h4><p>生活中的多态，是指的客观的事物在人脑中的主观体现。例如，在路上看到一只哈士奇，你可以看做是哈士奇，可以看做是狗，也可以看做是动物。主观意识上的类别，与客观存在的事物，存在 <code>is a</code> 的关系的时候，即形成了多态。</p><p>在程序中，一个类的引用指向另外一个类的对象，从而产生多种形态。当二者存在直接或者间接的继承关系时，父类引用指向子类的对象，即形成多态。</p><p>多态是面向对象三大特性之一，记住继承是多态的前提，如果类与类之间没有继承关系，也不会存在多态。</p><h4 id="多态的分类"><a href="#多态的分类" class="headerlink" title="多态的分类"></a>多态的分类</h4><p>c++支持编译时多态(静态多态)和运行时多态(动态多态)，运算符重载和函数重载就是编译时多态，而派生类和虚函数实现运行时多态。</p><p>静态多态和动态多态的区别就是函数地址是早绑定(静态联编)还是晚绑定(动态联编)。如果函数的调用，在编译阶段就可以确定函数的调用地址，并产生代码，就是静态多态(编译时多态)，就是说地址是早绑定的。而如果函数的调用地址不能编译不能在编译期间确定，而需要在运行时才能决定，这这就属于晚绑定(动态多态,运行时多态)。</p><h3 id="对象转型"><a href="#对象转型" class="headerlink" title="对象转型"></a>对象转型</h3><p>对象可以作为自己的类或者作为它的基类的对象来使用。还能通过基类的地址来操作它。取一个对象的地址(指针或引用)，并将其作为基类的地址来处理，这种称为向上类型转换。</p><p>也就是说：父类引用或指针可以指向子类对象，通过父类指针或引用来操作子类对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Animal Bark&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>: <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Dog Bark&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 父类的引用指向子类的对象</span></span><br><span class="line">    Dog dog;</span><br><span class="line">    Animal&amp; animal = dog;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向上转型后的对象调用父类中的函数</span></span><br><span class="line">    animal.<span class="built_in">bark</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><blockquote><p>  上述代码的运行结果是: Animal bark。说明执行的是父类中的bark函数，而非子类中的函数。</p><p>  于是现在就有一个问题出现了: 为什么？animal的引用指向的实际上是一个Dog对象，但是为什么会调用父类中的函数实现呢？</p></blockquote><p>解决这个问题，我们需要了解下绑定(捆绑,binding)概念。</p><blockquote><p>  把函数体与函数调用相联系称为绑定(捆绑，binding)</p></blockquote><p>当绑定在程序运行之前(由编译器和连接器)完成时，称为早绑定(early binding)。</p><p>上面的问题就是由于早绑定引起的，因为编译器在只有Animal地址时并不知道要调用的正确函数。编译是根据指向对象的指针或引用的类型来选择函数调用。这个时候由于调用函数的时候使用的是Animal类型，编译器确定了应该调用的bark是Animal::bark的，而不是真正传入的对象Dog::bark。</p><p>解决方法就是迟绑定(迟捆绑,动态绑定,运行时绑定，late binding)，意味着绑定要根据对象的实际类型，发生在运行。</p><p>C++语言要实现这种动态绑定，必须有某种机制来确定运行时对象的类型并调用合适的成员函数。对于一种编译语言，编译器并不知道实际的对象类型（编译器并不知道Animal类型的指针或引用指向的实际的对象类型）</p><p>C++动态多态性是通过虚函数来实现的，虚函数允许子类（派生类）重新定义父类（基类）成员函数，而子类（派生类）重新定义父类（基类）虚函数的做法称为覆盖(override)，或者称为重写。对于特定的函数进行动态绑定，C++要求在基类中声明这个函数的时候使用virtual关键字，动态绑定也就对virtual函数起作用。</p><ul><li>为创建一个需要动态绑定的虚成员函数，可以简单在这个函数声明前面加上virtual关键字，定义时候不需要.</li><li>如果一个函数在基类中被声明为virtual，那么在所有派生类中它都是virtual的.</li><li>在派生类中virtual函数的重定义称为重写(override).</li><li>virtual关键字只能修饰成员函数.</li><li>构造函数不能为虚函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 将需要动态绑定的函数定义为虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Animal Bark&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>: <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 在子类中重写虚函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bark</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Dog Bark&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将Dog对象转成父类的对象</span></span><br><span class="line">    <span class="comment">// 这里是向上转型</span></span><br><span class="line">    Dog dog;</span><br><span class="line">    Animal&amp; animal = dog;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向上转型后的对象调用父类中的函数</span></span><br><span class="line">    animal.<span class="built_in">bark</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态案例"><a href="#多态案例" class="headerlink" title="多态案例"></a>多态案例</h3><h4 id="未使用多态实现"><a href="#未使用多态实现" class="headerlink" title="未使用多态实现"></a>未使用多态实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SF</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sendPackage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;SF快递为你快速发送包裹&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EMS</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sendPackage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;EMS快递为您发送包裹，哪里都能送到！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JDL</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sendPackage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;JDL快递为您发送包裹，最快当日可达！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sendPackage</span><span class="params">(string company)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (company == <span class="string">&quot;SF&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">SF</span>().<span class="built_in">sendPackage</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (company == <span class="string">&quot;EMS&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">EMS</span>().<span class="built_in">sendPackage</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (company == <span class="string">&quot;JDL&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">JDL</span>().<span class="built_in">sendPackage</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里违背了程序设计原则中的开闭原则</span></span><br><span class="line">    <span class="comment">// 开闭原则：对拓展开放、对修改关闭，意义是当有新的功能增加对时候，直接拓展模块，而不是修改现有的实现部分。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用多态实现"><a href="#使用多态实现" class="headerlink" title="使用多态实现"></a>使用多态实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快递公司类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExpressCompany</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">sendPackage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;快递公司发送包裹&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SF</span>: <span class="keyword">public</span> ExpressCompany &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sendPackage</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;SF快递为你快速发送包裹&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EMS</span>: <span class="keyword">public</span> ExpressCompany &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sendPackage</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;EMS快递为您发送包裹，哪里都能送到！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JDL</span>: <span class="keyword">public</span> ExpressCompany &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sendPackage</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;JDL快递为您发送包裹，最快当日可达！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sendPackage</span><span class="params">(ExpressCompany&amp; express)</span> </span>&#123;</span><br><span class="line">    express.<span class="built_in">sendPackage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sendPackage</span>(*(<span class="keyword">new</span> SF));</span><br><span class="line">    <span class="built_in">sendPackage</span>(*(<span class="keyword">new</span> EMS));</span><br><span class="line">    <span class="built_in">sendPackage</span>(*(<span class="keyword">new</span> JDL));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="纯虚函数与抽象类"><a href="#纯虚函数与抽象类" class="headerlink" title="纯虚函数与抽象类"></a>纯虚函数与抽象类</h3><p>在设计程序时，常常希望基类仅仅作为其派生类的一个接口。这就是说，仅想对基类进行向上类型转换，使用它的接口，而不希望用户实际的创建一个基类的对象。同时创建一个纯虚函数允许接口中放置成员原函数，而不一定要提供一段可能对这个函数毫无意义的代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">我们可以设计一个交通工具类，提供最基础的运输的功能。我们在使用到交通工具的时候，往往并不是寻求交通工具的对象，而是寻求的交通工具子类的对象，例如公交车、例如地铁、例如共享单车等。而我们需要的其实是在这些子类中的运输功能实现。因此，父类交通工具类中的运输功能怎么去实现没有意义。</span><br></pre></td></tr></table></figure><p>纯虚函数使用virtual来修饰一个函数，并且实现部分直接设置为0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtual void test() = 0;</span><br></pre></td></tr></table></figure><p>如果一个类中包含了纯虚函数，那么这个类也自动的编程了抽象类了。抽象类无法实例化对象，并且子类必须重写实现父类中的纯虚函数，否则子类也是抽象类。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrafficTools</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 定义纯虚函数，此时的类是抽象类</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">transport</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span>: <span class="keyword">public</span> TrafficTools &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">transport</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;公交车运输乘客&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subway</span>: <span class="keyword">public</span> TrafficTools &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">transport</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;地铁运输乘客&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">useTrafficTools</span><span class="params">(TrafficTools&amp; trafficTools)</span> </span>&#123;</span><br><span class="line">    trafficTools.<span class="built_in">transport</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 抽象类无法实例化对象</span></span><br><span class="line">    <span class="comment">// new TrafficTools;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">useTrafficTools</span>(*(<span class="keyword">new</span> Bus));</span><br><span class="line">    <span class="built_in">useTrafficTools</span>(*(<span class="keyword">new</span> Subway));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="纯虚函数与多继承"><a href="#纯虚函数与多继承" class="headerlink" title="纯虚函数与多继承"></a>纯虚函数与多继承</h3><p>多继承带来了一些争议，但是接口继承可以说一种毫无争议的运用了。<br>绝大数面向对象语言都不支持多继承，但是绝大数面向对象对象语言都支持接口的概念，c++中没有接口的概念，但是可以通过纯虚函数实现接口。</p><p>接口类中只有函数原型定义，没有任何数据定义。</p><p>多重继承接口不会带来二义性和复杂性问题。接口类只是一个功能声明，并不是功能实现，子类需要根据功能说明定义功能实现。<br>注意:除了析构函数外，其他声明都是纯虚函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个功能集合，厨师类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cooker</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">buyFood</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">cook</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">eat</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 定义一个功能集合，保姆类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Maid</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">cook</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">clean</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">wash</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使得人类同时具备这两种功能</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>: <span class="keyword">public</span> Cooker, <span class="keyword">public</span> Maid &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 对继承到的纯虚函数进行实现</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">buyFood</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;买菜&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cook</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;做饭&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;吃饭&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clean</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;扫地&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">wash</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;洗衣服&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Person xiaoming;</span><br><span class="line">    xiaoming.<span class="built_in">buyFood</span>();</span><br><span class="line">    xiaoming.<span class="built_in">cook</span>();</span><br><span class="line">    xiaoming.<span class="built_in">eat</span>();</span><br><span class="line">    xiaoming.<span class="built_in">wash</span>();</span><br><span class="line">    xiaoming.<span class="built_in">clean</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h3><p>析构函数是对象生命周期的终点，在对象被销毁之前调用。在析构函数中，我们一般会进行资源的释放、空间的销毁的操作。例如，在一个类中有指向堆空间内存的指针，我们需要通过这样的指针来销毁对应的堆空间。但是，在多态中，父类的引用可以指向子类的对象，那么我们在使用父类的引用来销毁空间的话，就有可能会出现子类中引用的堆空间无法销毁的情况，造成内存泄漏。而解决方案就是为父类添加虚析构函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Animal</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;父类的析构函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>: <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span>* n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Person</span>() &#123;</span><br><span class="line">        n = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Person</span>() <span class="keyword">override</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;子类的析构函数执行了&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (n != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> n;</span><br><span class="line">            n = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Animal* animal = <span class="keyword">new</span> <span class="built_in">Person</span>();</span><br><span class="line">    <span class="comment">// 如果没有虚析构函数的话，这里通过animal来销毁空间，的确可以把Person开辟的堆空间给销毁掉</span></span><br><span class="line">    <span class="comment">// 但是，由于只会触发父类中的析构函数，因此无法将Person属性n开辟的堆空间给销毁掉，造成内存泄漏</span></span><br><span class="line">    <span class="comment">// 解决方案：将父类的析构函数作为虚析构函数，完成动态绑定</span></span><br><span class="line">    <span class="keyword">delete</span> animal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虚析构函数也可以做成纯虚析构函数，如果一个类中包含了纯虚析构函数，那么这个类依然是一个抽象类，无法实例化对象。</p><p>总结：</p><p>如果一个类的目的不是为了实现多态，仅仅是作为一个基类来使用，那么无需将析构函数设置为虚析构函数。</p><p>如果一个类的目的就是为了实现多态的，那么这个类的析构函数就有必要设置为虚析构函数。</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="结构体的定义与使用"><a href="#结构体的定义与使用" class="headerlink" title="结构体的定义与使用"></a>结构体的定义与使用</h3><p>在C++中，还有一种用户自定义的数据类型，结构体。结构体的定义与使用基本与类相同。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 结构体中定义的属性</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结构体中的构造函数</span></span><br><span class="line">    <span class="built_in">Student</span>() &#123;</span><br><span class="line">        name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        age = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Student</span>(string name, <span class="type">int</span> age): <span class="built_in">name</span>(name), <span class="built_in">age</span>(age) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结构体中的函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">study</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; name &lt;&lt; <span class="string">&quot;正在努力学习&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 结构体中的析构函数</span></span><br><span class="line">    ~<span class="built_in">Student</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;结构体析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建结构体对象</span></span><br><span class="line">    <span class="comment">// 创建结构体对象时候的关键字struct可以省略不写</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Student</span> student;</span><br><span class="line">    <span class="comment">// 访问成员</span></span><br><span class="line">    student.name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    student.age = <span class="number">18</span>;</span><br><span class="line">    student.<span class="built_in">study</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过有参构造创建结构体对象</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Student</span> <span class="built_in">xiaoming</span>(<span class="string">&quot;xiaoming&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Student</span> xiaohei = <span class="built_in">Student</span>(<span class="string">&quot;xiaohei&quot;</span>, <span class="number">11</span>);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Student</span> xiaobai = &#123;<span class="string">&quot;xiaobai&quot;</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在堆上创建结构体对象</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Student</span>* xiaoli = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="string">&quot;xiaoli&quot;</span>, <span class="number">11</span>);</span><br><span class="line"><span class="keyword">delete</span> xiaoli;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体与类的区别"><a href="#结构体与类的区别" class="headerlink" title="结构体与类的区别"></a>结构体与类的区别</h3><p>C++对结构体进行了很多的拓展，是的C++对结构体用于与类几乎相同的功能：可以设计属性、函数，可以设计构造、析构，甚至可以有继承，可以有多态。现在看来C++的结构体与类的区别，主要是一点：<strong>默认的访问权限不同</strong></p><ul><li>类成员默认的访问权限是private</li><li>结构体成员默认的访问权限是public</li></ul><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="模板的介绍"><a href="#模板的介绍" class="headerlink" title="模板的介绍"></a>模板的介绍</h3><p>c++提供了函数模板(function template)。所谓函数模板，实际上是建立一个通用函数，其函数类型和形参类型不具体制定，用一个虚拟的类型来代表。这个通用函数就称为函数模板。凡是函数体相同的函数都可以用这个模板代替，不必定义多个函数，只需在模板中定义一次即可。在调用函数时系统会根据实参的类型来取代模板中的虚拟类型，从而实现不同函数的功能。</p><p>c++提供两种模板机制：<strong>函数模板</strong>和<strong>类模板</strong></p><p>总结：<br>模板把函数或类要处理的数据类型参数化，表现为参数的多态性，成为类属。<br>模板用于表达逻辑结构相同，但具体数据元素类型不同的数据对象的通用行为。</p><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><h4 id="函数模板的定义"><a href="#函数模板的定义" class="headerlink" title="函数模板的定义"></a>函数模板的定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求：我想要设计一个函数，实现两个int变量的值的交换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 需求：我想要设计一个函数，实现两个double变量的值的交换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap</span><span class="params">(<span class="type">double</span>&amp; a, <span class="type">double</span>&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 那么我需要再对两个float类型的变量进行交换，是不是还需要再写一个函数呢？</span></span><br><span class="line"><span class="comment">// 需要交换的变量的类型越多，我就越需要写更多的重复的函数</span></span><br><span class="line"><span class="comment">// 而且一旦需求变更了，交换的逻辑需要做一些小小的改变。那么每一个函数我都得修改一下，非常的复杂</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 我如果能够设计一个通用的函数，能够把类型当作参数传递到这个函数中，就可以简化很多很多的工作了！</span></span><br><span class="line"><span class="comment">// 这就是函数模板！</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义函数模板</span></span><br><span class="line"><span class="comment">// template: 模板关键字</span></span><br><span class="line"><span class="comment">// typename: 定义虚拟类型关键字，也可以使用class</span></span><br><span class="line"><span class="comment">// T: 定义的一个虚拟的类型，在这里暂不确定是什么类型，等到调用这个函数的时候就可以确定了</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap</span><span class="params">(T&amp; a, T&amp; b)</span> </span>&#123;</span><br><span class="line">    T tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数模板的使用"><a href="#函数模板的使用" class="headerlink" title="函数模板的使用"></a>函数模板的使用</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap</span><span class="params">(T&amp; a, T&amp; b)</span> </span>&#123;</span><br><span class="line">    T tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">double</span> x = <span class="number">3.14</span>, y = <span class="number">0.99</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 显式指定类型</span></span><br><span class="line">    <span class="built_in">mySwap</span>&lt;<span class="type">int</span>&gt;(a, b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 可以自动根据实参的类型进行推导</span></span><br><span class="line">    <span class="built_in">mySwap</span>(a, b);       <span class="comment">// 这里调用的mySwap中，类型T被推导为int类型</span></span><br><span class="line">    <span class="built_in">mySwap</span>(x, y);       <span class="comment">// 这里调用的mySwap中，类型T被推导为double类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意事项: 类型推导的时候，需要保证一致性。不满足一致性无法推导。</span></span><br><span class="line">    <span class="comment">// 例如 mySwap(a, y);     </span></span><br><span class="line">    <span class="comment">// 第一个实参a是int类型，推导T的类型为int；第二个实参y是double类型，推导T的类型为double；不一致</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数模板案例"><a href="#函数模板案例" class="headerlink" title="函数模板案例"></a>函数模板案例</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求：定义一个模板函数，实现对一个数组中对元素进行升序排序</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySort</span><span class="params">(T array[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[minIndex] &gt; array[j]) &#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minIndex != i) &#123;</span><br><span class="line">            T tmp = array[minIndex];</span><br><span class="line">            array[minIndex] = array[i];</span><br><span class="line">            array[i] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求：定义一个模板函数，实现将一个数组中对元素拼接成为字符串返回</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showArray</span><span class="params">(T array[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;[]&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;[&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        cout &lt;&lt; array[i] &lt;&lt; <span class="string">&quot;, &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; array[len - <span class="number">1</span>] &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个int[]</span></span><br><span class="line">    <span class="type">int</span> array1[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">sizeof</span>(array1) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    <span class="built_in">mySort</span>(array1, len1);</span><br><span class="line">    <span class="built_in">showArray</span>(array1, len1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个double[]</span></span><br><span class="line">    <span class="type">double</span> array2[] = &#123;<span class="number">3.14</span>, <span class="number">9.28</span>, <span class="number">3</span>, <span class="number">3.44</span>, <span class="number">-9.2</span>, <span class="number">8.22</span>&#125;;</span><br><span class="line">    <span class="type">int</span> len2 = <span class="built_in">sizeof</span>(array2) / <span class="built_in">sizeof</span>(<span class="type">double</span>);</span><br><span class="line">    <span class="built_in">mySort</span>(array2, len2);</span><br><span class="line">    <span class="built_in">showArray</span>(array2, len2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个char[]</span></span><br><span class="line">    <span class="type">char</span> array3[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;k&#x27;</span>&#125;;</span><br><span class="line">    <span class="type">int</span> len3 = <span class="built_in">sizeof</span>(array3) / <span class="built_in">sizeof</span>(<span class="type">char</span>);</span><br><span class="line">    <span class="built_in">mySort</span>(array3, len3);</span><br><span class="line">    <span class="built_in">showArray</span>(array3, len3);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数模板与普通函数"><a href="#函数模板与普通函数" class="headerlink" title="函数模板与普通函数"></a>函数模板与普通函数</h4><p>函数模板和普通函数在调用的时候，需要注意：</p><ul><li>普通函数调用，是可以发生自动的类型转换的；函数模板调用，是不可以发生自动的类型转换的</li><li>如果调用函数的时候，实参既可以匹配普通函数，又可以匹配函数模板，则优先匹配普通函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数模板</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">myPlus</span><span class="params">(<span class="type">const</span> T&amp; n1, <span class="type">const</span> T&amp; n2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">myPlus</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用普通函数，类型可以自动转换</span></span><br><span class="line">    <span class="type">int</span> n1 = <span class="number">10</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="built_in">myPlus</span>(n1, c);      <span class="comment">// 这里进行了类型的自动转换，c是char类型，被转型成了int类型。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用函数模板，类型不可以自动转换</span></span><br><span class="line">    <span class="comment">// myPlus(n1, c);         // 这里直接错误，因为这里不允许类型的转换。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果实参既可以匹配普通函数 ，又可以匹配函数参数。则优先普通函数调用。</span></span><br><span class="line">    <span class="built_in">myPlus</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数模板的局限性"><a href="#函数模板的局限性" class="headerlink" title="函数模板的局限性"></a>函数模板的局限性</h4><p>函数模板虽然很通用，但是并不是万能的，有时候也会有不适配的情况出现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> T&amp; t1, <span class="type">const</span> T&amp; t2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t1 &gt; t2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上述的函数模板来说，如果是比较整型、浮点型甚至字符类型的数据都是没有问题的。可是如果我设置为Person类型呢？两个Person对象无法使用&gt;进行比较，这里自然也就出问题了。</p><p>那么如何解决这样的问题呢？</p><ol><li>重载运算符，重载&gt;运算符。</li><li>通过函数模板的重载来解决。</li></ol><p>函数模板的重载，就是为了解决特定类型的对象的问题，通过函数模板的重载，可以为这些特定的数据类型提供具像化的模板。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> T&amp; t1, <span class="type">const</span> T&amp; t2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t1 &gt; t2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="type">bool</span> <span class="built_in">compare</span>&lt;Person&gt;(<span class="type">const</span> Person&amp; p1, <span class="type">const</span> Person&amp; p2) &#123;</span><br><span class="line">    <span class="keyword">return</span> p1.age &gt; p2.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Person p1;</span><br><span class="line">    p1.age = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">    Person p2;</span><br><span class="line">    p2.age = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">compare</span>(p1, p2) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><h4 id="类模板的定义"><a href="#类模板的定义" class="headerlink" title="类模板的定义"></a>类模板的定义</h4><p>类模板和函数模板的定义和使用基本是一样的，如何定义函数模板，就如何定义类模板。但是类模板与函数模板还是有点区别的：</p><ul><li>类模板不能自动类型推导。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span> = <span class="type">int</span>&gt;</span><br><span class="line"><span class="keyword">class</span> NumberOperator &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    T1 num1;</span><br><span class="line">    T2 num2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; num1 + num2 &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建对象，不能类型推导，只能自己指定类型</span></span><br><span class="line">    NumberOperator&lt;<span class="type">int</span>, <span class="type">int</span>&gt; op1;</span><br><span class="line">    op1.num1 = <span class="number">10</span>;</span><br><span class="line">    op1.num2 = <span class="number">20</span>;</span><br><span class="line">    op1.<span class="built_in">cal</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建对象</span></span><br><span class="line">    NumberOperator&lt;<span class="type">double</span>&gt; op2;</span><br><span class="line">    op2.num1 = <span class="number">3.14</span>;</span><br><span class="line">    op2.num2 = <span class="number">10</span>;</span><br><span class="line">    op2.<span class="built_in">cal</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类模板做函数参数"><a href="#类模板做函数参数" class="headerlink" title="类模板做函数参数"></a>类模板做函数参数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span> = <span class="type">int</span>&gt;</span><br><span class="line"><span class="keyword">class</span> NumberOperation &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    T1 num1;</span><br><span class="line">    T2 num2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">cal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; num1 + num2 &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数中明确模板类</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">useNumberOperation</span><span class="params">(NumberOperation&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; op)</span> </span>&#123;</span><br><span class="line">    op.<span class="built_in">cal</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数中使用模板</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">useNumberOperation02</span><span class="params">(NumberOperation&lt;T1, T2&gt;&amp; op)</span> </span>&#123;</span><br><span class="line">    op.<span class="built_in">cal</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参数明确模板类调用</span></span><br><span class="line">    NumberOperation&lt;<span class="type">int</span>, <span class="type">int</span>&gt; op;</span><br><span class="line">    op.num1 = <span class="number">10</span>;</span><br><span class="line">    op.num2 = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">useNumberOperation</span>(op);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参数模板</span></span><br><span class="line">    <span class="built_in">useNumberOperation02</span>(op);</span><br><span class="line">    NumberOperation&lt;<span class="type">double</span>, <span class="type">int</span>&gt; op2;</span><br><span class="line">    op2.num1 = <span class="number">10.5</span>;</span><br><span class="line">    op2.num2 = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">useNumberOperation02</span>(op2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类模板继承"><a href="#类模板继承" class="headerlink" title="类模板继承"></a>类模板继承</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义模板类</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    T arg;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通类继承模板类的时候，必须明确指定类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>: Animal&lt;<span class="type">int</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// 这里继承到的arg的数据类型是int</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>: Animal&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">// 这里继承到的arg的数据类型是E</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="类模板中的成员函数创建时机"><a href="#类模板中的成员函数创建时机" class="headerlink" title="类模板中的成员函数创建时机"></a>类模板中的成员函数创建时机</h4><p>类模板中的成员函数在编译的时候是不会创建的，是在调用这个函数的时候创建。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;汪汪&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;呼呼&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    T pet;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeBark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pet.<span class="built_in">bark</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeSleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pet.<span class="built_in">sleep</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在类设计完成后，直接编译程序，发现是没有问题的。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用makeBark函数的时候，也是没有问题的，可以正常调用。</span></span><br><span class="line">    Person&lt;Dog&gt; xiaobai;</span><br><span class="line">    xiaobai.<span class="built_in">makeBark</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用makeSleep函数的时候就出问题了，不能调用了！</span></span><br><span class="line">xiaobai.<span class="built_in">makeSleep</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 原因：类模板中的成员函数是在调用的时候才会创建的！</span></span><br><span class="line">    <span class="comment">// 因为在编译的时候，只是知道有一个对象是obj，但是具体是什么类型，不知道！</span></span><br><span class="line">    <span class="comment">// 在调用makeBark的时候，创建了这个函数，而我们设置的类型是Dog类型，没有问题，可以正常执行</span></span><br><span class="line">    <span class="comment">// 在调用makeSleep的时候，创建了这个函数，判断pet的类型是Dog类型，而在Dog类中不存在sleep函数，因此就报错了。</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类模板类外实现"><a href="#类模板类外实现" class="headerlink" title="类模板类外实现"></a>类模板类外实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> M&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumberCalculator</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T n1;</span><br><span class="line">    M n2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumberCalculator</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">NumberCalculator</span>(T n1, M n2);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 构造函数类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> M&gt;</span><br><span class="line">NumberCalculator&lt;T, M&gt;::<span class="built_in">NumberCalculator</span>(T n1, M n2) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;n1 = n1;</span><br><span class="line">    <span class="keyword">this</span>-&gt;n2 = n2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 普通函数类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> M&gt;</span><br><span class="line">NumberCalculator&lt;T, M&gt;::<span class="built_in">add</span>() &#123;</span><br><span class="line">    cout &lt;&lt; n1 + n2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类模板头文件和原文件分离问题"><a href="#类模板头文件和原文件分离问题" class="headerlink" title="类模板头文件和原文件分离问题"></a>类模板头文件和原文件分离问题</h4><p>我们在写程序的时候，很多时候都是需要将类的声明和实现分开来写。将类的声明部分写到.h文件中，将类的实现部分写在.cpp文件中。在使用到这个类的时候，直接包含.h文件即可。但是，如果是一个模板类，这样做是有问题的。</p><p><strong>NumberCalculator.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> M&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumberCalculator</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T n1;</span><br><span class="line">    M n2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumberCalculator</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">NumberCalculator</span>(T n1, M n2);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>NumberCalculator.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;NumberCalculator.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> M&gt;</span><br><span class="line">NumberCalculator&lt;T, M&gt;::<span class="built_in">NumberCalculator</span>(T n1, M n2) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;n1 = n1;</span><br><span class="line">    <span class="keyword">this</span>-&gt;n2 = n2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 普通函数类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> M&gt;</span><br><span class="line"><span class="type">void</span> NumberCalculator&lt;T, M&gt;::<span class="built_in">add</span>() &#123;</span><br><span class="line">    cout &lt;&lt; n1 + n2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过无参构造创建对象，没有问题</span></span><br><span class="line">    NumberCalculator&lt;<span class="type">int</span>, <span class="type">int</span>&gt; cal1;</span><br><span class="line">    <span class="comment">// 通过有参构造创建对象，出问题了</span></span><br><span class="line">    <span class="function">NumberCalculator&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">cal2</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 问题出现原因：</span></span><br><span class="line">    <span class="comment">// 我们虽然引入了.h文件，但是模板类中的函数是在调用的时候才会创建的，因此在编译阶段也不会管对应的.cpp文件中的实现部分。</span></span><br><span class="line">    <span class="comment">// 而到了使用到这个函数的时候，发现这个函数已经创建了，但是没有实现。因此就报错了。</span></span><br><span class="line">    <span class="comment">// 相当于我们只是在.h中声明了函数，但是并没有实现。</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// 如何解决问题：</span></span><br><span class="line">    <span class="comment">// 1. 使用#include引入cpp文件</span></span><br><span class="line">    <span class="comment">// 2. 将类的声明和实现放到一个文件中</span></span><br><span class="line">    <span class="comment">//    这个文件我们习惯上会定义为.hpp文件，但是并不是绝对的，只是一个习惯和约定的问题。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类模板遇到友元"><a href="#类模板遇到友元" class="headerlink" title="类模板遇到友元"></a>类模板遇到友元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局友元函数类外实现-03：定义类</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> M&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumberCalculator</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局友元函数类外实现-02：在类之前定义</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> M&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printNumberCalculator</span><span class="params">(<span class="type">const</span> NumberCalculator&lt;T, M&gt;&amp; op)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;n1 = &quot;</span> &lt;&lt; op.n1 &lt;&lt; <span class="string">&quot;, n2 = &quot;</span> &lt;&lt; op.n2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> M&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumberCalculator</span> &#123;</span><br><span class="line">    <span class="comment">// 全局友元函数类内实现，无需进行什么处理，直接在这里写实现即可。</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    friend void printNumberCalculator(const NumberCalculator&lt;T, M&gt;&amp; op) &#123;</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; &quot;n1 = &quot; &lt;&lt; op.n1 &lt;&lt; &quot;, n2 = &quot; &lt;&lt; op.n2 &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局友元函数类外实现—01：在函数的后面添加一对尖括号，表示一个模板函数</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="type">void</span> printNumberCalculator&lt;&gt;(<span class="type">const</span> NumberCalculator&lt;T, M&gt;&amp; op);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T n1;</span><br><span class="line">    M n2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumberCalculator</span>();</span><br><span class="line">    <span class="built_in">NumberCalculator</span>(T n1, M n2);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> M&gt;</span><br><span class="line">NumberCalculator&lt;T, M&gt;::<span class="built_in">NumberCalculator</span>(T n1, M n2) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;n1 = n1;</span><br><span class="line">    <span class="keyword">this</span>-&gt;n2 = n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> M&gt;</span><br><span class="line">NumberCalculator&lt;T, M&gt;::<span class="built_in">NumberCalculator</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">NumberCalculator&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">op</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printNumberCalculator</span>(op);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="STL标准模板库"><a href="#STL标准模板库" class="headerlink" title="STL标准模板库"></a>STL标准模板库</h1><h2 id="STL概述"><a href="#STL概述" class="headerlink" title="STL概述"></a>STL概述</h2><p>长久以来，软件界一直希望建立一种可重复利用的东西，以及一种得以制造出”可重复运用的东西”的方法,让程序员的心血不止于随时间的迁移，人事异动而烟消云散，从函数(functions)，类别(classes),函数库(function libraries),类别库(class libraries)、各种组件，从模块化设计，到面向对象(object oriented )，为的就是复用性的提升。</p><p>复用性必须建立在某种标准之上。但是在许多环境下，就连软件开发最基本的数据结构(data structures) 和算法(algorithm)都未能有一套标准。大量程序员被迫从事大量重复的工作，竟然是为了完成前人已经完成而自己手上并未拥有的程序代码，这不仅是人力资源的浪费，也是挫折与痛苦的来源。</p><p>为了建立数据结构和算法的一套标准，并且降低他们之间的耦合关系，以提升各自的独立性、弹性、交互操作性(相互合作性,interoperability),诞生了STL。</p><h3 id="STL基本概念"><a href="#STL基本概念" class="headerlink" title="STL基本概念"></a>STL基本概念</h3><p>STL(Standard Template Library,标准模板库)，是惠普实验室开发的一系列软件的统称。现在主要出现在 c++中，但是在引入 c++之前该技术已经存在很长时间了。</p><p>STL 从广义上分为: 容器(container) 算法(algorithm) 迭代器(iterator),容器和算法之间通过迭代器进行无缝连接。STL 几乎所有的代码都采用了模板类或者模板函数，这相比传统的由函数和类组成的库来说提供了更好的代码重用机会。STL(Standard Template Library)标准模板库,在我们 c++标准程序库中隶属于 STL 的占到了 80%以上。</p><h3 id="STL六大组件简介"><a href="#STL六大组件简介" class="headerlink" title="STL六大组件简介"></a>STL六大组件简介</h3><p>STL提供了六大组件，彼此之间可以组合套用，这六大组件分别是:容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器。</p><ul><li><p><strong>容器：</strong>各种数据结构，如vector、list、deque、set、map等,用来存放数据，从实现角度来看，STL容器是一种class template。</p></li><li><p><strong>算法：</strong>各种常用的算法，如sort、find、copy、for_each。从实现的角度来看，STL算法是一种function tempalte.</p></li><li><p><strong>迭代器：</strong>扮演了容器与算法之间的胶合剂，共有五种类型，从实现角度来看，迭代器是一种将operator* , operator-&gt; , operator++,operator–等指针相关操作予以重载的class template. 所有STL容器都附带有自己专属的迭代器，只有容器的设计者才知道如何遍历自己的元素。原生指针(native pointer)也是一种迭代器。</p></li><li><p><strong>仿函数：</strong>行为类似函数，可作为算法的某种策略。从实现角度来看，仿函数是一种重载了operator()的class 或者class template</p></li><li><p><strong>适配器：</strong>一种用来修饰容器或者仿函数或迭代器接口的东西。</p></li><li><p><strong>空间配置器：</strong>负责空间的配置与管理。从实现角度看，配置器是一个实现了动态空间配置、空间管理、空间释放的class tempalte.</p></li></ul><p>STL六大组件的交互关系，容器通过空间配置器取得数据存储空间，算法通过迭代器存储容器中的内容，仿函数可以协助算法完成不同的策略的变化，适配器可以修饰仿函数。</p><h3 id="STL优点"><a href="#STL优点" class="headerlink" title="STL优点"></a>STL优点</h3><p>STL 是 C++的一部分，因此不用额外安装什么，它被内建在你的编译器之内。</p><p>STL 的一个重要特性是将数据和操作分离。数据由容器类别加以管理，操作则由可定制的算法定义。迭代器在两者之间充当“粘合剂”,以使算法可以和容器交互运作。程序员可以不用思考 STL 具体的实现过程，只要能够熟练使用 STL 就 OK 了。这样他们就可以把精力放在程序开发的别的方面。</p><p>STL 具有高可重用性，高性能，高移植性，跨平台的优点。</p><ul><li><p>高可重用性：STL 中几乎所有的代码都采用了模板类和模版函数的方式实现，这相比于传统的由函数和类组成的库来说提供了更好的代码重用机会。关于模板的知识，已经给大家介绍了。</p></li><li><p>高性能：如 map 可以高效地从十万条记录里面查找出指定的记录，因为 map 是采用红黑树的变体实现的。</p></li><li><p>高移植性：如在项目 A 上用 STL 编写的模块，可以直接移植到项目 B 上。</p></li></ul><h2 id="STL三大组件"><a href="#STL三大组件" class="headerlink" title="STL三大组件"></a>STL三大组件</h2><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>容器，置物之所也。</p><p>研究数据的特定排列方式，以利于搜索或排序或其他特殊目的，这一门学科我们称为数据结构。大学信息类相关专业里面，与编程最有直接关系的学科，首推数据结构与算法。几乎可以说，任何特定的数据结构都是为了实现某种特定的算法。STL容器就是将运用最广泛的一些数据结构实现出来。</p><p>常用的数据结构：数组(array),链表(list),tree(树)，栈(stack),队列(queue),集合(set),映射表(map),根据数据在容器中的排列特性，这些数据分为序列式容器和关联式容器两种。</p><ul><li>序列式容器强调值的排序，序列式容器中的每个元素均有固定的位置，除非用删除或插入的操作改变这个位置。Vector容器、Deque容器、List容器等。</li><li>关联式容器是非线性的树结构，更准确的说是二叉树结构。各元素之间没有严格的物理上的顺序关系，也就是说元素在容器中并没有保存元素置入容器时的逻辑顺序。关联式容器另一个显著特点是：在值中选择一个值作为关键字key，这个关键字对值起到索引的作用，方便查找。Set&#x2F;multiset容器 Map&#x2F;multimap容器</li></ul><p>容器可以嵌套容器!</p><p><img src="https://shawn-qianfeng.oss-cn-beijing.aliyuncs.com/img/202209082339044.png" alt="image-20220908233926682"></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>算法，问题之解法也。</p><p>以有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms).</p><p>广义而言，我们所编写的每个程序都是一个算法，其中的每个函数也都是一个算法，毕竟它们都是用来解决或大或小的逻辑问题或数学问题。STL收录的算法经过了数学上的效能分析与证明，是极具复用价值的，包括常用的排序，查找等等。特定的算法往往搭配特定的数据结构，算法与数据结构相辅相成。</p><p>算法分为: <em><strong>质变算法</strong></em> 和 <em><strong>非质变算法</strong></em>。</p><ul><li><p>质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等</p></li><li><p>非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等</p></li></ul><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>迭代器(iterator)是一种抽象的设计概念，现实程序语言中并没有直接对应于这个概念的实物。iterator定义如下：提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。</p><p>迭代器的设计思维-STL的关键所在，STL的中心思想在于将容器(container)和算法(algorithms)分开，彼此独立设计，最后再一贴胶着剂将他们撮合在一起。从技术角度来看，容器和算法的泛型化并不困难，c++的class template和function template可分别达到目标，如何设计出两这个之间的良好的胶着剂，才是大难题。</p><p>迭代器的种类:</p><table><thead><tr><th>输入迭代器</th><th>提供对数据的只读访问</th><th>只读，支持++、&#x3D;&#x3D;、！&#x3D;</th></tr></thead><tbody><tr><td>输出迭代器</td><td>提供对数据的只写访问</td><td>只写，支持++</td></tr><tr><td>前向迭代器</td><td>提供读写操作，并能向前推进迭代器</td><td>读写，支持++、&#x3D;&#x3D;、！&#x3D;</td></tr><tr><td>双向迭代器</td><td>提供读写操作，并能向前和向后操作</td><td>读写，支持++、–，</td></tr><tr><td>随机访问迭代器</td><td>提供读写操作，并能以跳跃的方式访问容器的任意数据，是功能最强的迭代器</td><td>读写，支持++、–、[n]、-n、&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;</td></tr></tbody></table><h2 id="常用容器"><a href="#常用容器" class="headerlink" title="常用容器"></a>常用容器</h2><h3 id="string容器"><a href="#string容器" class="headerlink" title="string容器"></a>string容器</h3><h4 id="string容器基本概念"><a href="#string容器基本概念" class="headerlink" title="string容器基本概念"></a>string容器基本概念</h4><p>C风格字符串(以空字符结尾的字符数组)太过复杂难于掌握，不适合大程序的开发，所以C++标准库定义了一种string类。</p><p><strong>C++的字符串与C语言的字符串比较</strong></p><ul><li>C语言：char* 是一个指针。</li><li>C++：</li><li>string是一个类，内部封装了char*，用来管理这个容器。</li><li>string类中封装了很多的功能函数，非常实用。例如：find、copy、delete、replace、insert等。</li><li>不用考虑内存释放和越界的问题。</li></ul><blockquote><p>  string管理char*所分配的内存。每一次string的复制，取值都由string类负责维护，不用担心复制越界和取值越界等。</p></blockquote><h4 id="string容器常用操作"><a href="#string容器常用操作" class="headerlink" title="string容器常用操作"></a>string容器常用操作</h4><ol><li><p>string构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>();<span class="comment">//创建一个空的字符串 例如: string str;      </span></span><br><span class="line"><span class="built_in">string</span>(<span class="type">const</span> string&amp; str);<span class="comment">//使用一个string对象初始化另一个string对象</span></span><br><span class="line"><span class="built_in">string</span>(<span class="type">const</span> <span class="type">char</span>* s);<span class="comment">//使用字符串s初始化</span></span><br><span class="line"><span class="built_in">string</span>(<span class="type">int</span> n, <span class="type">char</span> c);<span class="comment">//使用n个字符c初始化</span></span><br></pre></td></tr></table></figure></li><li><p>string基本赋值操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">string&amp; <span class="keyword">operator</span>=(<span class="type">const</span> <span class="type">char</span>* s);<span class="comment">//char*类型字符串 赋值给当前的字符串</span></span><br><span class="line">string&amp; <span class="keyword">operator</span>=(<span class="type">const</span> string &amp;s);<span class="comment">//把字符串s赋给当前的字符串</span></span><br><span class="line">string&amp; <span class="keyword">operator</span>=(<span class="type">char</span> c);<span class="comment">//字符赋值给当前的字符串</span></span><br><span class="line"><span class="function">string&amp; <span class="title">assign</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span></span>;<span class="comment">//把字符串s赋给当前的字符串</span></span><br><span class="line"><span class="function">string&amp; <span class="title">assign</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s, <span class="type">int</span> n)</span></span>;<span class="comment">//把字符串s的前n个字符赋给当前的字符串</span></span><br><span class="line"><span class="function">string&amp; <span class="title">assign</span><span class="params">(<span class="type">const</span> string &amp;s)</span></span>;<span class="comment">//把字符串s赋给当前字符串</span></span><br><span class="line"><span class="function">string&amp; <span class="title">assign</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> c)</span></span>;<span class="comment">//用n个字符c赋给当前字符串</span></span><br><span class="line"><span class="function">string&amp; <span class="title">assign</span><span class="params">(<span class="type">const</span> string &amp;s, <span class="type">int</span> start, <span class="type">int</span> n)</span></span>;<span class="comment">//将s从start开始n个字符赋值给字符串</span></span><br></pre></td></tr></table></figure></li><li><p>string存取字符操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>&amp; <span class="keyword">operator</span>[](<span class="type">int</span> n);<span class="comment">//通过[]方式取字符</span></span><br><span class="line"><span class="function"><span class="type">char</span>&amp; <span class="title">at</span><span class="params">(<span class="type">int</span> n)</span></span>;<span class="comment">//通过at方法获取字符</span></span><br></pre></td></tr></table></figure></li><li><p>string拼接操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">string&amp; <span class="keyword">operator</span>+=(<span class="type">const</span> string&amp; str);<span class="comment">//重载+=操作符</span></span><br><span class="line">string&amp; <span class="keyword">operator</span>+=(<span class="type">const</span> <span class="type">char</span>* str);<span class="comment">//重载+=操作符</span></span><br><span class="line">string&amp; <span class="keyword">operator</span>+=(<span class="type">const</span> <span class="type">char</span> c);<span class="comment">//重载+=操作符</span></span><br><span class="line"><span class="function">string&amp; <span class="title">append</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span></span>;<span class="comment">//把字符串s连接到当前字符串结尾</span></span><br><span class="line"><span class="function">string&amp; <span class="title">append</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s, <span class="type">int</span> n)</span></span>;<span class="comment">//把字符串s的前n个字符连接到当前字符串结尾</span></span><br><span class="line"><span class="function">string&amp; <span class="title">append</span><span class="params">(<span class="type">const</span> string &amp;s)</span></span>;<span class="comment">//同operator+=()</span></span><br><span class="line"><span class="function">string&amp; <span class="title">append</span><span class="params">(<span class="type">const</span> string &amp;s, <span class="type">int</span> pos, <span class="type">int</span> n)</span></span>;<span class="comment">//把字符串s中从pos开始的n个字符连接到当前字符串结尾</span></span><br><span class="line"><span class="function">string&amp; <span class="title">append</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> c)</span></span>;<span class="comment">//在当前字符串结尾添加n个字符c</span></span><br></pre></td></tr></table></figure></li><li><p>string查找和替换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">const</span> string&amp; str, <span class="type">int</span> pos = <span class="number">0</span>)</span> <span class="type">const</span></span>; <span class="comment">//查找str第一次出现位置,从pos开始查找</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s, <span class="type">int</span> pos = <span class="number">0</span>)</span> <span class="type">const</span></span>;  <span class="comment">//查找s第一次出现位置,从pos开始查找</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s, <span class="type">int</span> pos, <span class="type">int</span> n)</span> <span class="type">const</span></span>;  <span class="comment">//从pos位置查找s的前n个字符第一次位置</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">const</span> <span class="type">char</span> c, <span class="type">int</span> pos = <span class="number">0</span>)</span> <span class="type">const</span></span>;  <span class="comment">//查找字符c第一次出现位置</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rfind</span><span class="params">(<span class="type">const</span> string&amp; str, <span class="type">int</span> pos = npos)</span> <span class="type">const</span></span>;<span class="comment">//查找str最后一次位置,从pos开始查找</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rfind</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s, <span class="type">int</span> pos = npos)</span> <span class="type">const</span></span>;<span class="comment">//查找s最后一次出现位置,从pos开始查找</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rfind</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s, <span class="type">int</span> pos, <span class="type">int</span> n)</span> <span class="type">const</span></span>;<span class="comment">//从pos查找s的前n个字符最后一次位置</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rfind</span><span class="params">(<span class="type">const</span> <span class="type">char</span> c, <span class="type">int</span> pos = <span class="number">0</span>)</span> <span class="type">const</span></span>; <span class="comment">//查找字符c最后一次出现位置</span></span><br><span class="line"><span class="function">string&amp; <span class="title">replace</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> n, <span class="type">const</span> string&amp; str)</span></span>; <span class="comment">//替换从pos开始n个字符为字符串str</span></span><br><span class="line"><span class="function">string&amp; <span class="title">replace</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> n, <span class="type">const</span> <span class="type">char</span>* s)</span></span>; <span class="comment">//替换从pos开始的n个字符为字符串s</span></span><br></pre></td></tr></table></figure></li><li><p>string比较操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">compare函数在&gt;时返回 1，&lt;时返回 -1，==时返回 0。</span></span><br><span class="line"><span class="comment">比较区分大小写，比较时参考字典顺序，排越前面的越小。</span></span><br><span class="line"><span class="comment">大写的A比小写的a小。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> string &amp;s)</span> <span class="type">const</span></span>;<span class="comment">//与字符串s比较</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span> <span class="type">const</span></span>;<span class="comment">//与字符串s比较</span></span><br></pre></td></tr></table></figure></li><li><p>string子串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">substr</span><span class="params">(<span class="type">int</span> pos = <span class="number">0</span>, <span class="type">int</span> n = npos)</span> <span class="type">const</span></span>;<span class="comment">//返回由pos开始的n个字符组成的字符串</span></span><br></pre></td></tr></table></figure></li><li><p>string插入和删除操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string&amp; <span class="title">insert</span><span class="params">(<span class="type">int</span> pos, <span class="type">const</span> <span class="type">char</span>* s)</span></span>; <span class="comment">//插入字符串</span></span><br><span class="line"><span class="function">string&amp; <span class="title">insert</span><span class="params">(<span class="type">int</span> pos, <span class="type">const</span> string&amp; str)</span></span>; <span class="comment">//插入字符串</span></span><br><span class="line"><span class="function">string&amp; <span class="title">insert</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> n, <span class="type">char</span> c)</span></span>;<span class="comment">//在指定位置插入n个字符c</span></span><br><span class="line"><span class="function">string&amp; <span class="title">erase</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> n = npos)</span></span>;<span class="comment">//删除从Pos开始的n个字符 </span></span><br></pre></td></tr></table></figure></li><li><p>string和C语言风格字符串转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//string 转 char*</span></span><br><span class="line">string str = <span class="string">&quot;itcast&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* cstr = str.<span class="built_in">c_str</span>();</span><br><span class="line"><span class="comment">//char* 转 string </span></span><br><span class="line"><span class="type">char</span>* s = <span class="string">&quot;itcast&quot;</span>;</span><br><span class="line"><span class="function">string <span class="title">str</span><span class="params">(s)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在c++中存在一个从const char到string的隐式类型转换，却不存在从一个string对象到Cstring的自动类型转换。对于string类型的字符串，可以通过cstr()函数返回string对象对应的C_string.</span><br><span class="line"> 通常，程序员在整个程序中应坚持使用string类对象，直到必须将内容转化为char时才将其转换为C_string.</span><br></pre></td></tr></table></figure></li></ol><p>提示:<br>为了修改string字符串的内容，下标操作符[]和at都会返回字符的引用。但当字符串的内存被重新分配之后，可能发生错误.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">string s = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="type">char</span>&amp; a = s[<span class="number">2</span>];</span><br><span class="line"><span class="type">char</span>&amp; b = s[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">b = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; (<span class="type">int</span>*)s.<span class="built_in">c_str</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;pppppppppppppppppppppppp&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a = &#x27;1&#x27;;</span></span><br><span class="line"><span class="comment">//b = &#x27;2&#x27;;</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; (<span class="type">int</span>*)s.<span class="built_in">c_str</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h3 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h3><h4 id="vector容器基本概念"><a href="#vector容器基本概念" class="headerlink" title="vector容器基本概念"></a>vector容器基本概念</h4><p>vector的数据安排以及操作方式，与array非常相似，两者的唯一差别在于空间的运用的灵活性。Array是静态空间，一旦配置了就不能改变，要换大一点或者小一点的空间，可以，一切琐碎得由自己来，首先配置一块新的空间，然后将旧空间的数据搬往新空间，再释放原来的空间。Vector是动态空间，随着元素的加入，它的内部机制会自动扩充空间以容纳新元素。因此vector的运用对于内存的合理利用与运用的灵活性有很大的帮助，我们再也不必害怕空间不足而一开始就要求一个大块头的array了。</p><h4 id="vector容器常用操作"><a href="#vector容器常用操作" class="headerlink" title="vector容器常用操作"></a>vector容器常用操作</h4><ol><li><p>vector的构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;T&gt; v; <span class="comment">//采用模板实现类实现，默认构造函数</span></span><br><span class="line"><span class="built_in">vector</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());<span class="comment">//将v[begin(), end())区间中的元素拷贝给本身。</span></span><br><span class="line"><span class="built_in">vector</span>(n, elem);<span class="comment">//构造函数将n个elem拷贝给本身。</span></span><br><span class="line"><span class="built_in">vector</span>(<span class="type">const</span> vector &amp;vec);<span class="comment">//拷贝构造函数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例子 使用第二个构造函数 我们可以...</span></span><br><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v1</span><span class="params">(arr, arr + <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="type">int</span>))</span></span>; </span><br></pre></td></tr></table></figure></li><li><p>vector的常用赋值函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">assign</span>(beg, end);<span class="comment">//将[beg, end)区间中的数据拷贝赋值给本身。</span></span><br><span class="line"><span class="built_in">assign</span>(n, elem);<span class="comment">//将n个elem拷贝赋值给本身。</span></span><br><span class="line">vector&amp; <span class="keyword">operator</span>=(<span class="type">const</span> vector  &amp;vec);<span class="comment">//重载等号操作符</span></span><br><span class="line"><span class="built_in">swap</span>(vec);<span class="comment">// 将vec与本身的元素互换。</span></span><br></pre></td></tr></table></figure></li><li><p>vector的大小操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">size</span>();<span class="comment">//返回容器中元素的个数</span></span><br><span class="line"><span class="built_in">empty</span>();<span class="comment">//判断容器是否为空</span></span><br><span class="line"><span class="built_in">resize</span>(<span class="type">int</span> num);<span class="comment">//重新指定容器的长度为num，若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br><span class="line"><span class="built_in">resize</span>(<span class="type">int</span> num, elem);<span class="comment">//重新指定容器的长度为num，若容器变长，则以elem值填充新位置。如果容器变短，则末尾超出容器长&gt;度的元素被删除。</span></span><br><span class="line"><span class="built_in">capacity</span>();<span class="comment">//容器的容量</span></span><br><span class="line"><span class="built_in">reserve</span>(<span class="type">int</span> len);<span class="comment">//容器预留len个元素长度，预留位置不初始化，元素不可访问。</span></span><br></pre></td></tr></table></figure></li><li><p>vector的数据存取操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">at</span>(<span class="type">int</span> idx); <span class="comment">//返回索引idx所指的数据，如果idx越界，抛出out_of_range异常。</span></span><br><span class="line"><span class="keyword">operator</span>[];<span class="comment">//返回索引idx所指的数据，越界时，运行直接报错</span></span><br><span class="line"><span class="built_in">front</span>();<span class="comment">//返回容器中第一个数据元素</span></span><br><span class="line"><span class="built_in">back</span>();<span class="comment">//返回容器中最后一个数据元素</span></span><br></pre></td></tr></table></figure></li><li><p>vector插入和删除操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">insert</span>(const_iterator pos, <span class="type">int</span> count,ele);<span class="comment">//迭代器指向位置pos插入count个元素ele.</span></span><br><span class="line"><span class="built_in">push_back</span>(ele); <span class="comment">//尾部插入元素ele</span></span><br><span class="line"><span class="built_in">pop_back</span>();<span class="comment">//删除最后一个元素</span></span><br><span class="line"><span class="built_in">erase</span>(const_iterator start, const_iterator end);<span class="comment">//删除迭代器从start到end之间的元素</span></span><br><span class="line"><span class="built_in">erase</span>(const_iterator pos);<span class="comment">//删除迭代器指向的元素</span></span><br><span class="line"><span class="built_in">clear</span>();<span class="comment">//删除容器中所有元素</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="vector迭代器"><a href="#vector迭代器" class="headerlink" title="vector迭代器"></a>vector迭代器</h4><p>Vector维护一个线性空间，所以不论元素的型别如何，普通指针都可以作为vector的迭代器，因为vector迭代器所需要的操作行为，如operator, <em>operator-&gt;, operator++, operator–, operator+, operator-, operator+&#x3D;, operator-&#x3D;,</em> 普通指针天生具备。Vector支持随机存取，而普通指针正有着这样的能力。所以vector提供的是随机访问迭代器(Random Access Iterators).</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vector提供了begin()函数，用来返回指向首元素的指针</span></span><br><span class="line"><span class="comment">// vector提供了end()函数，用来返回指向最后一位元素的下一位的指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建容器</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="comment">// 向容器中添加元素</span></span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line"><span class="comment">// 使用迭代器遍历容器</span></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用迭代器倒序遍历容器</span></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">end</span>(); it != v.<span class="built_in">begin</span>();) &#123;</span><br><span class="line">    it--;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代器遍历容器，可以缩写为for循环的写法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>&amp; it : v) &#123;</span><br><span class="line">    cout &lt;&lt; it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在使用迭代器遍历容器的过程中，可以通过指针或者是引用来修改到容器中的值</span></span><br></pre></td></tr></table></figure><h4 id="vector小案例"><a href="#vector小案例" class="headerlink" title="vector小案例"></a>vector小案例</h4><ol><li><p>巧用swap收缩内存空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>;i ++)&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;capacity:&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size:&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时 通过resize改变容器大小</span></span><br><span class="line">v.<span class="built_in">resize</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;capacity:&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size:&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//容量没有改变</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(v).<span class="built_in">swap</span>(v);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;capacity:&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size:&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>reserve预留空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="comment">//预先开辟空间</span></span><br><span class="line">v.<span class="built_in">reserve</span>(<span class="number">100000</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* pStart = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>;i ++)&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="keyword">if</span> (pStart != &amp;v[<span class="number">0</span>])&#123;</span><br><span class="line">pStart = &amp;v[<span class="number">0</span>];</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;count:&quot;</span> &lt;&lt; count &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="deque容器"><a href="#deque容器" class="headerlink" title="deque容器"></a>deque容器</h3><h4 id="deque容器基本概念"><a href="#deque容器基本概念" class="headerlink" title="deque容器基本概念"></a>deque容器基本概念</h4><p>Vector容器是单向开口的连续内存空间，deque则是一种双向开口的连续线性空间。所谓的双向开口，意思是可以在头尾两端分别做元素的插入和删除操作，当然，vector容器也可以在头尾两端插入元素，但是在其头部操作效率奇差，无法被接受。</p><p><img src="https://shawn-qianfeng.oss-cn-beijing.aliyuncs.com/img/202209090019783.png" alt="img"></p><p>deque容器和vector容器最大的差异，一在于deque允许对头端进行元素的插入和删除操作。二在于deque没有容量的概念，因为它是动态的以分段连续空间组合而成，随时可以增加一段新的空间并链接起来，换句话说，像vector那样，”旧空间不足而重新配置一块更大空间，然后复制元素，再释放旧空间”这样的事情在deque身上是不会发生的。也因此，deque没有必须要提供所谓的空间保留(reserve)功能.</p><p>虽然deque容器也提供了Random Access Iterator,但是它的迭代器并不是普通的指针，其复杂度和vector不是一个量级，这当然影响各个运算的层面。因此，除非有必要，我们应该尽可能的使用vector，而不是deque。对deque进行的排序操作，为了最高效率，可将deque先完整的复制到一个vector中，对vector容器进行排序，再复制回deque.</p><h4 id="deque容器常用操作"><a href="#deque容器常用操作" class="headerlink" title="deque容器常用操作"></a>deque容器常用操作</h4><ol><li><p>deque构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;T&gt; deqT;<span class="comment">//默认构造形式</span></span><br><span class="line"><span class="built_in">deque</span>(beg, end);<span class="comment">//构造函数将[beg, end)区间中的元素拷贝给本身。</span></span><br><span class="line"><span class="built_in">deque</span>(n, elem);<span class="comment">//构造函数将n个elem拷贝给本身。</span></span><br><span class="line"><span class="built_in">deque</span>(<span class="type">const</span> deque &amp;deq);<span class="comment">//拷贝构造函数。</span></span><br></pre></td></tr></table></figure></li><li><p>deque赋值操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">assign</span>(beg, end);<span class="comment">//将[beg, end)区间中的数据拷贝赋值给本身。</span></span><br><span class="line"><span class="built_in">assign</span>(n, elem);<span class="comment">//将n个elem拷贝赋值给本身。</span></span><br><span class="line">deque&amp; <span class="keyword">operator</span>=(<span class="type">const</span> deque &amp;deq); <span class="comment">//重载等号操作符 </span></span><br><span class="line"><span class="built_in">swap</span>(deq);<span class="comment">// 将deq与本身的元素互换</span></span><br></pre></td></tr></table></figure></li><li><p>deque大小操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deque.<span class="built_in">size</span>();<span class="comment">//返回容器中元素的个数</span></span><br><span class="line">deque.<span class="built_in">empty</span>();<span class="comment">//判断容器是否为空</span></span><br><span class="line">deque.<span class="built_in">resize</span>(num);<span class="comment">//重新指定容器的长度为num,若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br><span class="line">deque.<span class="built_in">resize</span>(num, elem); <span class="comment">//重新指定容器的长度为num,若容器变长，则以elem值填充新位置,如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br></pre></td></tr></table></figure></li><li><p>deque双端操作和删除</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">push_back</span>(elem);<span class="comment">//在容器尾部添加一个数据</span></span><br><span class="line"><span class="built_in">push_front</span>(elem);<span class="comment">//在容器头部插入一个数据</span></span><br><span class="line"><span class="built_in">pop_back</span>();<span class="comment">//删除容器最后一个数据</span></span><br><span class="line"><span class="built_in">pop_front</span>();<span class="comment">//删除容器第一个数据</span></span><br></pre></td></tr></table></figure></li><li><p>deque数据存取</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">at</span>(idx);<span class="comment">//返回索引idx所指的数据，如果idx越界，抛出out_of_range。</span></span><br><span class="line"><span class="keyword">operator</span>[];<span class="comment">//返回索引idx所指的数据，如果idx越界，不抛出异常，直接出错。</span></span><br><span class="line"><span class="built_in">front</span>();<span class="comment">//返回第一个数据。</span></span><br><span class="line"><span class="built_in">back</span>();<span class="comment">//返回最后一个数据</span></span><br></pre></td></tr></table></figure></li><li><p>deque插入操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">insert</span>(pos,elem);<span class="comment">//在pos位置插入一个elem元素的拷贝，返回新数据的位置。</span></span><br><span class="line"><span class="built_in">insert</span>(pos,n,elem);<span class="comment">//在pos位置插入n个elem数据，无返回值。</span></span><br><span class="line"><span class="built_in">insert</span>(pos,beg,end);<span class="comment">//在pos位置插入[beg,end)区间的数据，无返回值。</span></span><br></pre></td></tr></table></figure></li><li><p>deque删除操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clear</span>();<span class="comment">//移除容器的所有数据</span></span><br><span class="line"><span class="built_in">erase</span>(beg,end);<span class="comment">//删除[beg,end)区间的数据，返回下一个数据的位置。</span></span><br><span class="line"><span class="built_in">erase</span>(pos);<span class="comment">//删除pos位置的数据，返回下一个数据的位置。</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="deque小案例"><a href="#deque小案例" class="headerlink" title="deque小案例"></a>deque小案例</h4><blockquote><p>  有5名选手：选手ABCDE，10个评委分别对每一名选手打分，去除最高分，去除评委中最低分，取平均分。<br>      1. 创建五名选手，放到vector中<br>      2. 遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分打分存到deque容器中<br>      3. sort算法对deque容器中分数排序，pop_back pop_front去除最高和最低分<br>      4. deque容器遍历一遍，累加分数，累加分数&#x2F;d.size()<br>      5. person.score &#x3D; 平均分</p></blockquote><h3 id="stack容器"><a href="#stack容器" class="headerlink" title="stack容器"></a>stack容器</h3><h4 id="stack容器基本概念"><a href="#stack容器基本概念" class="headerlink" title="stack容器基本概念"></a>stack容器基本概念</h4><p>stack是一种先进后出(First In Last Out,FILO)的数据结构，它只有一个出口，形式如图所示。stack容器允许新增元素，移除元素，取得栈顶元素，但是除了最顶端外，没有任何其他方法可以存取stack的其他元素。换言之，stack不允许有遍历行为。<br>有元素推入栈的操作称为:push,将元素推出stack的操作称为pop.</p><img src="https://shawn-qianfeng.oss-cn-beijing.aliyuncs.com/img/202209100051973.png" alt="image-20220910005106859" style="zoom:33%;" /><p>stack是没有迭代器的：</p><p>Stack所有元素的进出都必须符合”先进后出”的条件，只有stack顶端的元素，才有机会被外界取用。Stack不提供遍历功能，也不提供迭代器。</p><h4 id="stack容器常用操作"><a href="#stack容器常用操作" class="headerlink" title="stack容器常用操作"></a>stack容器常用操作</h4><ol><li><p>构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;T&gt; stkT;<span class="comment">//stack采用模板类实现， stack对象的默认构造形式： </span></span><br><span class="line"><span class="built_in">stack</span>(<span class="type">const</span> stack &amp;stk);<span class="comment">//拷贝构造函数</span></span><br></pre></td></tr></table></figure></li><li><p>赋值操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack&amp; <span class="keyword">operator</span>=(<span class="type">const</span> stack &amp;stk);<span class="comment">//重载等号操作符</span></span><br></pre></td></tr></table></figure></li><li><p>数据存取操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">push</span>(elem);<span class="comment">//向栈顶添加元素</span></span><br><span class="line"><span class="built_in">pop</span>();<span class="comment">//从栈顶移除第一个元素</span></span><br><span class="line"><span class="built_in">top</span>();<span class="comment">//返回栈顶元素</span></span><br></pre></td></tr></table></figure></li><li><p>大小操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">empty</span>();<span class="comment">//判断堆栈是否为空</span></span><br><span class="line"><span class="built_in">size</span>();<span class="comment">//返回堆栈的大小</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="queue容器"><a href="#queue容器" class="headerlink" title="queue容器"></a>queue容器</h3><h4 id="queue容器基本概念"><a href="#queue容器基本概念" class="headerlink" title="queue容器基本概念"></a>queue容器基本概念</h4><p>Queue是一种先进先出(First In First Out,FIFO)的数据结构，它有两个出口，queue容器允许从一端新增元素，从另一端移除元素。</p><img src="https://shawn-qianfeng.oss-cn-beijing.aliyuncs.com/img/202209100054997.png" alt="image-20220910005436890" style="zoom:25%;" /><p>queue容器没有迭代器：Queue所有元素的进出都必须符合”先进先出”的条件，只有queue的顶端元素，才有机会被外界取用。Queue不提供遍历功能，也不提供迭代器。</p><h4 id="queue容器常用操作"><a href="#queue容器常用操作" class="headerlink" title="queue容器常用操作"></a>queue容器常用操作</h4><ol><li><p>构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;T&gt; queT;<span class="comment">//queue采用模板类实现，queue对象的默认构造形式：</span></span><br><span class="line"><span class="built_in">queue</span>(<span class="type">const</span> queue &amp;que);<span class="comment">//拷贝构造函数</span></span><br></pre></td></tr></table></figure></li><li><p>存取、插入、删除操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">push</span>(elem);<span class="comment">//往队尾添加元素</span></span><br><span class="line"><span class="built_in">pop</span>();<span class="comment">//从队头移除第一个元素</span></span><br><span class="line"><span class="built_in">back</span>();<span class="comment">//返回最后一个元素</span></span><br><span class="line"><span class="built_in">front</span>();<span class="comment">//返回第一个元素</span></span><br></pre></td></tr></table></figure></li><li><p>赋值操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue&amp; <span class="keyword">operator</span>=(<span class="type">const</span> queue &amp;que);<span class="comment">//重载等号操作符</span></span><br></pre></td></tr></table></figure></li><li><p>大小操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">empty</span>();<span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="built_in">size</span>();<span class="comment">//返回队列的大小</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="list容器"><a href="#list容器" class="headerlink" title="list容器"></a>list容器</h3><h4 id="list容器基本概念"><a href="#list容器基本概念" class="headerlink" title="list容器基本概念"></a>list容器基本概念</h4><p>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。</p><p>相较于vector的连续线性空间，list就显得复杂许多，它的好处是每次插入或者删除一个元素，就是配置或者释放一个元素的空间。因此，list对于空间的运用有绝对的精准，一点也不浪费。而且，对于任何位置的元素插入或元素的移除，list永远是常数时间。</p><p>List和vector是两个最常被使用的容器。</p><p>List容器是一个双向链表。</p><img src="https://shawn-qianfeng.oss-cn-beijing.aliyuncs.com/img/202209100102384.png" alt="image-20220910010227282" style="zoom:25%;" /><p>采用动态存储分配，不会造成内存浪费和溢出</p><p>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素</p><p>链表灵活，但是空间和时间额外耗费较大</p><h4 id="list的迭代器"><a href="#list的迭代器" class="headerlink" title="list的迭代器"></a>list的迭代器</h4><p>List容器不能像vector一样以普通指针作为迭代器，因为其节点不能保证在同一块连续的内存空间上。List迭代器必须有能力指向list的节点，并有能力进行正确的递增、递减、取值、成员存取操作。所谓”list正确的递增，递减、取值、成员取用”是指，递增时指向下一个节点，递减时指向上一个节点，取值时取的是节点的数据值，成员取用时取的是节点的成员。</p><p>由于list是一个双向链表，迭代器必须能够具备前移、后移的能力，所以list容器提供的是Bidirectional Iterators.<br>List有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效。这在vector是不成立的，因为vector的插入操作可能造成记忆体重新配置，导致原有的迭代器全部失效，甚至List元素的删除，也只有被删除的那个元素的迭代器失效，其他迭代器不受任何影响。</p><h4 id="list容器常用操作"><a href="#list容器常用操作" class="headerlink" title="list容器常用操作"></a>list容器常用操作</h4><ol><li><p>构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list&lt;T&gt; lstT;<span class="comment">//list采用采用模板类实现,对象的默认构造形式：</span></span><br><span class="line"><span class="built_in">list</span>(beg,end);<span class="comment">//构造函数将[beg, end)区间中的元素拷贝给本身。</span></span><br><span class="line"><span class="built_in">list</span>(n,elem);<span class="comment">//构造函数将n个elem拷贝给本身。</span></span><br><span class="line"><span class="built_in">list</span>(<span class="type">const</span> list &amp;lst);<span class="comment">//拷贝构造函数。</span></span><br></pre></td></tr></table></figure></li><li><p>元素插入和删除操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">push_back</span>(elem);<span class="comment">//在容器尾部加入一个元素</span></span><br><span class="line"><span class="built_in">pop_back</span>();<span class="comment">//删除容器中最后一个元素</span></span><br><span class="line"><span class="built_in">push_front</span>(elem);<span class="comment">//在容器开头插入一个元素</span></span><br><span class="line"><span class="built_in">pop_front</span>();<span class="comment">//从容器开头移除第一个元素</span></span><br><span class="line"><span class="built_in">insert</span>(pos,elem);<span class="comment">//在pos位置插elem元素的拷贝，返回新数据的位置。</span></span><br><span class="line"><span class="built_in">insert</span>(pos,n,elem);<span class="comment">//在pos位置插入n个elem数据，无返回值。</span></span><br><span class="line"><span class="built_in">insert</span>(pos,beg,end);<span class="comment">//在pos位置插入[beg,end)区间的数据，无返回值。</span></span><br><span class="line"><span class="built_in">clear</span>();<span class="comment">//移除容器的所有数据</span></span><br><span class="line"><span class="built_in">erase</span>(beg,end);<span class="comment">//删除[beg,end)区间的数据，返回下一个数据的位置。</span></span><br><span class="line"><span class="built_in">erase</span>(pos);<span class="comment">//删除pos位置的数据，返回下一个数据的位置。</span></span><br><span class="line"><span class="built_in">remove</span>(elem);<span class="comment">//删除容器中所有与elem值匹配的元素。</span></span><br></pre></td></tr></table></figure></li><li><p>大小操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">size</span>();<span class="comment">//返回容器中元素的个数</span></span><br><span class="line"><span class="built_in">empty</span>();<span class="comment">//判断容器是否为空</span></span><br><span class="line"><span class="built_in">resize</span>(num);<span class="comment">//重新指定容器的长度为num，</span></span><br><span class="line"><span class="comment">// 若容器变长，则以默认值填充新位置。</span></span><br><span class="line"><span class="comment">// 如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">resize</span>(num, elem);<span class="comment">//重新指定容器的长度为num，</span></span><br><span class="line"><span class="comment">// 若容器变长，则以elem值填充新位置。</span></span><br><span class="line"><span class="comment">// 如果容器变短，则末尾超出容器长度的元素被删除。</span></span><br></pre></td></tr></table></figure></li><li><p>赋值操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">assign</span>(beg, end);<span class="comment">//将[beg, end)区间中的数据拷贝赋值给本身。</span></span><br><span class="line"><span class="built_in">assign</span>(n, elem);<span class="comment">//将n个elem拷贝赋值给本身。</span></span><br><span class="line">list&amp; <span class="keyword">operator</span>=(<span class="type">const</span> list &amp;lst);<span class="comment">//重载等号操作符</span></span><br><span class="line"><span class="built_in">swap</span>(lst);<span class="comment">//将lst与本身的元素互换。</span></span><br></pre></td></tr></table></figure></li><li><p>数据存取操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">front</span>();<span class="comment">//返回第一个元素。</span></span><br><span class="line"><span class="built_in">back</span>();<span class="comment">//返回最后一个元素</span></span><br></pre></td></tr></table></figure></li><li><p>反转、排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">reverse</span>();<span class="comment">//反转链表，比如lst包含1,3,5元素，运行此方法后，lst就包含5,3,1元素。</span></span><br><span class="line"><span class="built_in">sort</span>(); <span class="comment">//list排序</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="set-multiset容器"><a href="#set-multiset容器" class="headerlink" title="set&#x2F;multiset容器"></a>set&#x2F;multiset容器</h3><h4 id="set-multiset容器基本概念"><a href="#set-multiset容器基本概念" class="headerlink" title="set&#x2F;multiset容器基本概念"></a>set&#x2F;multiset容器基本概念</h4><p>Set的特性是。所有元素都会根据元素的值自动被排序。Set不允许两个元素有相同的值。</p><p>我们可以通过set的迭代器改变set元素的值吗？不行，因为set元素值就是其值，关系到set元素的排序规则。如果任意改变set元素值，会严重破坏set组织。换句话说，set的iterator是一种const_iterator.</p><p>set拥有和list某些相同的性质，当对容器中的元素进行插入操作或者删除操作的时候，操作之前所有的迭代器，在操作完成之后依然有效，被删除的那个元素的迭代器必然是一个例外。</p><p>multiset特性及用法和set完全相同，唯一的差别在于它允许值重复。set和multiset的底层实现是红黑树，红黑树为平衡二叉树的一种。</p><p>树的简单知识：</p><p>二叉树就是任何节点最多只允许有两个字节点。分别是左子结点和右子节点</p><img src="https://shawn-qianfeng.oss-cn-beijing.aliyuncs.com/img/202209100107605.png" alt="image-20220910010759493" style="zoom:25%;" /><p>二叉树示意图</p><p>二叉搜索树，是指二叉树中的节点按照一定的规则进行排序，使得对二叉树中元素访问更加高效。二叉搜索树的放置规则是：任何节点的元素值一定大于其左子树中的每一个节点的元素值，并且小于其右子树的值。因此从根节点一直向左走，一直到无路可走，即得到最小值，一直向右走，直至无路可走，可得到最大值。那么在二叉搜索树中找到最大元素和最小元素是非常简单的事情。下图为二叉搜索树：</p><img src="https://shawn-qianfeng.oss-cn-beijing.aliyuncs.com/img/202209100108859.png" alt="image-20220910010824753" style="zoom:25%;" /><p>上面我们介绍了二叉搜索树，那么当一个二叉搜索树的左子树和右子树不平衡的时候，那么搜索依据上图表示，搜索9所花费的时间要比搜索17所花费的时间要多，由于我们的输入或者经过我们插入或者删除操作，二叉树失去平衡，造成搜索效率降低。<br>所以我们有了一个平衡二叉树的概念，所谓的平衡不是指的完全平衡。</p><img src="https://shawn-qianfeng.oss-cn-beijing.aliyuncs.com/img/202209100109140.png" alt="image-20220910010900020" style="zoom:25%;" /><h4 id="set-multiset容器常用操作"><a href="#set-multiset容器常用操作" class="headerlink" title="set&#x2F;multiset容器常用操作"></a>set&#x2F;multiset容器常用操作</h4><ol><li><p>构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set&lt;T&gt; st;<span class="comment">//set默认构造函数：</span></span><br><span class="line">mulitset&lt;T&gt; mst; <span class="comment">//multiset默认构造函数: </span></span><br><span class="line"><span class="built_in">set</span>(<span class="type">const</span> set &amp;st);<span class="comment">//拷贝构造函数</span></span><br></pre></td></tr></table></figure></li><li><p>set赋值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set&amp; <span class="keyword">operator</span>=(<span class="type">const</span> set &amp;st);<span class="comment">//重载等号操作符</span></span><br><span class="line"><span class="built_in">swap</span>(st);<span class="comment">//交换两个集合容器</span></span><br></pre></td></tr></table></figure></li><li><p>set大小操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">size</span>();<span class="comment">//返回容器中元素的数目</span></span><br><span class="line"><span class="built_in">empty</span>();<span class="comment">//判断容器是否为空</span></span><br></pre></td></tr></table></figure></li><li><p>插入和删除操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">insert</span>(elem);<span class="comment">//在容器中插入元素。</span></span><br><span class="line"><span class="built_in">clear</span>();<span class="comment">//清除所有元素</span></span><br><span class="line"><span class="built_in">erase</span>(pos);<span class="comment">//删除pos迭代器所指的元素，返回下一个元素的迭代器。</span></span><br><span class="line"><span class="built_in">erase</span>(beg, end);<span class="comment">//删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</span></span><br><span class="line"><span class="built_in">erase</span>(elem);<span class="comment">//删除容器中值为elem的元素。</span></span><br></pre></td></tr></table></figure></li><li><p>查找操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">find</span>(key);<span class="comment">//查找键key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</span></span><br><span class="line"><span class="built_in">count</span>(key);<span class="comment">//查找键key的元素个数</span></span><br><span class="line"><span class="built_in">lower_bound</span>(keyElem);<span class="comment">//返回第一个key&gt;=keyElem元素的迭代器。</span></span><br><span class="line"><span class="built_in">upper_bound</span>(keyElem);<span class="comment">//返回第一个key&gt;keyElem元素的迭代器。</span></span><br><span class="line"><span class="built_in">equal_range</span>(keyElem);<span class="comment">//返回容器中key与keyElem相等的上下限的两个迭代器。</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="对组"><a href="#对组" class="headerlink" title="对组"></a>对组</h4><p>对组(pair)将一对值组合成一个值，这一对值可以具有不同的数据类型，两个值可以分别用pair的两个公有属性first和second访问。</p><p>类模板：template &lt;class T1, class T2&gt; struct pair.</p><p>如何创建对组?</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种方法创建一个对组</span></span><br><span class="line"><span class="function">pair&lt;string, <span class="type">int</span>&gt; <span class="title">pair1</span><span class="params">(string(<span class="string">&quot;name&quot;</span>), <span class="number">20</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; pair1.first &lt;&lt; endl; <span class="comment">//访问pair第一个值</span></span><br><span class="line">cout &lt;&lt; pair1.second &lt;&lt; endl;<span class="comment">//访问pair第二个值</span></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">pair&lt;string, <span class="type">int</span>&gt; pair2 = <span class="built_in">make_pair</span>(<span class="string">&quot;name&quot;</span>, <span class="number">30</span>);</span><br><span class="line">cout &lt;&lt; pair2.first &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; pair2.second &lt;&lt; endl;</span><br><span class="line"><span class="comment">//pair=赋值</span></span><br><span class="line">pair&lt;string, <span class="type">int</span>&gt; pair3 = pair2;</span><br><span class="line">cout &lt;&lt; pair3.first &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; pair3.second &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h3 id="map-multimap容器"><a href="#map-multimap容器" class="headerlink" title="map&#x2F;multimap容器"></a>map&#x2F;multimap容器</h3><h4 id="map-multimap基本概念"><a href="#map-multimap基本概念" class="headerlink" title="map&#x2F;multimap基本概念"></a>map&#x2F;multimap基本概念</h4><p>Map的特性是，所有元素都会根据元素的键值自动排序。Map所有的元素都是pair,同时拥有实值和键值，pair的第一元素被视为键值，第二元素被视为实值，map不允许两个元素有相同的键值。</p><p>我们可以通过map的迭代器改变map的键值吗？答案是不行，因为map的键值关系到map元素的排列规则，任意改变map键值将会严重破坏map组织。如果想要修改元素的实值，那么是可以的。</p><p>Map和list拥有相同的某些性质，当对它的容器元素进行新增操作或者删除操作时，操作之前的所有迭代器，在操作完成之后依然有效，当然被删除的那个元素的迭代器必然是个例外。</p><p>Multimap和map的操作类似，唯一区别multimap键值可重复。</p><p>Map和multimap都是以红黑树为底层实现机制。</p><h4 id="map-multimap常用操作"><a href="#map-multimap常用操作" class="headerlink" title="map&#x2F;multimap常用操作"></a>map&#x2F;multimap常用操作</h4><ol><li><p>构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map&lt;T1, T2&gt; mapTT;<span class="comment">//map默认构造函数: </span></span><br><span class="line"><span class="built_in">map</span>(<span class="type">const</span> map &amp;mp);<span class="comment">//拷贝构造函数</span></span><br></pre></td></tr></table></figure></li><li><p>赋值操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map&amp; <span class="keyword">operator</span>=(<span class="type">const</span> map &amp;mp);<span class="comment">//重载等号操作符</span></span><br><span class="line"><span class="built_in">swap</span>(mp);<span class="comment">//交换两个集合容器</span></span><br></pre></td></tr></table></figure></li><li><p>大小操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">size</span>();<span class="comment">//返回容器中元素的数目</span></span><br><span class="line"><span class="built_in">empty</span>();<span class="comment">//判断容器是否为空</span></span><br></pre></td></tr></table></figure></li><li><p>插入操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">map.<span class="built_in">insert</span>(...); <span class="comment">//往容器插入元素，返回pair&lt;iterator,bool&gt;</span></span><br><span class="line">map&lt;<span class="type">int</span>, string&gt; mapStu;</span><br><span class="line"><span class="comment">// 第一种 通过pair的方式插入对象</span></span><br><span class="line">mapStu.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, string&gt;(<span class="number">3</span>, <span class="string">&quot;小张&quot;</span>));</span><br><span class="line"><span class="comment">// 第二种 通过pair的方式插入对象</span></span><br><span class="line">mapStu.<span class="built_in">inset</span>(<span class="built_in">make_pair</span>(<span class="number">-1</span>, <span class="string">&quot;校长&quot;</span>));</span><br><span class="line"><span class="comment">// 第三种 通过value_type的方式插入对象</span></span><br><span class="line">mapStu.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>, string&gt;::<span class="built_in">value_type</span>(<span class="number">1</span>, <span class="string">&quot;小李&quot;</span>));</span><br><span class="line"><span class="comment">// 第四种 通过数组的方式插入值</span></span><br><span class="line">mapStu[<span class="number">3</span>] = <span class="string">&quot;小刘&quot;</span>;</span><br><span class="line">mapStu[<span class="number">5</span>] = <span class="string">&quot;小王&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clear</span>();<span class="comment">//删除所有元素</span></span><br><span class="line"><span class="built_in">erase</span>(pos);<span class="comment">//删除pos迭代器所指的元素，返回下一个元素的迭代器。</span></span><br><span class="line"><span class="built_in">erase</span>(beg,end);<span class="comment">//删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</span></span><br><span class="line"><span class="built_in">erase</span>(keyElem);<span class="comment">//删除容器中key为keyElem的对组。</span></span><br></pre></td></tr></table></figure></li><li><p>查找操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">find</span>(key);<span class="comment">//查找键key是否存在,若存在，返回该键的元素的迭代器；/若不存在，返回map.end();</span></span><br><span class="line"><span class="built_in">count</span>(keyElem);<span class="comment">//返回容器中key为keyElem的对组个数。对map来说，要么是0，要么是1。对multimap来说，值可能大于1。</span></span><br><span class="line"><span class="built_in">lower_bound</span>(keyElem);<span class="comment">//返回第一个key&gt;=keyElem元素的迭代器。</span></span><br><span class="line"><span class="built_in">upper_bound</span>(keyElem);<span class="comment">//返回第一个key&gt;keyElem元素的迭代器。</span></span><br><span class="line"><span class="built_in">equal_range</span>(keyElem);<span class="comment">//返回容器中key与keyElem相等的上下限的两个迭代器。</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="multimap案例"><a href="#multimap案例" class="headerlink" title="multimap案例"></a>multimap案例</h4><p>公司今天招聘了5个员工，5名员工进入公司之后，需要指派员工在那个部门工作</p><p>人员信息有: 姓名 年龄 电话 工资等组成</p><p>通过Multimap进行信息的插入 保存 显示</p><p>分部门显示员工信息 显示全部员工信息</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//multimap 案例</span></span><br><span class="line"><span class="comment">//公司今天招聘了 5 个员工，5 名员工进入公司之后，需要指派员工在那个部门工作</span></span><br><span class="line"><span class="comment">//人员信息有: 姓名 年龄 电话 工资等组成</span></span><br><span class="line"><span class="comment">//通过 Multimap 进行信息的插入 保存 显示</span></span><br><span class="line"><span class="comment">//分部门显示员工信息 显示全部员工信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SALE_DEPATMENT 1 <span class="comment">//销售部门</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEVELOP_DEPATMENT 2 <span class="comment">//研发部门</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FINACIAL_DEPATMENT 3 <span class="comment">//财务部门</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL_DEPATMENT 4 <span class="comment">//所有部门</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//员工类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string name; <span class="comment">//员工姓名</span></span><br><span class="line"><span class="type">int</span> age; <span class="comment">//员工年龄</span></span><br><span class="line"><span class="type">double</span> salary; <span class="comment">//员工工资</span></span><br><span class="line">string tele; <span class="comment">//员工电话</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建5个员工</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreatePerson</span><span class="params">(vector&lt;person&gt;&amp; vlist)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">string seed = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">person p;</span><br><span class="line">p.name = <span class="string">&quot;员工&quot;</span>;</span><br><span class="line">p.name += seed[i];</span><br><span class="line">p.age = <span class="built_in">rand</span>() % <span class="number">30</span> + <span class="number">20</span>;</span><br><span class="line">p.salary = <span class="built_in">rand</span>() % <span class="number">20000</span> + <span class="number">10000</span>;</span><br><span class="line">p.tele = <span class="string">&quot;010-8888888&quot;</span>;</span><br><span class="line">vlist.<span class="built_in">push_back</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5名员工分配到不同的部门</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PersonByGroup</span><span class="params">(vector&lt;person&gt;&amp; vlist, multimap&lt;<span class="type">int</span>, person&gt;&amp; plist)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> operate = <span class="number">-1</span>; <span class="comment">//用户的操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (vector&lt;person&gt;::iterator it = vlist.<span class="built_in">begin</span>(); it != vlist.<span class="built_in">end</span>(); it++)&#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;当前员工信息:&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class="string">&quot; 年龄:&quot;</span> &lt;&lt; it-&gt;age &lt;&lt; <span class="string">&quot; 工资:&quot;</span> &lt;&lt; it-&gt;salary &lt;&lt; <span class="string">&quot; 电话：&quot;</span> &lt;&lt; it-&gt;tele &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请对该员工进行部门分配(1 销售部门, 2 研发部门, 3 财务部门):&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;operate);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (operate == SALE_DEPATMENT)&#123;  <span class="comment">//将该员工加入到销售部门</span></span><br><span class="line">plist.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(SALE_DEPATMENT, *it));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (operate == DEVELOP_DEPATMENT)&#123;</span><br><span class="line">plist.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(DEVELOP_DEPATMENT, *it));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (operate == FINACIAL_DEPATMENT)&#123;</span><br><span class="line">plist.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(FINACIAL_DEPATMENT, *it));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;您的输入有误，请重新输入(1 销售部门, 2 研发部门, 3 财务部门):&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;operate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;员工部门分配完毕!&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;***********************************************************&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印员工信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printList</span><span class="params">(multimap&lt;<span class="type">int</span>, person&gt;&amp; plist, <span class="type">int</span> myoperate)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (myoperate == ALL_DEPATMENT)&#123;</span><br><span class="line"><span class="keyword">for</span> (multimap&lt;<span class="type">int</span>, person&gt;::iterator it = plist.<span class="built_in">begin</span>(); it != plist.<span class="built_in">end</span>(); it++)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; it-&gt;second.name &lt;&lt; <span class="string">&quot; 年龄:&quot;</span> &lt;&lt; it-&gt;second.age &lt;&lt; <span class="string">&quot; 工资:&quot;</span> &lt;&lt; it-&gt;second.salary &lt;&lt; <span class="string">&quot; 电话：&quot;</span> &lt;&lt; it-&gt;second.tele &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">multimap&lt;<span class="type">int</span>, person&gt;::iterator it = plist.<span class="built_in">find</span>(myoperate);</span><br><span class="line"><span class="type">int</span> depatCount = plist.<span class="built_in">count</span>(myoperate);</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (it != plist.<span class="built_in">end</span>())&#123;</span><br><span class="line"><span class="keyword">while</span> (it != plist.<span class="built_in">end</span>() &amp;&amp; num &lt; depatCount)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; it-&gt;second.name &lt;&lt; <span class="string">&quot; 年龄:&quot;</span> &lt;&lt; it-&gt;second.age &lt;&lt; <span class="string">&quot; 工资:&quot;</span> &lt;&lt; it-&gt;second.salary &lt;&lt; <span class="string">&quot; 电话：&quot;</span> &lt;&lt; it-&gt;second.tele &lt;&lt; endl;</span><br><span class="line">it++;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据用户操作显示不同部门的人员列表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowPersonList</span><span class="params">(multimap&lt;<span class="type">int</span>, person&gt;&amp; plist, <span class="type">int</span> myoperate)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (myoperate)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> SALE_DEPATMENT:</span><br><span class="line"><span class="built_in">printList</span>(plist, SALE_DEPATMENT);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DEVELOP_DEPATMENT:</span><br><span class="line"><span class="built_in">printList</span>(plist, DEVELOP_DEPATMENT);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> FINACIAL_DEPATMENT:</span><br><span class="line"><span class="built_in">printList</span>(plist, FINACIAL_DEPATMENT);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ALL_DEPATMENT:</span><br><span class="line"><span class="built_in">printList</span>(plist, ALL_DEPATMENT);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户操作菜单</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PersonMenue</span><span class="params">(multimap&lt;<span class="type">int</span>, person&gt;&amp; plist)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> flag = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> isexit = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入您的操作((1 销售部门, 2 研发部门, 3 财务部门, 4 所有部门, 0退出)：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> SALE_DEPATMENT:</span><br><span class="line"><span class="built_in">ShowPersonList</span>(plist, SALE_DEPATMENT);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DEVELOP_DEPATMENT:</span><br><span class="line"><span class="built_in">ShowPersonList</span>(plist, DEVELOP_DEPATMENT);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> FINACIAL_DEPATMENT:</span><br><span class="line"><span class="built_in">ShowPersonList</span>(plist, FINACIAL_DEPATMENT);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ALL_DEPATMENT:</span><br><span class="line"><span class="built_in">ShowPersonList</span>(plist, ALL_DEPATMENT);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">isexit = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;您的输入有误，请重新输入!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isexit == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;person&gt;  vlist; <span class="comment">//创建的5个员工 未分组</span></span><br><span class="line">multimap&lt;<span class="type">int</span>, person&gt; plist; <span class="comment">//保存分组后员工信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建5个员工</span></span><br><span class="line"><span class="built_in">CreatePerson</span>(vlist);</span><br><span class="line"><span class="comment">//5名员工分配到不同的部门</span></span><br><span class="line"><span class="built_in">PersonByGroup</span>(vlist, plist);</span><br><span class="line"><span class="comment">//根据用户输入显示不同部门员工信息列表 或者 显示全部员工的信息列表</span></span><br><span class="line"><span class="built_in">PersonMenue</span>(plist);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h2><h3 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h3><p>重载函数调用操作符的类，其对象常称为函数对象（function object），即它们是行为类似函数的对象，也叫仿函数(functor),其实就是重载“()”操作符，使得类对象可以像函数那样调用。</p><p>注意:</p><p>1.函数对象(仿函数)是一个类，不是一个函数。</p><p>2.函数对象(仿函数)重载了”() ”操作符使得它可以像函数一样调用。</p><p>分类:假定某个类有一个重载的operator()，而且重载的operator()要求获取一个参数，我们就将这个类称为“一元仿函数”（unary functor）；相反，如果重载的operator()要求获取两个参数，就将这个类称为“二元仿函数”（binary functor）。<br>函数对象的作用主要是什么？STL提供的算法往往都有两个版本，其中一个版本表现出最常用的某种运算，另一版本则允许用户通过template参数的形式来指定所要采取的策略。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数对象是重载了函数调用符号的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPrint</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">MyPrint</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_Num = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m_Num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">m_Num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数对象</span></span><br><span class="line"><span class="comment">//重载了()操作符的类实例化的对象，可以像普通函数那样调用,可以有参数 ，可以有返回值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyPrint myPrint;</span><br><span class="line"><span class="built_in">myPrint</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数对象超出了普通函数的概念，可以保存函数的调用状态</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyPrint myPrint;</span><br><span class="line"><span class="built_in">myPrint</span>(<span class="number">20</span>);</span><br><span class="line"><span class="built_in">myPrint</span>(<span class="number">20</span>);</span><br><span class="line"><span class="built_in">myPrint</span>(<span class="number">20</span>);</span><br><span class="line">cout &lt;&lt; myPrint.m_Num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doBusiness</span><span class="params">(MyPrint print,<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">print</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数对象作为参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//参数1：匿名函数对象</span></span><br><span class="line"><span class="built_in">doBusiness</span>(<span class="built_in">MyPrint</span>(),<span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="谓语"><a href="#谓语" class="headerlink" title="谓语"></a>谓语</h3><p>谓词是指普通函数或重载的operator()返回值是bool类型的函数对象(仿函数)。如果operator接受一个参数，那么叫做一元谓词,如果接受两个参数，那么叫做二元谓词，谓词可作为一个判断式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GreaterThenFive</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> num &gt; <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//一元谓词</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>;i ++)</span><br><span class="line">&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> vector&lt;<span class="type">int</span>&gt;::iterator it =  <span class="built_in">find_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">GreaterThenFive</span>());</span><br><span class="line"> <span class="keyword">if</span> (it == v.<span class="built_in">end</span>())</span><br><span class="line"> &#123;</span><br><span class="line"> cout &lt;&lt; <span class="string">&quot;没有找到&quot;</span> &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line"> cout &lt;&lt; <span class="string">&quot;找到了: &quot;</span> &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二元谓词</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCompare</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1 &gt; num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">90</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认从小到大</span></span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>();it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//使用函数对象改变算法策略，排序从大到小</span></span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(),<span class="built_in">MyCompare</span>());</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内建函数对象"><a href="#内建函数对象" class="headerlink" title="内建函数对象"></a>内建函数对象</h3><p>STL内建了一些函数对象。分为:算数类函数对象,关系运算类函数对象，逻辑运算类仿函数。这些仿函数所产生的对象，用法和一般函数完全相同，当然我们还可以产生无名的临时对象来履行函数功能。使用内建函数对象，需要引入头文件 #include。</p><p>6个算数类函数对象,除了negate是一元运算，其他都是二元运算。</p><p><em><strong>template</strong></em>&lt;<em><strong>*class*</strong>* T&gt; T plus<T>**&#x2F;&#x2F;加法仿函数</em>*<br><em><strong>template*</strong></em>&lt;<em><strong>*class*</strong>* T&gt; T minus<T>**&#x2F;&#x2F;减法仿函数</em>*<br><em><strong>template*</strong></em>&lt;<em><strong>*class*</strong>* T&gt; T multiplies<T>**&#x2F;&#x2F;乘法仿函数</em>*<br><em><strong>*template*</strong></em>&lt;<em><strong>*class*</strong>* T&gt; T divides<T>**&#x2F;&#x2F;除法仿函数</em>*<br><em><strong>*template*</strong></em>&lt;<em><strong>*class*</strong>* T&gt; T modulus<T>**&#x2F;&#x2F;取模仿函数</em>*<br><em><strong>*template*</strong></em>&lt;<em><strong>*class*</strong>* T&gt; T negate<T>**&#x2F;&#x2F;取反仿函数</em>*</p><p>6个关系运算类函数对象,每一种都是二元运算。</p><p><em><strong>*template*</strong></em>&lt;<em><strong>*class*</strong>* T&gt; bool equal_to<T>**&#x2F;&#x2F;等于</em>*<br><em><strong>*template*</strong></em>&lt;<em><strong>*class*</strong>* T&gt; bool not_equal_to<T>**&#x2F;&#x2F;不等于</em>*<br><em><strong>*template*</strong></em>&lt;<em><strong>*class*</strong>* T&gt; bool greater<T>**&#x2F;&#x2F;大于</em>*<br><em><strong>*template*</strong></em>&lt;<em><strong>*class*</strong>* T&gt; bool greater_equal<T>**&#x2F;&#x2F;大于等于</em>*<br><em><strong>*template*</strong></em>&lt;<em><strong>*class*</strong>* T&gt; bool less<T>**&#x2F;&#x2F;小于</em>*<br><em><strong>*template*</strong></em>&lt;<em><strong>*class*</strong>* T&gt; bool less_equal<T>**&#x2F;&#x2F;小于等于</em>*</p><p>逻辑运算类运算函数,not为一元运算，其余为二元运算。</p><p><em><strong>*template*</strong></em>&lt;<em><strong>*class*</strong>* T&gt; bool logical_and<T>**&#x2F;&#x2F;逻辑与</em>*<br><em><strong>*template*</strong></em>&lt;<em><strong>*class*</strong>* T&gt; bool logical_or<T>**&#x2F;&#x2F;逻辑或</em>*<br><em><strong>*template*</strong></em>&lt;<em><strong>*class*</strong>* T&gt; bool logical_not<T>**&#x2F;&#x2F;逻辑非</em>*</p><p>内建函数对象举例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取反仿函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">negate&lt;<span class="type">int</span>&gt; n;</span><br><span class="line">cout &lt;&lt; <span class="built_in">n</span>(<span class="number">50</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加法仿函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">plus&lt;<span class="type">int</span>&gt; p;</span><br><span class="line">cout &lt;&lt; <span class="built_in">p</span>(<span class="number">10</span>, <span class="number">20</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//大于仿函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() % <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数对象适配器"><a href="#函数对象适配器" class="headerlink" title="函数对象适配器"></a>函数对象适配器</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数适配器bind1st bind2nd</span></span><br><span class="line"><span class="comment">//现在我有这个需求 在遍历容器的时候，我希望将容器中的值全部加上100之后显示出来，怎么做？</span></span><br><span class="line"><span class="comment">//我们直接给函数对象绑定参数 编译阶段就会报错</span></span><br><span class="line"><span class="comment">//for_each(v.begin(), v.end(), bind2nd(myprint(),100));</span></span><br><span class="line"><span class="comment">//如果我们想使用绑定适配器,需要我们自己的函数对象继承binary_function 或者 unary_function</span></span><br><span class="line"><span class="comment">//根据我们函数对象是一元函数对象 还是二元函数对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPrint</span> :<span class="keyword">public</span> binary_function&lt;<span class="type">int</span>,<span class="type">int</span>,<span class="type">void</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1 = : &quot;</span> &lt;&lt; v1 &lt;&lt; <span class="string">&quot; v2 = :&quot;</span> &lt;&lt;v2  &lt;&lt; <span class="string">&quot; v1+v2 = :&quot;</span> &lt;&lt; (v1 + v2) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//1、函数适配器</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入起始值：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"></span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">bind1st</span>(<span class="built_in">MyPrint</span>(), x));</span><br><span class="line"><span class="comment">//for_each(v.begin(), v.end(), bind2nd( MyPrint(),x ));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//总结：  bind1st和bind2nd区别?</span></span><br><span class="line"><span class="comment">//bind1st ： 将参数绑定为函数对象的第一个参数</span></span><br><span class="line"><span class="comment">//bind2nd ： 将参数绑定为函数对象的第二个参数</span></span><br><span class="line"><span class="comment">//bind1st bind2nd将二元函数对象转为一元函数对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GreaterThenFive</span>:<span class="keyword">public</span> unary_function&lt;<span class="type">int</span>,<span class="type">bool</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span><span class="params">(<span class="type">int</span> v)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> v &gt; <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、取反适配器</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector &lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vector&lt;int&gt;::iterator it =  find_if(v.begin(), v.end(), GreaterThenFive()); //返回第一个大于5的迭代器</span></span><br><span class="line"><span class="comment">//vector&lt;int&gt;::iterator it = find_if(v.begin(), v.end(),  not1(GreaterThenFive())); //返回第一个小于5迭代器</span></span><br><span class="line"><span class="comment">//自定义输入</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">find_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">not1</span> ( <span class="built_in">bind2nd</span>(<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;(),<span class="number">5</span>)));</span><br><span class="line"><span class="keyword">if</span> (it == v.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;没找到&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找到&quot;</span> &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序  二元函数对象</span></span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">not2</span>(<span class="built_in">less</span>&lt;<span class="type">int</span>&gt;()));</span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), [](<span class="type">int</span> val)&#123;cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>; &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//not1 对一元函数对象取反</span></span><br><span class="line"><span class="comment">//not2 对二元函数对象取反</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyPrint03</span><span class="params">(<span class="type">int</span> v,<span class="type">int</span> v2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; v + v2&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、函数指针适配器   ptr_fun</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector &lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ptr_fun( )把一个普通的函数指针适配成函数对象</span></span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">bind2nd</span>( <span class="built_in">ptr_fun</span>( MyPrint03 ), <span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、成员函数适配器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(string name, <span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">m_Name = name;</span><br><span class="line">m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;成员函数:&quot;</span> &lt;&lt; <span class="string">&quot;Name:&quot;</span> &lt;&lt; m_Name &lt;&lt; <span class="string">&quot; Age:&quot;</span> &lt;&lt; m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Plus100</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_Age += <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string m_Name;</span><br><span class="line"><span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyPrint04</span><span class="params">(Person &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt;  p.m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector &lt;Person&gt;v;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;bbb&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;ccc&quot;</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;ddd&quot;</span>, <span class="number">40</span>)</span></span>;</span><br><span class="line">v.<span class="built_in">push_back</span>(p1);</span><br><span class="line">v.<span class="built_in">push_back</span>(p2);</span><br><span class="line">v.<span class="built_in">push_back</span>(p3);</span><br><span class="line">v.<span class="built_in">push_back</span>(p4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//for_each(v.begin(), v.end(), MyPrint04);</span></span><br><span class="line"><span class="comment">//利用 mem_fun_ref 将Person内部成员函数适配</span></span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">mem_fun_ref</span>(&amp;Person::ShowPerson));</span><br><span class="line"><span class="comment">// for_each(v.begin(), v.end(), mem_fun_ref(&amp;Person::Plus100));</span></span><br><span class="line"><span class="comment">// for_each(v.begin(), v.end(), mem_fun_ref(&amp;Person::ShowPerson));</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;Person*&gt; v1;</span><br><span class="line"><span class="comment">//创建数据</span></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;bbb&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;ccc&quot;</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;ddd&quot;</span>, <span class="number">40</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">v1.<span class="built_in">push_back</span>(&amp;p1);</span><br><span class="line">v1.<span class="built_in">push_back</span>(&amp;p2);</span><br><span class="line">v1.<span class="built_in">push_back</span>(&amp;p3);</span><br><span class="line">v1.<span class="built_in">push_back</span>(&amp;p4);</span><br><span class="line"></span><br><span class="line">for_each(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), <span class="built_in">mem_fun</span>(&amp;Person::ShowPerson));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果容器存放的是对象指针，  那么用mem_fun</span></span><br><span class="line"><span class="comment">//如果容器中存放的是对象实体，那么用mem_fun_ref</span></span><br></pre></td></tr></table></figure><h3 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h3><p>算法主要是由头文件组成。</p><p>是所有STL头文件中最大的一个,其中常用的功能涉及到比较，交换，查找,遍历，复制，修改，反转，排序，合并等…</p><p>体积很小，只包括在几个序列容器上进行的简单运算的模板函数.</p><p>定义了一些模板类,用以声明函数对象。</p><h3 id="常用遍历算法"><a href="#常用遍历算法" class="headerlink" title="常用遍历算法"></a>常用遍历算法</h3><h4 id="for-each遍历算法"><a href="#for-each遍历算法" class="headerlink" title="for_each遍历算法"></a>for_each遍历算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    遍历算法 遍历容器元素</span></span><br><span class="line"><span class="comment">@param beg 开始迭代器</span></span><br><span class="line"><span class="comment">@param end 结束迭代器</span></span><br><span class="line"><span class="comment">@param _callback  函数回调或者函数对象</span></span><br><span class="line"><span class="comment">@return 函数对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">for_each(iterator beg, iterator end, _callback);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*template&lt;class _InIt,class _Fn1&gt; inline</span></span><br><span class="line"><span class="comment">void for_each(_InIt _First, _InIt _Last, _Fn1 _Func)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">for (; _First != _Last; ++_First)</span></span><br><span class="line"><span class="comment">_Func(*_First);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//普通函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print01</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数对象</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">print001</span>&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for_each算法基本用法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历算法</span></span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), print01);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">print001</span>());</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">print02</span>&#123;</span><br><span class="line"><span class="built_in">print02</span>()&#123;</span><br><span class="line">mCount = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">mCount++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mCount;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for_each返回值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print02 p = for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">print02</span>());</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p.mCount &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">print03</span> : <span class="keyword">public</span> binary_function&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">void</span>&gt;&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val,<span class="type">int</span> bindParam)</span> <span class="type">const</span></span>&#123;</span><br><span class="line">cout &lt;&lt; val + bindParam &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for_each绑定参数输出</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">bind2nd</span>(<span class="built_in">print03</span>(),<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="transform算法"><a href="#transform算法" class="headerlink" title="transform算法"></a>transform算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">transform算法 将指定容器区间元素搬运到另一容器中</span></span><br><span class="line"><span class="comment">注意 : transform 不会给目标容器分配内存，所以需要我们提前分配好内存</span></span><br><span class="line"><span class="comment">@param beg1 源容器开始迭代器</span></span><br><span class="line"><span class="comment">@param end1 源容器结束迭代器</span></span><br><span class="line"><span class="comment">@param beg2 目标容器开始迭代器</span></span><br><span class="line"><span class="comment">@param _cakkback 回调函数或者函数对象</span></span><br><span class="line"><span class="comment">@return 返回目标容器迭代器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">transform</span>(iterator beg1, iterator end1, iterator beg2, _callbakc);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//transform 将一个容器中的值搬运到另一个容器中</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">template&lt;class _InIt, class _OutIt, class _Fn1&gt; inline </span></span><br><span class="line"><span class="comment">_OutIt _Transform(_InIt _First, _InIt _Last,_OutIt _Dest, _Fn1 _Func)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for (; _First != _Last; ++_First, ++_Dest)</span></span><br><span class="line"><span class="comment">*_Dest = _Func(*_First);</span></span><br><span class="line"><span class="comment">return (_Dest);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">template&lt;class _InIt1,class _InIt2,class _OutIt,class _Fn2&gt; inline</span></span><br><span class="line"><span class="comment">_OutIt _Transform(_InIt1 _First1, _InIt1 _Last1,_InIt2 _First2, _OutIt _Dest, _Fn2 _Func)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">for (; _First1 != _Last1; ++_First1, ++_First2, ++_Dest)</span></span><br><span class="line"><span class="comment">*_Dest = _Func(*_First1, *_First2);</span></span><br><span class="line"><span class="comment">return (_Dest);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">transformTest01</span>&#123;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> val + <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">print01</span>&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vSource;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>;i ++)&#123;</span><br><span class="line">vSource.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//目标容器</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vTarget;</span><br><span class="line"><span class="comment">//给vTarget开辟空间</span></span><br><span class="line">vTarget.<span class="built_in">resize</span>(vSource.<span class="built_in">size</span>());</span><br><span class="line"><span class="comment">//将vSource中的元素搬运到vTarget</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">transform</span>(vSource.<span class="built_in">begin</span>(), vSource.<span class="built_in">end</span>(), vTarget.<span class="built_in">begin</span>(), <span class="built_in">transformTest01</span>());</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line">for_each(vTarget.<span class="built_in">begin</span>(), vTarget.<span class="built_in">end</span>(), <span class="built_in">print01</span>()); cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将容器1和容器2中的元素相加放入到第三个容器中</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">transformTest02</span>&#123;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> v1 + v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vSource1;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vSource2;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">vSource1.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//目标容器</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vTarget;</span><br><span class="line"><span class="comment">//给vTarget开辟空间</span></span><br><span class="line">vTarget.<span class="built_in">resize</span>(vSource1.<span class="built_in">size</span>());</span><br><span class="line"><span class="built_in">transform</span>(vSource1.<span class="built_in">begin</span>(), vSource1.<span class="built_in">end</span>(), vSource2.<span class="built_in">begin</span>(),vTarget.<span class="built_in">begin</span>(), <span class="built_in">transformTest02</span>());</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line">for_each(vTarget.<span class="built_in">begin</span>(), vTarget.<span class="built_in">end</span>(), <span class="built_in">print01</span>()); cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用查找算法"><a href="#常用查找算法" class="headerlink" title="常用查找算法"></a>常用查找算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">find算法 查找元素</span></span><br><span class="line"><span class="comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="comment">@param value 查找的元素</span></span><br><span class="line"><span class="comment">@return 返回查找元素的位置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">find</span>(iterator beg, iterator end, value)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">find_if算法 条件查找</span></span><br><span class="line"><span class="comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="comment">@param  callback 回调函数或者谓词(返回bool类型的函数对象)</span></span><br><span class="line"><span class="comment">@return bool 查找返回true 否则false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">find_if</span>(iterator beg, iterator end, _callback);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">adjacent_find算法 查找相邻重复元素</span></span><br><span class="line"><span class="comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="comment">@param  _callback 回调函数或者谓词(返回bool类型的函数对象)</span></span><br><span class="line"><span class="comment">@return 返回相邻元素的第一个位置的迭代器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">adjacent_find</span>(iterator beg, iterator end, _callback);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">binary_search算法 二分查找法</span></span><br><span class="line"><span class="comment">注意: 在无序序列中不可用</span></span><br><span class="line"><span class="comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="comment">@param value 查找的元素</span></span><br><span class="line"><span class="comment">@return bool 查找返回true 否则false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">binary_search</span><span class="params">(iterator beg, iterator end, value)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">count算法 统计元素出现次数</span></span><br><span class="line"><span class="comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="comment">@param  value回调函数或者谓词(返回bool类型的函数对象)</span></span><br><span class="line"><span class="comment">@return int返回元素个数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">count</span>(iterator beg, iterator end, value);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">count_if算法 统计元素出现次数</span></span><br><span class="line"><span class="comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="comment">@param  callback 回调函数或者谓词(返回bool类型的函数对象)</span></span><br><span class="line"><span class="comment">@return int返回元素个数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">count_if</span>(iterator beg, iterator end, _callback);</span><br></pre></td></tr></table></figure><h3 id="常用排序算法"><a href="#常用排序算法" class="headerlink" title="常用排序算法"></a>常用排序算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">merge算法 容器元素合并，并存储到另一容器中</span></span><br><span class="line"><span class="comment">注意:两个容器必须是有序的</span></span><br><span class="line"><span class="comment">@param beg1 容器1开始迭代器</span></span><br><span class="line"><span class="comment">@param end1 容器1结束迭代器</span></span><br><span class="line"><span class="comment">@param beg2 容器2开始迭代器</span></span><br><span class="line"><span class="comment">@param end2 容器2结束迭代器</span></span><br><span class="line"><span class="comment">@param dest  目标容器开始迭代器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">merge</span>(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sort算法 容器元素排序</span></span><br><span class="line"><span class="comment">@param beg 容器1开始迭代器</span></span><br><span class="line"><span class="comment">@param end 容器1结束迭代器</span></span><br><span class="line"><span class="comment">@param _callback 回调函数或者谓词(返回bool类型的函数对象)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">sort</span>(iterator beg, iterator end, _callback)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">random_shuffle算法 对指定范围内的元素随机调整次序</span></span><br><span class="line"><span class="comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">random_shuffle</span>(iterator beg, iterator end)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">reverse算法 反转指定范围的元素</span></span><br><span class="line"><span class="comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">reverse</span>(iterator beg, iterator end)</span><br></pre></td></tr></table></figure><h3 id="常用拷贝和替换算法"><a href="#常用拷贝和替换算法" class="headerlink" title="常用拷贝和替换算法"></a>常用拷贝和替换算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">copy算法 将容器内指定范围的元素拷贝到另一容器中</span></span><br><span class="line"><span class="comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="comment">@param dest 目标起始迭代器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">copy</span>(iterator beg, iterator end, iterator dest)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">replace算法 将容器内指定范围的旧元素修改为新元素</span></span><br><span class="line"><span class="comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="comment">@param oldvalue 旧元素</span></span><br><span class="line"><span class="comment">@param oldvalue 新元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">replace</span>(iterator beg, iterator end, oldvalue, newvalue)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">replace_if算法 将容器内指定范围满足条件的元素替换为新元素</span></span><br><span class="line"><span class="comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="comment">@param callback函数回调或者谓词(返回Bool类型的函数对象)</span></span><br><span class="line"><span class="comment">@param oldvalue 新元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">replace_if</span>(iterator beg, iterator end, _callback, newvalue)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">swap算法 互换两个容器的元素</span></span><br><span class="line"><span class="comment">@param c1容器1</span></span><br><span class="line"><span class="comment">@param c2容器2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">swap</span>(container c1, container c2)</span><br></pre></td></tr></table></figure><h3 id="常用算数生成算法"><a href="#常用算数生成算法" class="headerlink" title="常用算数生成算法"></a>常用算数生成算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">accumulate算法 计算容器元素累计总和</span></span><br><span class="line"><span class="comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="comment">@param value累加值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">accumulate</span>(iterator beg, iterator end, value)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">fill算法 向容器中添加元素</span></span><br><span class="line"><span class="comment">@param beg 容器开始迭代器</span></span><br><span class="line"><span class="comment">@param end 容器结束迭代器</span></span><br><span class="line"><span class="comment">@param value t填充元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">fill</span>(iterator beg, iterator end, value)</span><br></pre></td></tr></table></figure><h3 id="常用集合算法"><a href="#常用集合算法" class="headerlink" title="常用集合算法"></a>常用集合算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">set_intersection算法 求两个set集合的交集</span></span><br><span class="line"><span class="comment">注意:两个集合必须是有序序列</span></span><br><span class="line"><span class="comment">@param beg1 容器1开始迭代器</span></span><br><span class="line"><span class="comment">@param end1 容器1结束迭代器</span></span><br><span class="line"><span class="comment">@param beg2 容器2开始迭代器</span></span><br><span class="line"><span class="comment">@param end2 容器2结束迭代器</span></span><br><span class="line"><span class="comment">@param dest  目标容器开始迭代器</span></span><br><span class="line"><span class="comment">@return 目标容器的最后一个元素的迭代器地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">set_intersection</span>(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">set_union算法 求两个set集合的并集</span></span><br><span class="line"><span class="comment">注意:两个集合必须是有序序列</span></span><br><span class="line"><span class="comment">@param beg1 容器1开始迭代器</span></span><br><span class="line"><span class="comment">@param end1 容器1结束迭代器</span></span><br><span class="line"><span class="comment">@param beg2 容器2开始迭代器</span></span><br><span class="line"><span class="comment">@param end2 容器2结束迭代器</span></span><br><span class="line"><span class="comment">@param dest  目标容器开始迭代器</span></span><br><span class="line"><span class="comment">@return 目标容器的最后一个元素的迭代器地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">set_union</span>(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">set_difference算法 求两个set集合的差集</span></span><br><span class="line"><span class="comment">注意:两个集合必须是有序序列</span></span><br><span class="line"><span class="comment">@param beg1 容器1开始迭代器</span></span><br><span class="line"><span class="comment">@param end1 容器1结束迭代器</span></span><br><span class="line"><span class="comment">@param beg2 容器2开始迭代器</span></span><br><span class="line"><span class="comment">@param end2 容器2结束迭代器</span></span><br><span class="line"><span class="comment">@param dest  目标容器开始迭代器</span></span><br><span class="line"><span class="comment">@return 目标容器的最后一个元素的迭代器地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">set_difference</span>(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安知鱼主题标签 Tag Plugins</title>
      <link href="/2023/06/01/anzhiyu%E4%B8%BB%E9%A2%98%E6%A0%87%E7%AD%BE/"/>
      <url>/2023/06/01/anzhiyu%E4%B8%BB%E9%A2%98%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<div class="note blue anzhiyufont anzhiyu-icon-bullhorn simple"><p><code>AnZhiYu主题</code>中大部分标签移植于<a href="https://akilar.top/">店长</a>的<a href="https://www.npmjs.com/package/hexo-butterfly-tag-plugins-plus">hexo-butterfly-tag-plugins-plus</a>，转载请注明来自<a href="https://blog.anheyu.com/posts/d50a.html">安知鱼</a></p></div><h2 id="段落文本-p"><a href="#段落文本-p" class="headerlink" title="段落文本 p"></a>段落文本 p</h2><div class="tabs" id="p"><ul class="nav-tabs"><button type="button" class="tab " data-href="p-1">标签语法</button><button type="button" class="tab " data-href="p-2">配置参数</button><button type="button" class="tab  active" data-href="p-3">样式预览</button><button type="button" class="tab " data-href="p-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="p-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="p-2"><ol><li>字体: logo, code</li><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>大小: small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向: left, center, right</li></ol></div><div class="tab-item-content active" id="p-3"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p></li></ul></div><div class="tab-item-content" id="p-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">  在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">  文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">  &#123;% p center logo large, Volantis %&#125;</span><br><span class="line">  &#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="行内文本-span"><a href="#行内文本-span" class="headerlink" title="行内文本 span"></a>行内文本 span</h2><div class="tabs" id="span"><ul class="nav-tabs"><button type="button" class="tab " data-href="span-1">标签语法</button><button type="button" class="tab " data-href="span-2">配置参数</button><button type="button" class="tab  active" data-href="span-3">样式预览</button><button type="button" class="tab " data-href="span-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="span-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="span-2"><ol><li>字体: logo, code</li><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>大小: small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向: left, center, right</li></ol></div><div class="tab-item-content active" id="span-3"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul></div><div class="tab-item-content" id="span-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">  在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">  文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">  &#123;% span center logo large, Volantis %&#125;</span><br><span class="line">  &#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h2><div class="tabs" id="text"><ul class="nav-tabs"><button type="button" class="tab " data-href="text-1">标签语法</button><button type="button" class="tab  active" data-href="text-2">样式预览</button><button type="button" class="tab " data-href="text-3">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="text-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content active" id="text-2"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol></div><div class="tab-item-content" id="text-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="分栏-tab"><a href="#分栏-tab" class="headerlink" title="分栏 tab"></a>分栏 tab</h2><div class="note blue anzhiyufont anzhiyu-icon-bullhorn simple"><p>分栏支持内置阿里图标，如果开启了 <code>fontawesome</code>可以使用 fontawesome 的图标，否则只能使用默内置阿里图标</p></div><div class="tabs" id="folding"><ul class="nav-tabs"><button type="button" class="tab " data-href="folding-1">标签语法</button><button type="button" class="tab " data-href="folding-2">配置参数</button><button type="button" class="tab  active" data-href="folding-3">样式预览</button><button type="button" class="tab " data-href="folding-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="folding-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line"></span><br><span class="line">Any content (support inline tags too).</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="folding-2"><ol><li>Unique name :<ul><li>选项卡块标签的唯一名称，不带逗号。</li><li>将在#id 中用作每个标签及其索引号的前缀。</li><li>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</li><li>仅当前帖子&#x2F;页面的 URL 必须是唯一的！</li></ul></li><li>[index]:<ul><li>活动选项卡的索引号。</li><li>如果未指定，将选择第一个标签（1）。</li><li>如果 index 为-1，则不会选择任何选项卡。</li><li>可选参数。</li></ul></li><li>[Tab caption]:<ul><li>当前选项卡的标题。</li><li>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</li><li>如果未指定标题，但指定了图标，则标题将为空。</li><li>可选参数。</li></ul></li><li>[@icon]: - FontAwesome 图标名称（全名，看起来像“ fas fa-font”） - 可以指定带空格或不带空格； - 例如’Tab caption @icon’ 和 ‘Tab caption@icon’. - 可选参数。</li></ol></div><div class="tab-item-content active" id="folding-3"><div class="note primary flat"><p>Demo 1 - 预设选择第一个【默认】</p></div><div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button><button type="button" class="tab " data-href="test1-2">test1 2</button><button type="button" class="tab " data-href="test1-3">test1 3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="note primary flat"><p>Demo 2 - 预设选择 tabs</p></div><div class="tabs" id="test2"><ul class="nav-tabs"><button type="button" class="tab " data-href="test2-1">test2 1</button><button type="button" class="tab " data-href="test2-2">test2 2</button><button type="button" class="tab  active" data-href="test2-3">test2 3</button></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="note primary flat"><p>Demo 3 - 没有预设值</p></div><div class="tabs" id="test3"><ul class="nav-tabs no-default"><button type="button" class="tab " data-href="test3-1">test3 1</button><button type="button" class="tab " data-href="test3-2">test3 2</button><button type="button" class="tab " data-href="test3-3">test3 3</button></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="note primary flat"><p>Demo 4 - 自定义 Tab 名 + 只有 icon + icon 和 Tab 名</p></div><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">第一个Tab</button><button type="button" class="tab " data-href="test4-2"><i class="anzhiyufont anzhiyu-icon-oranges" style="text-align: center;"></i></button><button type="button" class="tab " data-href="test4-3"><i class="anzhiyufont anzhiyu-icon-oranges"></i>炸弹</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab 名字为第一个 Tab</strong></p></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有 Tab 名字</strong></p></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><div class="tab-item-content" id="folding-4"><div class="note primary flat"><p>Demo 1 - 预设选择第一个【默认】</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="note primary flat"><p>Demo 2 - 预设选择 tabs</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="note primary flat"><p>Demo 3 - 没有预设值</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="note primary flat"><p>Demo 4 - 自定义 Tab 名 + 只有 icon + icon 和 Tab 名</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**tab 名字为第一个 Tab**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**只有图标 没有 Tab 名字**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="按钮-btns"><a href="#按钮-btns" class="headerlink" title="按钮 btns"></a>按钮 btns</h2><div class="tabs" id="btns"><ul class="nav-tabs"><button type="button" class="tab " data-href="btns-1">标签语法</button><button type="button" class="tab " data-href="btns-2">参数配置</button><button type="button" class="tab  active" data-href="btns-3">样式预览</button><button type="button" class="tab " data-href="btns-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="btns-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="btns-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;标题&lt;/b&gt; </code>和<code> &lt;p&gt;描述文字&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">wide</td><td align="left">宽一点的按钮</td></tr><tr><td align="left">fill</td><td align="left">填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td align="left">center</td><td align="left">居中，按钮之间是固定间距</td></tr><tr><td align="left">around</td><td align="left">居中分散</td></tr><tr><td align="left">grid2</td><td align="left">等宽最多 2 列，屏幕变窄会适当减少列数</td></tr><tr><td align="left">grid3</td><td align="left">等宽最多 3 列，屏幕变窄会适当减少列数</td></tr><tr><td align="left">grid4</td><td align="left">等宽最多 4 列，屏幕变窄会适当减少列数</td></tr><tr><td align="left">grid5</td><td align="left">等宽最多 5 列，屏幕变窄会适当减少列数</td></tr></tbody></table></div><div class="tab-item-content active" id="btns-3"><ol><li>如果需要显示类似「团队成员」之类的一组含有头像的链接：</li></ol><div class="btns circle grid5">            <a class="button no-text-decoration" href='https://xaoxuu.com' title='xaoxuu'><img src='https://bu.dusays.com/2023/06/01/64787e6a5816d.png'>xaoxuu</a><a class="button no-text-decoration" href='https://xaoxuu.com' title='xaoxuu'><img src='https://bu.dusays.com/2023/06/01/64787e6a5816d.png'>xaoxuu</a><a class="button no-text-decoration" href='https://xaoxuu.com' title='xaoxuu'><img src='https://bu.dusays.com/2023/06/01/64787e6a5816d.png'>xaoxuu</a><a class="button no-text-decoration" href='https://xaoxuu.com' title='xaoxuu'><img src='https://bu.dusays.com/2023/06/01/64787e6a5816d.png'>xaoxuu</a><a class="button no-text-decoration" href='https://xaoxuu.com' title='xaoxuu'><img src='https://bu.dusays.com/2023/06/01/64787e6a5816d.png'>xaoxuu</a>          </div><ol start="2"><li>或者含有图标的按钮：</li></ol><div class="btns rounded grid5">            <a class="button no-text-decoration" href='/' title='下载源码'><i class='anzhiyufont anzhiyu-icon-bolt'></i>下载源码</a><a class="button no-text-decoration" href='/' title='查看文档'><i class='anzhiyufont anzhiyu-icon-book'></i>查看文档</a>          </div><ol start="3"><li>圆形图标 + 标题 + 描述 + 图片 + 网格 5 列 + 居中</li></ol><div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1' class="no-text-decoration"><i class='anzhiyufont anzhiyu-icon-heartbeat'></i><b>心率管家</b><p class='p red'>专业版</p><img src='https://cdn1.tianli0.top/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1' class="no-text-decoration"><i class='anzhiyufont anzhiyu-icon-heartbeat'></i><b>心率管家</b><p class='p green'>免费版</p><img src='https://cdn1.tianli0.top/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png'></a>          </div></div><div class="tab-item-content" id="btns-4"><ol><li>如果需要显示类似「团队成员」之类的一组含有头像的链接：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://bu.dusays.com/2023/06/01/64787e6a5816d.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://bu.dusays.com/2023/06/01/64787e6a5816d.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://bu.dusays.com/2023/06/01/64787e6a5816d.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://bu.dusays.com/2023/06/01/64787e6a5816d.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://bu.dusays.com/2023/06/01/64787e6a5816d.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>或者含有图标的按钮：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, anzhiyufont anzhiyu-icon-bolt %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, anzhiyufont anzhiyu-icon-book %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>圆形图标 + 标题 + 描述 + 图片 + 网格 5 列 + 居中</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span> <span class="attr">class</span>=<span class="string">&quot;no-text-decoration&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;anzhiyufont anzhiyu-icon-heartbeat&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">&#123;% p red, 专业版 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://bu.dusays.com/2023/06/01/64787e2a1347c.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span> <span class="attr">class</span>=<span class="string">&quot;no-text-decoration&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;anzhiyufont anzhiyu-icon-heartbeat&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">&#123;% p green, 免费版 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://bu.dusays.com/2023/06/01/64787e515e261.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="按钮-btn"><a href="#按钮-btn" class="headerlink" title="按钮 btn"></a>按钮 btn</h2><div class="tabs" id="btn"><ul class="nav-tabs"><button type="button" class="tab " data-href="btn-1">标签语法</button><button type="button" class="tab " data-href="btn-2">参数配置</button><button type="button" class="tab  active" data-href="btn-3">样式预览</button><button type="button" class="tab " data-href="btn-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="btn-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br><span class="line"></span><br><span class="line">[url] : 链接</span><br><span class="line">[text] : 按钮文字</span><br><span class="line">[icon] : [可选] 图标</span><br><span class="line">[color] : [可选] 按钮背景顔色(默认 style 时）</span><br><span class="line">按钮字体和边框顔色(outline 时)</span><br><span class="line">default/blue/pink/red/purple/orange/green</span><br><span class="line">[style] : [可选] 按钮样式 默认实心</span><br><span class="line">outline/留空</span><br><span class="line">[layout] : [可选] 按钮佈局 默认为 line</span><br><span class="line">block/留空</span><br><span class="line">[position] : [可选] 按钮位置 前提是设置了 layout 为 block 默认为左边</span><br><span class="line">center/right/留空</span><br><span class="line">[size] : [可选] 按钮大小</span><br><span class="line">larger/留空</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="btn-2"><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">url</td><td align="left">链接</td></tr><tr><td align="left">text</td><td align="left">按钮文字</td></tr><tr><td align="left">icon</td><td align="left">[可选] 图标，如果开启了 <code>fontawesome</code>可以使用 fontawesome 的图标，否则只能使用默内置图标</td></tr><tr><td align="left">color</td><td align="left">[可选] 按钮背景顔色(默认 style 时）按钮字体和边框顔色(outline 时)default&#x2F;blue&#x2F;pink&#x2F;red&#x2F;purple&#x2F;orange&#x2F;green</td></tr><tr><td align="left">style</td><td align="left">[可选] 按钮样式 默认实心数，outline&#x2F;留空</td></tr><tr><td align="left">layout</td><td align="left">[可选] 按钮佈局 默认为 line block&#x2F;留空</td></tr><tr><td align="left">position</td><td align="left">[可选] 按钮位置 前提是设置了 layout 为 block 默认为左边 center&#x2F;right&#x2F;留空数</td></tr><tr><td align="left">size</td><td align="left">[可选] 按钮大小 larger&#x2F;留空</td></tr></tbody></table></div><div class="tab-item-content active" id="btn-3"><ol><li>一组按钮</li></ol><p>This is my website, click the button <a class="btn-anzhiyu " href="https://anheyu.com/"   title="AnZhiYu"><span>AnZhiYu</span></a><br>This is my website, click the button <a class="btn-anzhiyu " href="https://anheyu.com/"   title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><br>This is my website, click the button <a class="btn-anzhiyu outline" href="https://anheyu.com/"   title="AnZhiYu"><span>AnZhiYu</span></a><br>This is my website, click the button <a class="btn-anzhiyu outline" href="https://anheyu.com/"   title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><br>This is my website, click the button <a class="btn-anzhiyu larger" href="https://anheyu.com/"   title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a></p><ol start="2"><li>调整位置&#x2F;大小</li></ol><p><a class="btn-anzhiyu block" href="https://anheyu.com/"   title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><br><a class="btn-anzhiyu block center larger" href="https://anheyu.com/"   title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><br><a class="btn-anzhiyu block right outline larger" href="https://anheyu.com/"   title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a></p><ol start="3"><li>more than one button in center</li></ol><span><a class="btn-anzhiyu larger" href="https://anheyu.com/"   title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu blue larger" href="https://anheyu.com/"   title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu pink larger" href="https://anheyu.com/"   title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu red larger" href="https://anheyu.com/"   title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu purple larger" href="https://anheyu.com/"   title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu orange larger" href="https://anheyu.com/"   title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu green larger" href="https://anheyu.com/"   title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a></span><ol start="4"><li>居中按钮</li></ol><div class="btn-center"><a class="btn-anzhiyu outline larger" href="https://anheyu.com/"   title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu outline blue larger" href="https://anheyu.com/"   title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu outline pink larger" href="https://anheyu.com/"   title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu outline red larger" href="https://anheyu.com/"   title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu outline purple larger" href="https://anheyu.com/"   title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu outline orange larger" href="https://anheyu.com/"   title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a><a class="btn-anzhiyu outline green larger" href="https://anheyu.com/"   title="AnZhiYu"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>AnZhiYu</span></a></div></div><div class="tab-item-content" id="btn-4"><ol><li>一组按钮</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is my website, click the button &#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,larger %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>调整位置&#x2F;大小</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,block %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,block center larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,block right outline larger %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>more than one button in center</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,green larger %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="4"><li>居中按钮</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-center&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,outline larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,outline blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,outline pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,outline red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,outline purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,outline orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://anheyu.com/&#x27;,AnZhiYu,anzhiyufont anzhiyu-icon-circle-arrow-right,outline green larger %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="网站卡片-sites"><a href="#网站卡片-sites" class="headerlink" title="网站卡片 sites"></a>网站卡片 sites</h2><div class="tabs" id="site"><ul class="nav-tabs"><button type="button" class="tab " data-href="site-1">标签语法</button><button type="button" class="tab  active" data-href="site-2">样式预览</button><button type="button" class="tab " data-href="site-3">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="site-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content active" id="site-2"><div class="site-card-group"><a class="site-card" href="https://xaoxuu.com" data-title=简约风格><div class="wrapper cover"><img class="cover fadeIn" src="https://bu.dusays.com/2023/06/01/6478965ce6557.webp"/></div><div class="info"><img class="flink-avatar" src="https://cdn1.tianli0.top/gh/xaoxuu/cdn-assets/avatar/avatar.png"/><span class="site-title">xaoxuu</span></div></a><a class="site-card" href="https://colsrch.top" data-title=这是一段关于这个网站的描述文字><div class="wrapper cover"><img class="cover fadeIn" src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img class="flink-avatar" src="https://cdn1.tianli0.top/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="site-title">Colsrch</span></div></a><a class="site-card" href="https://linhk1606.github.io" data-title=这是一段关于这个网站的描述文字><div class="wrapper cover"><img class="cover fadeIn" src="https://bu.dusays.com/2023/06/01/6478963584621.png"/></div><div class="info"><img class="flink-avatar" src="https://bu.dusays.com/2023/06/01/6478968743368.png"/><span class="site-title">Linhk1606</span></div></a></div></div><div class="tab-item-content" id="site-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://bu.dusays.com/2023/06/01/6478965ce6557.webp, avatar=https://cdn1.tianli0.top/gh/xaoxuu/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn1.tianli0.top/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://bu.dusays.com/2023/06/01/6478963584621.png, avatar=https://bu.dusays.com/2023/06/01/6478968743368.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="单张图片-image"><a href="#单张图片-image" class="headerlink" title="单张图片 image"></a>单张图片 image</h2><div class="tabs" id="image"><ul class="nav-tabs"><button type="button" class="tab " data-href="image-1">标签语法</button><button type="button" class="tab " data-href="image-2">参数配置</button><button type="button" class="tab  active" data-href="image-3">样式预览</button><button type="button" class="tab " data-href="image-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="image-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="image-2"><ol><li>图片宽度高度：width&#x3D;300px, height&#x3D;32px</li><li>图片描述：alt&#x3D;图片描述（butterfly 需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg&#x3D;#f2f2f2</li></ol></div><div class="tab-item-content active" id="image-3"><ol start="4"><li>添加描述：</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://bu.dusays.com/2023/06/01/6478937d7de6f.webp" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div><ol start="2"><li>指定宽度：</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://bu.dusays.com/2023/06/01/6478937d7de6f.webp" style="width:400px;"/></div></div><ol start="3"><li>指定宽度并添加描述：</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://bu.dusays.com/2023/06/01/6478937d7de6f.webp" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div><ol start="4"><li>设置占位背景色：</li></ol><div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://bu.dusays.com/2023/06/01/6478937d7de6f.webp" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div></div><div class="tab-item-content" id="image-4"><ol><li>添加描述：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://bu.dusays.com/2023/06/01/6478937d7de6f.webp, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>指定宽度：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://bu.dusays.com/2023/06/01/6478937d7de6f.webp, width=400px %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>指定宽度并添加描述：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://bu.dusays.com/2023/06/01/6478937d7de6f.webp, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>设置占位背景色：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://bu.dusays.com/2023/06/01/6478937d7de6f.webp, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="inlineImg-行内图片"><a href="#inlineImg-行内图片" class="headerlink" title="inlineImg 行内图片"></a>inlineImg 行内图片</h2><div class="tabs" id="inlineimg"><ul class="nav-tabs"><button type="button" class="tab " data-href="inlineimg-1">标签语法</button><button type="button" class="tab " data-href="inlineimg-2">参数配置</button><button type="button" class="tab  active" data-href="inlineimg-3">样式预览</button><button type="button" class="tab " data-href="inlineimg-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="inlineimg-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineImg [src] [height] %&#125;</span><br><span class="line"></span><br><span class="line">[src] : 图片链接</span><br><span class="line">[height] ： 图片高度限制【可选】</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="inlineimg-2"><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">src</td><td align="left">图片链接</td></tr><tr><td align="left">height</td><td align="left">图片高度限制【可选】</td></tr></tbody></table></div><div class="tab-item-content active" id="inlineimg-3"><p>你看我长得漂亮不</p><p><img src="https://bu.dusays.com/2023/06/01/64787ded2ca1c.webp"></p><p>我觉得很漂亮 <img class="inline-img" src="https://bu.dusays.com/2023/06/01/64787da5251b3.png" style="height:150px"/></p></div><div class="tab-item-content" id="inlineimg-4"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">你看我长得漂亮不</span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2021/03/19/2P6ivUGsdaEXSFI.png)</span><br><span class="line"></span><br><span class="line">我觉得很漂亮 &#123;% inlineImg https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png 150px %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="行内图片-inlineimage"><a href="#行内图片-inlineimage" class="headerlink" title="行内图片 inlineimage"></a>行内图片 inlineimage</h2><div class="tabs" id="inlineimage"><ul class="nav-tabs"><button type="button" class="tab " data-href="inlineimage-1">标签语法</button><button type="button" class="tab " data-href="inlineimage-2">参数配置</button><button type="button" class="tab  active" data-href="inlineimage-3">样式预览</button><button type="button" class="tab " data-href="inlineimage-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="inlineimage-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="inlineimage-2"><ol><li>高度：height&#x3D;20px</li></ol></div><div class="tab-item-content active" id="inlineimage-3"><p>这是 <img no-lazy class="inline" src="https://bu.dusays.com/2023/06/01/647895232e5d5.webp" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://bu.dusays.com/2022/05/19/6285328a83ca7.gif" style="height:40px;"/> 一段话。</p></div><div class="tab-item-content" id="inlineimage-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://bu.dusays.com/2023/06/01/647895232e5d5.webp %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://bu.dusays.com/2022/05/19/6285328a83ca7.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="label-标签"><a href="#label-标签" class="headerlink" title="label 标签"></a>label 标签</h2><div class="tabs" id="label"><ul class="nav-tabs"><button type="button" class="tab " data-href="label-1">标签语法</button><button type="button" class="tab " data-href="label-2">参数配置</button><button type="button" class="tab  active" data-href="label-3">样式预览</button><button type="button" class="tab " data-href="label-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="label-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="label-2"><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">text</td><td align="left">文字</td></tr><tr><td align="left">color</td><td align="left">【可选】背景颜色，默认为 default，default&#x2F;blue&#x2F;pink&#x2F;red&#x2F;purple&#x2F;orange&#x2F;green</td></tr></tbody></table></div><div class="tab-item-content active" id="label-3"><p>臣亮言：<mark class="hl-label default">先帝</mark> 创业未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此诚<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈于内；<mark class="hl-label purple">忠志之士</mark> ，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p></div><div class="tab-item-content" id="label-4"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">臣亮言：&#123;% label 先帝 %&#125;创业未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此诚&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈于内；&#123;% label 忠志之士 purple %&#125;，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line">宫中、府中，俱为一体；陟罚臧否，不宜异同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="timeline"><a href="#timeline" class="headerlink" title="timeline"></a>timeline</h2><div class="tabs" id="timeline"><ul class="nav-tabs"><button type="button" class="tab " data-href="timeline-1">标签语法</button><button type="button" class="tab " data-href="timeline-2">参数配置</button><button type="button" class="tab  active" data-href="timeline-3">样式预览</button><button type="button" class="tab " data-href="timeline-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="timeline-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline title,color %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line"></span><br><span class="line">xxxxx</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line"></span><br><span class="line">xxxxx</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="timeline-2"><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">title</td><td align="left">标题&#x2F;时间线</td></tr><tr><td align="left">color</td><td align="left">timeline 颜色，default(留空) &#x2F; blue &#x2F; pink &#x2F; red &#x2F; purple &#x2F; orange &#x2F; green</td></tr></tbody></table></div><div class="tab-item-content active" id="timeline-3"><ol><li><p>默认颜色</p><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div></li><li><p>blue</p><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div></li><li><p>pink</p><div class="timeline pink"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div></li><li><p>red</p><div class="timeline red"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div></li><li><p>purple</p><div class="timeline purple"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div></li><li><p>orange</p><div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div></li><li><p>green</p><div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div></li></ol></div><div class="tab-item-content" id="timeline-4"><ol><li>默认颜色</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022 %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line"></span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>blue</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,blue %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line"></span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>pink</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,pink %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line"></span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>red</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,red %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line"></span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>purple</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,purple %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line"></span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>orange</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,orange %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line"></span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>green</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,green %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line"></span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="flink-友链标签"><a href="#flink-友链标签" class="headerlink" title="flink 友链标签"></a>flink 友链标签</h2><div class="note blue anzhiyufont anzhiyu-icon-bullhorn simple"><p>可在任何界面插入类似<code>友情链接</code>列表效果，内容格式与友情链接界面一样，支持 <code>yml 格式</code>,注意<code>yml数据</code>具有格式要求，请注意格式对齐，防止被编辑器格式化导致格式错误从而报错。</p></div><div class="tabs" id="btn"><ul class="nav-tabs"><button type="button" class="tab " data-href="btn-1">标签语法</button><button type="button" class="tab " data-href="btn-2">参数配置</button><button type="button" class="tab  active" data-href="btn-3">样式预览</button><button type="button" class="tab " data-href="btn-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="btn-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line">xxxxxx</span><br><span class="line">&#123;% endflink %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="btn-2"><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">class_name</td><td align="left">h2标题</td></tr><tr><td align="left">flink_style</td><td align="left">【可选】友链样式，默认为 flexcard，flexcard&#x2F;anzhiyu</td></tr><tr><td align="left">link_list</td><td align="left">【可选】友链样式，默认为 flexcard，flexcard&#x2F;anzhiyu</td></tr></tbody></table></div><div class="tab-item-content active" id="btn-3"><div class="flink"><div class="flink-name">推荐博客</div> <div class="flink-list"><div class="flexcard-flink-list">              <a href="https://anheyu.com/" title="安知鱼" target="_blank" class="flink-list-card cf-friends-link">                <div class="wrapper cover">                    <img class="no-lightbox cover fadeIn" src="https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anheyu.com.jpg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="安知鱼" />                </div>                <div class="info">                  <img class="no-lightbox cf-friends-avatar flink-avatar" src="https://img02.anheyu.com/adminuploads/1/2022/09/15/63232b7d91d22.jpg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="安知鱼"/>                  <span class="flink-sitename cf-friends-name">安知鱼</span>                </div>              </a></div></div><div class="flink-name">网站</div><div class="flink-desc">值得推荐的网站</div> <div class="flink-list"><div class="anzhiyu-flink-list">            <div class="flink-list-item">              <a href="https://www.youtube.com/" title="Youtube" class="cf-friends-link" target="_blank">                <div class="flink-item-icon">                  <img class="no-lightbox cf-friends-avatar" src="https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Youtube" />                </div>                <div class="flink-item-info">                  <div class="flink-item-name">Youtube</div>                  <div class="flink-item-desc" title="视频网站">视频网站</div>                </div>              </a>            </div>            <div class="flink-list-item">              <a href="https://www.weibo.com/" title="Weibo" class="cf-friends-link" target="_blank">                <div class="flink-item-icon">                  <img class="no-lightbox cf-friends-avatar" src="https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Weibo" />                </div>                <div class="flink-item-info">                  <div class="flink-item-name">Weibo</div>                  <div class="flink-item-desc" title="中国最大社交分享平台">中国最大社交分享平台</div>                </div>              </a>            </div>            <div class="flink-list-item">              <a href="https://twitter.com/" title="Twitter" class="cf-friends-link" target="_blank">                <div class="flink-item-icon">                  <img class="no-lightbox cf-friends-avatar" src="https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Twitter" />                </div>                <div class="flink-item-info">                  <div class="flink-item-name">Twitter</div>                  <div class="flink-item-desc" title="社交分享平台">社交分享平台</div>                </div>              </a>            </div></div></div></div></div><div class="tab-item-content" id="btn-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% flink %&#125;</span><br><span class="line"><span class="bullet">-</span> class<span class="emphasis">_name: 推荐博客</span></span><br><span class="line"><span class="emphasis">  flink_</span>style: flexcard</span><br><span class="line">  link<span class="emphasis">_list:</span></span><br><span class="line"><span class="emphasis">    - name: 安知鱼</span></span><br><span class="line"><span class="emphasis">      link: https://anheyu.com/</span></span><br><span class="line"><span class="emphasis">      avatar: https://img02.anheyu.com/adminuploads/1/2022/09/15/63232b7d91d22.jpg</span></span><br><span class="line"><span class="emphasis">      descr: 生活明朗，万物可爱</span></span><br><span class="line"><span class="emphasis">      siteshot: https://npm.elemecdn.com/anzhiyu-blog@1.1.6/img/post/common/anheyu.com.jpg</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">- class_</span>name: 网站</span><br><span class="line">  class<span class="emphasis">_desc: 值得推荐的网站</span></span><br><span class="line"><span class="emphasis">  flink_</span>style: anzhiyu</span><br><span class="line">  link<span class="emphasis">_list:</span></span><br><span class="line"><span class="emphasis">    - name: Youtube</span></span><br><span class="line"><span class="emphasis">      link: https://www.youtube.com/</span></span><br><span class="line"><span class="emphasis">      avatar: https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line"><span class="emphasis">      descr: 视频网站</span></span><br><span class="line"><span class="emphasis">    - name: Weibo</span></span><br><span class="line"><span class="emphasis">      link: https://www.weibo.com/</span></span><br><span class="line"><span class="emphasis">      avatar: https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line"><span class="emphasis">      descr: 中国最大社交分享平台</span></span><br><span class="line"><span class="emphasis">    - name: Twitter</span></span><br><span class="line"><span class="emphasis">      link: https://twitter.com/</span></span><br><span class="line"><span class="emphasis">      avatar: https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line"><span class="emphasis">      descr: 社交分享平台</span></span><br><span class="line"><span class="emphasis">&#123;% endflink %&#125;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="mermaid-图"><a href="#mermaid-图" class="headerlink" title="mermaid 图"></a>mermaid 图</h2><div class="note blue anzhiyufont anzhiyu-icon-bullhorn simple"><p>使用<code>mermaid标签</code>可以绘制Flowchart（流程图）、Sequence diagram（时序图 ）、Class Diagram（类别图）、State Diagram（状态图）、Gantt（甘特图）和Pie Chart（圆形图），具体可以查看<a href="https://mermaid.js.org/#/">mermaid文档</a></p></div><p>修改 <code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mermaid</span></span><br><span class="line"><span class="comment"># see https://github.com/mermaid-js/mermaid</span></span><br><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># built-in themes: default/forest/dark/neutral</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">dark</span></span><br></pre></td></tr></table></figure><div class="tabs" id="mermaid"><ul class="nav-tabs"><button type="button" class="tab " data-href="mermaid-1">标签语法</button><button type="button" class="tab  active" data-href="mermaid-2">样式预览</button><button type="button" class="tab " data-href="mermaid-3">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="mermaid-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content active" id="mermaid-2"><p><img src="https://bu.dusays.com/2023/06/01/647889d3a16f8.png" alt="mermaid"></p></div><div class="tab-item-content" id="mermaid-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">pie</span><br><span class="line">    title Key elements in Product X</span><br><span class="line">    &quot;Calcium&quot; : 42.96</span><br><span class="line">    &quot;Potassium&quot; : 50.05</span><br><span class="line">    &quot;Magnesium&quot; : 10.01</span><br><span class="line">    &quot;Iron&quot; :  5</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="复选列表-checkbox"><a href="#复选列表-checkbox" class="headerlink" title="复选列表 checkbox"></a>复选列表 checkbox</h2><div class="tabs" id="checkbox"><ul class="nav-tabs"><button type="button" class="tab " data-href="checkbox-1">标签语法</button><button type="button" class="tab " data-href="checkbox-2">配置参数</button><button type="button" class="tab  active" data-href="checkbox-3">样式预览</button><button type="button" class="tab " data-href="checkbox-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="checkbox-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="checkbox-2"><ol><li>样式: plus, minus, times</li><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>选中状态: checked</li></ol></div><div class="tab-item-content active" id="checkbox-3"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div>   <div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div>   <div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div>   <div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div>   <div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div>   <div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div>   <div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div>   <div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div>   <div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div>   <div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div></div><div class="tab-item-content" id="checkbox-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="dogeplayer-多吉云播放器"><a href="#dogeplayer-多吉云播放器" class="headerlink" title="dogeplayer 多吉云播放器"></a>dogeplayer 多吉云播放器</h2><div class="note blue anzhiyufont anzhiyu-icon-bullhorn simple"><p>快捷引入<a href="https://console.dogecloud.com/vod/overview">多吉云视频</a></p></div><div class="tabs" id="label"><ul class="nav-tabs"><button type="button" class="tab " data-href="label-1">标签语法</button><button type="button" class="tab " data-href="label-2">参数配置</button><button type="button" class="tab  active" data-href="label-3">样式预览</button><button type="button" class="tab " data-href="label-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="label-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dogeplayer 4945 ebb742fd1f0b5a7b %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="label-2"><p>获取<code>userId</code>与<code>vcode</code></p><p><img src="https://bu.dusays.com/2023/06/01/64788b5bad729.webp"></p><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">userId</td><td align="left">多吉云userId</td></tr><tr><td align="left">vcode</td><td align="left">视频vcode</td></tr></tbody></table></div><div class="tab-item-content active" id="label-3"><p><img src="https://bu.dusays.com/2023/06/01/64788c12883b8.webp"></p></div><div class="tab-item-content" id="label-4"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dogeplayer 4945 ebb742fd1f0b5a7b %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="折叠框-folding"><a href="#折叠框-folding" class="headerlink" title="折叠框 folding"></a>折叠框 folding</h2><div class="note blue anzhiyufont anzhiyu-icon-bullhorn disabled"><p>折叠框folding</p></div><div class="tabs" id="folding"><ul class="nav-tabs"><button type="button" class="tab " data-href="folding-1">标签语法</button><button type="button" class="tab " data-href="folding-2">配置参数</button><button type="button" class="tab  active" data-href="folding-3">样式预览</button><button type="button" class="tab " data-href="folding-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="folding-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://bu.dusays.com/2023/06/01/64788d71c832d.webp</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="folding-2"><ol><li>颜色：blue, cyan, green, yellow, red</li><li>状态：状态填写 open 代表默认打开。</li></ol></div><div class="tab-item-content active" id="folding-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://bu.dusays.com/2023/06/01/64788d71c832d.webp"></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](<span class="link">https://bu.dusays.com/2023/06/01/64788d71c832d.webp</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://bu.dusays.com/2023/06/01/64788cd5a356b.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details></div><div class="tab-item-content" id="folding-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://bu.dusays.com/2023/06/01/64788d71c832d.webp</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://bu.dusays.com/2023/06/01/64788cd5a356b.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="Gallery-相册图库"><a href="#Gallery-相册图库" class="headerlink" title="Gallery 相册图库"></a>Gallery 相册图库</h2><p>一个图库集合。</p><div class="tabs" id="gallery"><ul class="nav-tabs"><button type="button" class="tab " data-href="gallery-1">标签语法</button><button type="button" class="tab " data-href="gallery-2">参数配置</button><button type="button" class="tab  active" data-href="gallery-3">样式预览</button><button type="button" class="tab " data-href="gallery-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="gallery-1"><ol><li><p>gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>gallery 相册</p></li></ol><div class="tabs" id="gallery相册"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="gallery相册-1">本地</button><button type="button" class="tab " data-href="gallery相册-2">远程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="gallery相册-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% gallery true,220,10 %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% gallery true,,10 %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>lazyload</td><td>【可选】点击按钮加载更多图片，填写 true&#x2F;false。默认为 <code>false</code>。</td></tr><tr><td>rowHeight</td><td>【可选】图片显示的高度，如果需要一行显示更多的图片，可设置更小的数字。默认为 <code>220</code>。</td></tr><tr><td>limit</td><td>【可选】每次加载多少张照片。默认为 <code>10</code>。</td></tr></tbody></table></div><div class="tab-item-content" id="gallery相册-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery url,[link],[lazyload],[rowHeight],[limit] %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>url</td><td>【必须】 识别词</td></tr><tr><td>link</td><td>【必须】远程的 json 链接</td></tr><tr><td>lazyload</td><td>【可选】点击按钮加载更多图片，填写 true&#x2F;false。默认为 <code>false</code>。</td></tr><tr><td>rowHeight</td><td>【可选】图片显示的高度，如果需要一行显示更多的图片，可设置更小的数字。默认为 <code>220</code>。</td></tr><tr><td>limit</td><td>【可选】每次加载多少张照片。默认为 <code>10</code>。</td></tr></tbody></table><blockquote><p>远程链接 Json 的例子</p></blockquote><p>有三个参数，<code>url</code>是必须存在的，<code>alt</code> 和 <code>title</code> 可有，也可没有。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn1.tianli0.top/gh/jerryc127/CDN/img/IMG_0556.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IMG_0556.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;这是title&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn1.tianli0.top/gh/jerryc127/CDN/img/IMG_0472.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IMG_0472.jpg&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn1.tianli0.top/gh/jerryc127/CDN/img/IMG_0453.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn1.tianli0.top/gh/jerryc127/CDN/img/IMG_0931.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery url,https://xxxx.com/sss.json %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% gallery url,https://xxxx.com/sss.json,true,220,10 %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% gallery url,https://xxxx.com/sss.json,true,,10 %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><div class="tab-item-content" id="gallery-2"><ul><li><p>gallerygroup 相册图库</p><table><thead><tr><th align="left">参数名</th><th align="left">释义</th></tr></thead><tbody><tr><td align="left">name</td><td align="left">图库名字</td></tr><tr><td align="left">description</td><td align="left">图库描述</td></tr><tr><td align="left">link</td><td align="left">链接到对应相册的地址</td></tr><tr><td align="left">img-url</td><td align="left">图库封面</td></tr></tbody></table></li></ul><div class="note info flat"><p>思维拓展一下，相册图库的实质其实就是个快捷方式，可以自定义添加描述、封面、链接。那么我们未必要把它当做一个相册，完全可以作为一个链接卡片，链接到视频、QQ、友链都是不错的选择。</p></div><ul><li>gallery 相册<br>区别于旧版的 Gallery 相册,新的 Gallery 相册会自动根据图片长度进行排版，书写也更加方便，与 markdown 格式一样。可根据需要插入到相应的 md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</li></ul><div class="tabs" id="gallery相册参数"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="gallery相册参数-1">本地</button><button type="button" class="tab " data-href="gallery相册参数-2">远程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="gallery相册参数-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% gallery true,220,10 %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% gallery true,,10 %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>lazyload</td><td>【可选】点击按钮加载更多图片，填写 true&#x2F;false。默认为 <code>false</code>。</td></tr><tr><td>rowHeight</td><td>【可选】图片显示的高度，如果需要一行显示更多的图片，可设置更小的数字。默认为 <code>220</code>。</td></tr><tr><td>limit</td><td>【可选】每次加载多少张照片。默认为 <code>10</code>。</td></tr></tbody></table></div><div class="tab-item-content" id="gallery相册参数-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery url,[link],[lazyload],[rowHeight],[limit] %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>url</td><td>【必须】 识别词</td></tr><tr><td>link</td><td>【必须】远程的 json 链接</td></tr><tr><td>lazyload</td><td>【可选】点击按钮加载更多图片，填写 true&#x2F;false。默认为 <code>false</code>。</td></tr><tr><td>rowHeight</td><td>【可选】图片显示的高度，如果需要一行显示更多的图片，可设置更小的数字。默认为 <code>220</code>。</td></tr><tr><td>limit</td><td>【可选】每次加载多少张照片。默认为 <code>10</code>。</td></tr></tbody></table><blockquote><p>远程链接 Json 的例子</p></blockquote><p>有三个参数，<code>url</code>是必须存在的，<code>alt</code> 和 <code>title</code> 可有，也可没有。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn1.tianli0.top/gh/jerryc127/CDN/img/IMG_0556.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IMG_0556.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;这是title&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn1.tianli0.top/gh/jerryc127/CDN/img/IMG_0472.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IMG_0472.jpg&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn1.tianli0.top/gh/jerryc127/CDN/img/IMG_0453.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://cdn1.tianli0.top/gh/jerryc127/CDN/img/IMG_0931.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery url,https://xxxx.com/sss.json %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% gallery url,https://xxxx.com/sss.json,true,220,10 %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% gallery url,https://xxxx.com/sss.json,true,,10 %&#125;</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><div class="tab-item-content active" id="gallery-3"><ul><li>gallerygroup 相册图库</li></ul><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://bu.dusays.com/2023/06/01/64788f24d05bd.webp' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/wordScenery/'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://bu.dusays.com/2023/06/01/64788f456fc3d.webp' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/thousand/'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://bu.dusays.com/2023/06/01/64788f83e5fa1.webp' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/wallpaper/'></a>  </figcaption>  </figure>  </div><ul><li>gallery 相册</li></ul><div class="gallery">  <div class="fj-gallery page_img_lazyload lazyload btn_album_detail_lazyload data" data-rowHeight="220" data-limit="2">    <span class="gallery-data">[{"url":"https://bu.dusays.com/2023/06/01/647896b15759c.jpg","alt":""},{"url":"https://bu.dusays.com/2023/06/01/647896cabde59.jpg","alt":""},{"url":"https://bu.dusays.com/2023/06/01/647896eb0f3ea.jpg","alt":""},{"url":"https://bu.dusays.com/2023/06/01/647896ed810b3.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg","alt":""}]</span>  </div><button class="gallery-load-more" style="opacity:0">  <span>加载更多</span>  <i class="anzhiyufont anzhiyu-icon-arrow-down"></i>  </button></div></div><div class="tab-item-content" id="gallery-4"><div class="note info flat"><p>对于很多同学提问的<code>gallerygroup</code>和<code>gallery</code>相册页的链接问题。这里说下我个人的使用习惯。<br>一般使用相册图库的话，可以在导航栏加一个 gallery 的 page(<strong>使用指令<code>hexo new page gallery</code>添加</strong>)，里面放相册图库作为封面。然后在<code>[Blogroot]/source/gallery/</code>下面建立相应的文件夹，例如若按照这里的示例，若欲使用<code>/gallery/MC/</code>路径访问 MC 相册，则需要新建<code>[Blogroot]/source/gallery/MC/index.md</code>，并在里面填入<code>gallery</code>相册内容。</p><p>注意 ⚠️：本站相册集为单独优化，可参考<a href="https://anheyu.com/posts/220c.html">配置相册页面</a>。</p></div><ol><li><p>gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line"> &#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/wordScenery/&#x27; https://bu.dusays.com/2023/06/01/64788f24d05bd.webp %&#125;</span><br><span class="line"> &#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/thousand/&#x27; https://bu.dusays.com/2023/06/01/64788f456fc3d.webp %&#125;</span><br><span class="line"> &#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/wallpaper/&#x27; https://bu.dusays.com/2023/06/01/64788f83e5fa1.webp %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery true,,2 %&#125;</span><br><span class="line">![](<span class="link">https://bu.dusays.com/2023/06/01/647896b15759c.jpg</span>)</span><br><span class="line">![](<span class="link">https://bu.dusays.com/2023/06/01/647896cabde59.jpg</span>)</span><br><span class="line">![](<span class="link">https://bu.dusays.com/2023/06/01/647896eb0f3ea.jpg</span>)</span><br><span class="line">![](<span class="link">https://bu.dusays.com/2023/06/01/647890012b1ec.webp</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></li></ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="tag-hide"><a href="#tag-hide" class="headerlink" title="tag-hide"></a>tag-hide</h2><div class="note blue anzhiyufont anzhiyu-icon-bullhorn flat"><p>如果你想把一些文字、内容隐藏起来，并提供按钮让用户点击显示。可以使用这个标签外挂。<br>请注意，tag-hide内的标签外挂content内都不建议有h1 - h6 等标题。因为Toc会把隐藏内容标题也显示出来，而且当滚动屏幕时，如果隐藏内容没有显示出来，会导致Toc的滚动出现异常。</p></div><div class="tabs" id="tag-hide"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="tag-hide-1">inline</button><button type="button" class="tab " data-href="tag-hide-2">Block</button><button type="button" class="tab " data-href="tag-hide-3">Toggle</button></ul><div class="tab-contents"><div class="tab-item-content active" id="tag-hide-1"><p><code>inline</code> 在文本里面添加按钮隐藏内容，只限文字</p><p>( content不能包含英文逗号，可用<code>&amp;sbquo;</code>)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideInline content,display,bg,color %&#125;</span><br></pre></td></tr></table></figure><ul><li><p>content: 文本内容</p></li><li><p>display: 按钮显示的文字(可选)</p></li><li><p>bg: 按钮的背景颜色(可选)</p></li><li><p>color: 按钮文字的颜色(可选)</p></li></ul><blockquote><p>Demo</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">哪个英文字母最酷？ &#123;% hideInline 因为西装裤(C装酷),查看答案,#FF7242,#fff %&#125;</span><br><span class="line"></span><br><span class="line">门里站着一个人? &#123;% hideInline 闪 %&#125;</span><br></pre></td></tr></table></figure><p>哪个英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案<br>  </button><span class="hide-content">因为西装裤(C装酷)</span></span></p><p>门里站着一个人? <span class="hide-inline"><button type="button" class="hide-button" style="">Click<br>  </button><span class="hide-content">闪</span></span></p></div><div class="tab-item-content" id="tag-hide-2"><p><code>block</code>独立的block隐藏内容，可以隐藏很多内容，包括图片，代码块等等</p><p>( display 不能包含英文逗号，可用<code>&amp;sbquo;</code>)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><ul><li><p>content: 文本内容</p></li><li><p>display: 按钮显示的文字(可选)</p></li><li><p>bg: 按钮的背景颜色(可选)</p></li><li><p>color: 按钮文字的颜色(可选)</p></li></ul><blockquote><p>Demo</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看答案</span><br><span class="line">&#123;% hideBlock 查看答案 %&#125;</span><br><span class="line">傻子，怎么可能有答案</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><p>查看答案</p><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><p>傻子，怎么可能有答案</p></div></div></div><div class="tab-item-content" id="tag-hide-3"><p>如果你需要展示的内容太多，可以把它隐藏在收缩框里，需要时再把它展开。</p><p>( display 不能包含英文逗号，可用<code>&amp;sbquo;</code>)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Demo</p></blockquote><details class="toggle" ><summary class="toggle-button" style="">AnZhiYu主题安装方法</summary><div class="toggle-content"><p>在你的博客根目录里</p><p>git clone -b master <a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git">https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git</a> themes&#x2F;anzhiyu</p><p>如果想要安装比较新的dev分支，可以</p><p>git clone -b dev <a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git">https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git</a> themes&#x2F;anzhiyu</p></div></details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="链接卡片-link"><a href="#链接卡片-link" class="headerlink" title="链接卡片 link"></a>链接卡片 link</h2><div class="tabs" id="link"><ul class="nav-tabs"><button type="button" class="tab " data-href="link-1">标签语法</button><button type="button" class="tab  active" data-href="link-2">样式预览</button><button type="button" class="tab " data-href="link-3">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="link-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 站点描述, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content active" id="link-2"><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/owen0o0/getFavicon">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">获取网站的Favicon图标并显示在你的网页上</div>            <div class="tag-link-sitename">owen0o0</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div></div><div class="tab-item-content" id="link-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 获取网站的Favicon图标并显示在你的网页上,owen0o0,https://github.com/owen0o0/getFavicon %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="单选列表-radio"><a href="#单选列表-radio" class="headerlink" title="单选列表 radio"></a>单选列表 radio</h2><div class="tabs" id="radio"><ul class="nav-tabs"><button type="button" class="tab " data-href="radio-1">标签语法</button><button type="button" class="tab " data-href="radio-2">配置参数</button><button type="button" class="tab  active" data-href="radio-3">样式预览</button><button type="button" class="tab " data-href="radio-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="radio-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="radio-2"><ol><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>选中状态: checked</li></ol></div><div class="tab-item-content active" id="radio-3"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div>   <div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div>   <div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div>   <div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div>   <div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div>   <div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div>   <div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div></div><div class="tab-item-content" id="radio-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="上标标签-tip"><a href="#上标标签-tip" class="headerlink" title="上标标签 tip"></a>上标标签 tip</h2><div class="tip cogs"><p>主要样式参考自<a href="https://www.antmoe.com/posts/3b43914f/">小康的 butterfly 渐变背景标签</a></p></div><div class="tabs" id="tip"><ul class="nav-tabs"><button type="button" class="tab " data-href="tip-1">标签语法</button><button type="button" class="tab " data-href="tip-2">配置参数</button><button type="button" class="tab  active" data-href="tip-3">样式预览</button><button type="button" class="tab " data-href="tip-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="tip-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="tip-2"><ol><li>样式: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li>自定义图标: 支持 fontawesome。</li></ol></div><div class="tab-item-content active" id="tip-3"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义 font awesome 图标</p></div></div><div class="tab-item-content" id="tip-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义 font awesome 图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="Note-Bootstrap-Callout"><a href="#Note-Bootstrap-Callout" class="headerlink" title="Note (Bootstrap Callout)"></a>Note (Bootstrap Callout)</h2><div class="tabs" id="note"><ul class="nav-tabs"><button type="button" class="tab " data-href="note-1">通用配置</button><button type="button" class="tab " data-href="note-2">语法格式</button><button type="button" class="tab " data-href="note-3">配置参数</button><button type="button" class="tab  active" data-href="note-4">样式预览</button><button type="button" class="tab " data-href="note-5">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="note-1"><p>修改主题配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>Note</code>标签外挂有两种用法。<code>icons</code>和<code>light_bg_offset</code>只对方法一生效。</p><p><code>fontawesome</code>图标需开启主题配置文件中<code>icons.fontawesome</code></p></div><div class="tab-item-content" id="note-2"><p><code>方法一</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p><code>方法二</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="note-3"><p><code>方法一</code></p><table><thead><tr><th align="left">参数</th><th align="left">用法</th></tr></thead><tbody><tr><td align="left">class</td><td align="left">【可选】标识，不同的标识有不同的配色<br>（ default &#x2F; primary &#x2F; success &#x2F; info &#x2F; warning &#x2F; danger ）</td></tr><tr><td align="left">no-icon</td><td align="left">【可选】不显示 icon</td></tr><tr><td align="left">style</td><td align="left">【可选】可以覆盖配置中的 style<br>（simple&#x2F;modern&#x2F;flat&#x2F;disabled）</td></tr></tbody></table><p><code>方法二</code></p><table><thead><tr><th align="left">参数</th><th align="left">用法</th></tr></thead><tbody><tr><td align="left">class</td><td align="left">【可选】标识，不同的标识有不同的配色<br>（ default &#x2F; blue &#x2F; pink &#x2F; red &#x2F; purple &#x2F; orange &#x2F; green ）</td></tr><tr><td align="left">no-icon</td><td align="left">【可选】可配置自定义 icon (支持 fontawesome 图标和主题内置的阿里图标,<code>fontawesome</code>图标需开启主题配置文件中<code>icons.fontawesome</code>, 也可以配置 no-icon )</td></tr><tr><td align="left">style</td><td align="left">【可选】可以覆盖配置中的 style<br>（simple&#x2F;modern&#x2F;flat&#x2F;disabled）</td></tr></tbody></table></div><div class="tab-item-content active" id="note-4"><p><code>方法一</code></p><ol><li><code>simple</code>样式</li></ol><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div><ol start="2"><li><code>modern</code>样式</li></ol><div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><ol start="3"><li><code>flat</code>样式</li></ol><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><ol start="4"><li><code>disabled</code>样式</li></ol><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><ol start="5"><li><code>no-icon</code>样式</li></ol><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div><p><code>方法二</code></p><p>图标支持 <code>fontawesome</code> 和 <code>主题内置的阿里图标</code>，使用方法为加上对应的类名，<code>fontawesome</code>图标需开启主题配置文件中<code>icons.fontawesome</code>，默认未开启 fontawesome</p><ol><li>simple 样式</li></ol><p><code>主题内置阿里图标</code></p><div class="note anzhiyufont anzhiyu-icon-rocket simple"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue anzhiyufont anzhiyu-icon-bullhorn simple"><p>2022 年快到了….</p></div><div class="note pink anzhiyufont anzhiyu-icon-instagram simple"><p>小心开车 安全至上</p></div><div class="note red anzhiyufont anzhiyu-icon-fan simple"><p>这是三片呢？还是四片？</p></div><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple anzhiyufont anzhiyu-icon-sanmingzhi simple"><p>剪刀石头布</p></div><div class="note green anzhiyufont anzhiyu-icon-ic_train simple"><p>前端最讨厌的浏览器</p></div><p><code>fontawesome 图标</code>，开启主题配置文件中的<code>icons.fontawesome</code>为<code>true</code>后可见</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2022 年快到了….</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-fan simple"><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏器</p></div><ol start="2"><li>modern 样式</li></ol><p><code>主题内置阿里图标</code></p><div class="note anzhiyufont anzhiyu-icon-rocket modern"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue anzhiyufont anzhiyu-icon-bullhorn modern"><p>2022 年快到了….</p></div><div class="note pink anzhiyufont anzhiyu-icon-instagram modern"><p>小心开车 安全至上</p></div><div class="note red anzhiyufont anzhiyu-icon-fan modern"><p>这是三片呢？还是四片？</p></div><div class="note orange anzhiyufont anzhiyu-icon-dengpao modern"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple anzhiyufont anzhiyu-icon-sanmingzhi modern"><p>剪刀石头布</p></div><div class="note green anzhiyufont anzhiyu-icon-ic_train modern"><p>前端最讨厌的浏览器</p></div><p><code>fontawesome 图标</code>，开启主题配置文件中的<code>icons.fontawesome</code>为<code>true</code>后可见</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021 年快到了….</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-fan modern"><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><ol start="3"><li>flat 样式</li></ol><p><code>主题内置阿里图标</code></p><div class="note anzhiyufont anzhiyu-icon-rocket flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue anzhiyufont anzhiyu-icon-bullhorn flat"><p>2022 年快到了….</p></div><div class="note pink anzhiyufont anzhiyu-icon-instagram flat"><p>小心开车 安全至上</p></div><div class="note red anzhiyufont anzhiyu-icon-fan flat"><p>这是三片呢？还是四片？</p></div><div class="note orange anzhiyufont anzhiyu-icon-dengpao flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple anzhiyufont anzhiyu-icon-sanmingzhi flat"><p>剪刀石头布</p></div><div class="note green anzhiyufont anzhiyu-icon-ic_train flat"><p>前端最讨厌的浏览器</p></div><p><code>fontawesome 图标</code>，开启主题配置文件中的<code>icons.fontawesome</code>为<code>true</code>后可见</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021 年快到了….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-fan flat"><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><ol start="4"><li>disabled 样式</li></ol><p><code>主题内置阿里图标</code></p><div class="note anzhiyufont anzhiyu-icon-rocket disabled"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue anzhiyufont anzhiyu-icon-bullhorn disabled"><p>2022 年快到了….</p></div><div class="note pink anzhiyufont anzhiyu-icon-instagram disabled"><p>小心开车 安全至上</p></div><div class="note red anzhiyufont anzhiyu-icon-fan disabled"><p>这是三片呢？还是四片？</p></div><div class="note orange anzhiyufont anzhiyu-icon-dengpao disabled"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple anzhiyufont anzhiyu-icon-sanmingzhi disabled"><p>剪刀石头布</p></div><div class="note green anzhiyufont anzhiyu-icon-ic_train disabled"><p>前端最讨厌的浏览器</p></div><p><code>fontawesome 图标</code>，开启主题配置文件中的<code>icons.fontawesome</code>为<code>true</code>后可见</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021 年快到了….</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-fan disabled"><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><ol start="5"><li>no-icon 样式</li></ol><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021 年快到了….</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div></div><div class="tab-item-content" id="note-5"><p><code>方法一</code></p><ol><li><code>simple</code>样式</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>modern</code>样式</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>flat</code>样式</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>disabled</code>样式</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><code>no-icon</code>样式</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p><code>方法二</code></p><p>图标支持 <code>fontawesome</code> 和 <code>主题内置的阿里图标</code>，使用方法为加上对应的类名，<code>fontawesome</code>图标需开启主题配置文件中<code>icons.fontawesome</code>，默认未开启 fontawesome</p><ol><li><p>simple 样式<br><code>主题内置阿里图标</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;anzhiyufont anzhiyu-icon-rocket&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;anzhiyufont anzhiyu-icon-bullhorn&#x27; simple %&#125;2022 年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;anzhiyufont anzhiyu-icon-instagram&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;anzhiyufont anzhiyu-icon-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;anzhiyufont anzhiyu-icon-dengpao&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;anzhiyufont anzhiyu-icon-sanmingzhi&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;anzhiyufont anzhiyu-icon-ic<span class="emphasis">_train&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span></span><br></pre></td></tr></table></figure><p><code>fontawesome 图标</code>，开启主题配置文件中的<code>icons.fontawesome</code>为<code>true</code>后可见</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2022 年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;icon-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p>modern 样式<br><code>主题内置阿里图标</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;anzhiyufont anzhiyu-icon-rocket&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;anzhiyufont anzhiyu-icon-bullhorn&#x27; modern %&#125;2022 年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;anzhiyufont anzhiyu-icon-instagram&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;anzhiyufont anzhiyu-icon-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;anzhiyufont anzhiyu-icon-dengpao&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;anzhiyufont anzhiyu-icon-sanmingzhi&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;anzhiyufont anzhiyu-icon-ic<span class="emphasis">_train&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span></span><br></pre></td></tr></table></figure><p><code>fontawesome 图标</code>，开启主题配置文件中的<code>icons.fontawesome</code>为<code>true</code>后可见</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021 年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;icon-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p>flat 样式<br><code>主题内置阿里图标</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;anzhiyufont anzhiyu-icon-rocket&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;anzhiyufont anzhiyu-icon-bullhorn&#x27; flat %&#125;2022 年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;anzhiyufont anzhiyu-icon-instagram&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;anzhiyufont anzhiyu-icon-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;anzhiyufont anzhiyu-icon-dengpao&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;anzhiyufont anzhiyu-icon-sanmingzhi&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;anzhiyufont anzhiyu-icon-ic<span class="emphasis">_train&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span></span><br></pre></td></tr></table></figure><p><code>fontawesome 图标</code>，开启主题配置文件中的<code>icons.fontawesome</code>为<code>true</code>后可见</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021 年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;icon-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p>disabled 样式<br><code>主题内置阿里图标</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;anzhiyufont anzhiyu-icon-rocket&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;anzhiyufont anzhiyu-icon-bullhorn&#x27; disabled %&#125;2022 年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;anzhiyufont anzhiyu-icon-instagram&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;anzhiyufont anzhiyu-icon-fan&#x27; disabled%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;anzhiyufont anzhiyu-icon-dengpao&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;anzhiyufont anzhiyu-icon-sanmingzhi&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;anzhiyufont anzhiyu-icon-ic<span class="emphasis">_train&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span></span><br></pre></td></tr></table></figure><p><code>fontawesome 图标</code>，开启主题配置文件中的<code>icons.fontawesome</code>为<code>true</code>后可见</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021 年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;icon-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p>no-icon 样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue no-icon %&#125;2021 年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li></ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="音频-audio"><a href="#音频-audio" class="headerlink" title="音频 audio"></a>音频 audio</h2><div class="tabs" id="audio"><ul class="nav-tabs"><button type="button" class="tab " data-href="audio-1">标签语法</button><button type="button" class="tab  active" data-href="audio-2">样式预览</button><button type="button" class="tab " data-href="audio-3">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="audio-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content active" id="audio-2"><div class="audio"><audio controls preload><source src='https://npm.elemecdn.com/anzhiyu-music@1.0.4/%E9%9D%92%E8%8A%B1%E7%93%B7/%E9%9D%92%E8%8A%B1%E7%93%B7.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div></div><div class="tab-item-content" id="audio-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://npm.elemecdn.com/anzhiyu-music@1.0.4/%E9%9D%92%E8%8A%B1%E7%93%B7/%E9%9D%92%E8%8A%B1%E7%93%B7.mp3 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="视频-video"><a href="#视频-video" class="headerlink" title="视频 video"></a>视频 video</h2><div class="tabs" id="video"><ul class="nav-tabs"><button type="button" class="tab " data-href="video-1">标签语法</button><button type="button" class="tab " data-href="video-2">参数配置</button><button type="button" class="tab  active" data-href="video-3">样式预览</button><button type="button" class="tab " data-href="video-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content" id="video-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="video-2"><ol><li>对其方向：left, center, right</li><li>列数：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol></div><div class="tab-item-content active" id="video-3"><ol start="3"><li>100%宽度</li></ol><p><img src="https://bu.dusays.com/2023/06/01/6478a1eeb1386.png" alt="100%宽度"></p><ol start="2"><li>50%宽度</li></ol><p><img src="https://bu.dusays.com/2023/06/01/6478a20a5f242.png" alt="50%宽度"></p><ol start="3"><li>25%宽度</li></ol><p><img src="https://bu.dusays.com/2023/06/01/6478a22b26088.png" alt="25%宽度"></p></div><div class="tab-item-content" id="video-4"><ol><li>100%宽度</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>50%宽度</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>25%宽度</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> Tag Plugins </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/2022/11/11/CSS/"/>
      <url>/2022/11/11/CSS/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS属性"><a href="#CSS属性" class="headerlink" title="CSS属性"></a>CSS属性</h1><h2 id="背景（background）"><a href="#背景（background）" class="headerlink" title="背景（background）"></a>背景（background）</h2><blockquote><p><code>background-color</code>：背景色</p></blockquote><ul><li><p>color：red</p></li><li><p>rgb(red,green,blue)</p></li><li><p>rgba(red,green,blue,alpha)</p></li><li><p>16进制：#ffffffff</p></li></ul><blockquote><p><code>background-size</code>：背景大小</p></blockquote><ul><li><p>width height</p></li><li><p>w% h%</p></li><li><p>contain：把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区<br>域。铺不满盒子，有留白</p></li><li><p>cover：把背景图像扩展至足够大，以使背景图像完全覆盖背景区域，也许无法显示在背景定位区域中。</p></li></ul><blockquote><p><code>background-position</code>：背景位置</p></blockquote><ul><li><p>X值 Y值：10px 10px</p></li><li><p>X% Y%：10% 10%</p></li><li><p>方位 方位：left right top bottom center</p></li></ul><blockquote><p><code>background-image</code>：背景图片</p></blockquote><ul><li>url()</li></ul><blockquote><p><code>background-repeat</code>：背景平铺</p></blockquote><ul><li>repeat：默认平铺</li><li>repeat-x：X轴平铺</li><li>repeat-y：Y轴平铺</li><li>no-repeat：不平铺</li></ul><blockquote><p><code>background-attachment</code>：背景附属</p></blockquote><ul><li>scroll（默认）</li><li>fixed：固定在屏幕上</li></ul><h2 id="溢出属性（overflow）"><a href="#溢出属性（overflow）" class="headerlink" title="溢出属性（overflow）"></a>溢出属性（overflow）</h2><blockquote><p><code>overflow</code>：溢出</p></blockquote><ul><li>visible：默认值，溢出内容会显示在元素之外：</li><li>hidden：溢出内容隐藏；</li><li>scroll：滚动，溢出内容以滚动方式显示，</li><li>auto：如果有溢出会添加滚动条，没有溢出正常显示，</li><li>inherit：规定应该遵从父元素继承overflow属性的值。</li><li>overflow-x：X轴溢出；</li><li>overflow-y：Y轴溢出</li></ul><h2 id="空余空间（white-space）"><a href="#空余空间（white-space）" class="headerlink" title="空余空间（white-space）"></a>空余空间（white-space）</h2><blockquote><p><code>white-space</code>：空白空间</p></blockquote><ul><li>nowrap：不换行</li><li>pre：显示空格，回车，不换行</li><li>pre-wrap：显示空格，回车，换行</li><li>pre-line：显示回车，不显示空格，换行</li></ul><h1 id="CSS绘画"><a href="#CSS绘画" class="headerlink" title="CSS绘画"></a>CSS绘画</h1><blockquote><p>CSS样式也可以用来绘画</p></blockquote><blockquote><p>各种形状的显示，就需要用到CSS中的<strong>Border</strong>属性</p></blockquote><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><blockquote><p><font id="font">Border</font>：边框的复合属性</p></blockquote><blockquote><p>格式：border-width border-style border-color</p></blockquote><p><code id="code">border:2px soild red</code></p><table><thead><tr><th>属性</th><th>名称</th></tr></thead><tbody><tr><td>border-color</td><td>边框颜色</td></tr><tr><td>border-style</td><td>边框样式</td></tr><tr><td>border-width</td><td>边框宽度</td></tr></tbody></table><h3 id="border-width-边框宽度"><a href="#border-width-边框宽度" class="headerlink" title="border-width(边框宽度)"></a>border-width(边框宽度)</h3><blockquote><p>设置元素的所有(上，右，下，左)边框宽度</p></blockquote><blockquote><p>当边框样式为none，则边框宽度会重置为0，不允许指定负长度值</p></blockquote><blockquote><p>值的单位可以为：</p></blockquote><ul><li>长度单位(px） </li><li>绝对长度单位(cm,mm,in,pt,pc) </li><li>相对长度单位(ex,em,px)</li><li>也可以是:thin,mdeium和thick</li></ul><blockquote><p>写法格式</p></blockquote><p> 按照 上边框，右边框，下边框，左边框的顺序设置</p><ul><li>border-width: 15px 20px 10px 12px</li></ul><p> 按照 上边框 右边框和左边框 下边框</p><ul><li>border-width: 15px 20px 10px</li></ul><p> 按照 上边框和下边框 左边框和右边框</p><ul><li>border-width: 15px 10px</li></ul><p> 按照 上边框和下边框和左边框和右边框</p><ul><li>border-width: 15px</li></ul><blockquote><p>定义单边边框宽度</p></blockquote><ul><li>border-top-width</li><li>border-right-width</li><li>border-bottom-width</li><li>border-left-width</li></ul><h3 id="border-style-边框样式"><a href="#border-style-边框样式" class="headerlink" title="border-style(边框样式)"></a>border-style(边框样式)</h3><table><thead><tr><th>值</th><th>描述</th><th>例</th></tr></thead><tbody><tr><td>none</td><td>无边框</td><td><div id="bs" style="border:none"></div></td></tr><tr><td>hidden</td><td>隐藏边框</td><td><div id="bs" style="border-style:hidden"></div></td></tr><tr><td>dotted</td><td>点状边框</td><td><div id="bs" style="border-style:dotted"></div></td></tr><tr><td>dashed</td><td>虚线边框</td><td><div id="bs" style="border-style:dashed"></div></td></tr><tr><td>solid</td><td>实线边框</td><td><div id="bs" style="border-style:solid"></div></td></tr><tr><td>double</td><td>双线边框<br>两条单线与其间隔的和等于指定width值</td><td><div id="bs" style="border-style:double"></div></td></tr><tr><td>groove</td><td>根据border-color值画3D凹槽</td><td><div id="bs" style="border-style:groove;border-color:#57606f #2c2c54 #10ac84 #b71540"></div></td></tr><tr><td>ridge</td><td>根据border-color的值画菱形边框</td><td><div id="bs" style="border-style:ridge;border-color:#57606f #2c2c54 #10ac84 #b71540"></div></td></tr><tr><td>inset</td><td>根据border-color的值画3D凹边</td><td><div id="bs" style="border-style:inset;border-color:#57606f #2c2c54 #10ac84 #b71540"></div></td></tr><tr><td>outset</td><td>根据border-color的值画3D凸边</td><td><div id="bs" style="border-style:outset;border-color:#57606f #2c2c54 #10ac84 #b71540"></div></td></tr></tbody></table><h3 id="border-color-边框颜色"><a href="#border-color-边框颜色" class="headerlink" title="border-color(边框颜色)"></a>border-color(边框颜色)</h3><blockquote><p>用来定义上下左右的边框颜色</p></blockquote><div class="box" style="width:100px;height:100px;background-color:red;border:20px solid black;border-color:pink blue black green;margin:40px"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">border-top-color</span>: pink; <span class="comment">/* 上边框颜色 */</span></span><br><span class="line">    <span class="attribute">border-left-color</span>: blue; <span class="comment">/* 左边框颜色 */</span></span><br><span class="line">    <span class="attribute">border-right-color</span>: black; <span class="comment">/* 右边框颜色 */</span></span><br><span class="line">    <span class="attribute">border-bottom-color</span>: green; <span class="comment">/* 下边框颜色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><font style="color:pink;">来点神奇的</font></p></blockquote><div style="width:0px;height:0px;background-color:red;border:50px solid black;border-color:red blue black green;margin:40px;"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">50px</span> solid black;</span><br><span class="line">    <span class="attribute">border-color</span>: red blue black green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>设置元素的宽高值都为0 或边框宽度为元素宽高的50%</p></blockquote><h2 id="简单图形"><a href="#简单图形" class="headerlink" title="简单图形"></a>简单图形</h2><blockquote><p>颜色</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">    <span class="attr">--purple</span>: <span class="number">#880e4f</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="正方形"><a href="#正方形" class="headerlink" title="正方形"></a>正方形</h3><div style="width:100px;height:100px;background-color:var(--purple);margin:40px"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--purple);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h3><div style="width:100px;height:100px;margin:40px;border-width:50px;border-color:transparent transparent var(--purple) transparent;border-style:solid;"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent transparent <span class="built_in">var</span>(--purple)  transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="梯形"><a href="#梯形" class="headerlink" title="梯形"></a>梯形</h3><div style="width:100px;height:100px;margin:40px;border-width:30px;border-color:transparent transparent var(--purple) transparent;border-style:solid;"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--purple);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="圆形"><a href="#圆形" class="headerlink" title="圆形"></a>圆形</h3><div style="width:100px;height:100px;background-color:var(--purple);margin:40px;border-radius:50%;"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--purple);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扇形"><a href="#扇形" class="headerlink" title="扇形"></a>扇形</h3><div style="width:100px;height:100px;margin:40px;border-radius:50%;border-width:50px;border-style:solid;border-color: var(--purple) transparent transparent transparent;"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--purple);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="built_in">var</span>(--purple) transparent transparent transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="圆环"><a href="#圆环" class="headerlink" title="圆环"></a>圆环</h3><div style="width:100px;height:100px;margin:40px;border-radius:50%;border:30px solid var(--purple);"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--purple);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">30px</span> solid <span class="built_in">var</span>(--purple);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他样式"><a href="#其他样式" class="headerlink" title="其他样式"></a>其他样式</h2><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><div style="width:100px;height:100px;margin:50px;border-width:50px;border-color:var(--purple) var(--purple) transparent var(--purple);border-style:solid;"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#880e4f</span> <span class="number">#880e4f</span> transparent <span class="built_in">var</span>(--purple);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="爱心"><a href="#爱心" class="headerlink" title="爱心"></a>爱心</h3><div id="heart"></div><style>    #heart{        position: relative;        margin: 50px;        width: 50px;        height: 50px;        background: var(--purple);        transform: rotate(45deg);    }    #heart::after,#heart::before{        position: absolute;        content: "";        width: 100%;        height: 100%;        background: var(--purple);        border-radius: 50%;    }    #heart::after{        top: -50%;    }    #heart::before{        left: -50%;    }</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#heart</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--purple);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#heart</span><span class="selector-pseudo">::after</span>,<span class="selector-id">#heart</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--purple);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#heart</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#heart</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="箭头"><a href="#箭头" class="headerlink" title="箭头"></a>箭头</h3><div id="arrows"></div><style>    #arrows{        position: relative;        margin: 50px;        border: 50px solid transparent;        border-left-color: var(--purple);    }    #arrows::before{        position: absolute;        top: -30px;        left: -50px;        content: "";        border: 30px solid transparent;        border-left-color: white;    }</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#arrows</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-left-color</span>: <span class="built_in">var</span>(--purple);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#arrows</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">30px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-left-color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><style>#code{    position:relative;;    color: white;    background-color: black;    font-size: 20px;    font-weight:700;} #font{    color:red;    font-weight:700;}#bs{    box-sizing: border-box;    width:50px;    height:50px;    background-color:#ff6b81;    border: 7px solid black;    cursor: pointer;    text-align: center;    line-height: 50px;}#bs:hover{    transition: all 1s;    transform: scale(2);}:root{    --purple: #880e4f;}</style>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序</title>
      <link href="/2022/11/10/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2022/11/10/%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><ol><li><p><code>Pages</code><br> 用来存放所有小程序的页面<br><code>每个页面都以单独的文件夹存在，其中每个页面都由4个页面组成</code></p><ul><li><code>.js</code>文件：页面的脚本文件存放页面的数据，事件处理函数等</li><li><code>.json</code>文件： 当前页面的配置文件，配置窗口的外观，表现，同时这里的配置项会覆盖app.json的window中相同的配置项</li><li><code>.wxml</code>文件： 页面的模板结构文件</li><li><code>.wxss</code>文件： 当前页面的样式文件</li></ul></li><li><p><code>utils</code><br>用来存放工具性质的模块<br> 存放普通的功能模块文件，用来封装公共的函数或属性供页面使用</p></li><li><p><code>app.js</code><br> 整个小程序项目的入口文件，通过调用App()函数来启动整个小程序</p></li><li><p><code>app.json</code><br> 小程序项目的全局配置文件<br> 包括了小程序的所有<code>页面路径</code>、<code>界面表现</code>、<code>网络超时时间</code>、<code>底部 tab</code> 等</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">  <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;pages/logs/logs&quot;</span></span><br><span class="line"> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;window&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;backgroundTextStyle&quot;</span><span class="punctuation">:</span><span class="string">&quot;light&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;navigationBarBackgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#fff&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Weixin&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;navigationBarTextStyle&quot;</span><span class="punctuation">:</span><span class="string">&quot;black&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v2&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;sitemapLocation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sitemap.json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>pages</code>: 用来记录当前小程序的所有页面</li><li><code>window</code>: 全局定义小程序所有页面的背景色，文字颜色</li><li><code>style</code>: 全局定义定义小程序组件所使用的样式版本（默认为V2）</li><li><code>sitemapLocation</code>: 用来指明sitemap.json的位置</li></ul></li><li><p><code>app.wxss</code><br> 小程序项目的全局样式文件 </p></li><li><p><code>project.config.json</code><br> 项目的配置文件<br> 用来记录我们对小程序开发工具所做的个性化配置</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;项目配置文件&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;packOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ignore&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;setting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bundle&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userConfirmedBundleSwitch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;urlCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scopeDataCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;coverView&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;es6&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;postcss&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;compileHotReLoad&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lazyloadPlaceholderEnable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;preloadBackgroundData&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;minified&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;autoAudits&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;newFeature&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;uglifyFileName&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;uploadWithSourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;useIsolateContext&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nodeModules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;enhance&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;useMultiFrameRuntime&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;useApiHook&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;useApiHostProcess&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;showShadowRootInWxmlPanel&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;packNpmManually&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;enableEngineNative&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;packNpmRelationList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;minifyWXSS&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;showES6CompileOption&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;minifyWXML&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;babelSetting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ignore&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;disablePlugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outputPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;compileType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;miniprogram&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;libVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.19.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;appid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wxcb0e38c42bc1d98f&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;projectname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;miniprogram-92&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;condition&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editorSetting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tabIndent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;insertSpaces&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tabSize&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>setting</code>: 保存了编译相关的配置</li><li><code>projectname</code>: 保存的是项目名称</li><li><code>appid</code>: 保存的是小程序的账号ID</li></ul></li><li><p><code>sitemap.json</code><br> 用来配置小程序及其页面是否允许被微信索引</p></li></ol><h1 id="项目操作"><a href="#项目操作" class="headerlink" title="项目操作"></a>项目操作</h1><h2 id="新建小程序页面"><a href="#新建小程序页面" class="headerlink" title="新建小程序页面"></a>新建小程序页面</h2><p>在<code>app.json</code> -&gt; <code>pages</code> 中新增页面的存放路径(如：”pages&#x2F;页面名称&#x2F;页面名称”)，小程序开发工具会自动创建新页面</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;pages/logs/logs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;pages/personal/presonal&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="修改项目首页"><a href="#修改项目首页" class="headerlink" title="修改项目首页"></a>修改项目首页</h2><p>调整<code>app.json</code> -&gt; <code>pages</code> 数组中页面路径的前后顺序，小程序会把排在第一位的页面路径，当做首页进行渲染</p><h1 id="项目构成"><a href="#项目构成" class="headerlink" title="项目构成"></a>项目构成</h1><h2 id="WXML"><a href="#WXML" class="headerlink" title="WXML"></a>WXML</h2><p>WXML（WeiXin Markup Language）是小程序框架设计的一套标签语言，用来构建小程序页面的结构</p><ol><li>标签名称不同<ul><li>HTML: div,span,img,a</li><li>WXML: view,text,image,navigator</li></ul></li><li>属性节点不同<ul><li><a href="#">超链接</a></li><li><navigator url="/pages/home/home"></navigator></li></ul></li><li>提供了类似于Vue中的模板语法<ul><li>数据绑定</li><li>列表渲染</li><li>条件渲染</li></ul></li></ol><h2 id="WXSS"><a href="#WXSS" class="headerlink" title="WXSS"></a>WXSS</h2><ol><li>新增rpx尺寸单位<ul><li>CSS: 需手动进行像素单位的换算，例如: rem</li><li>WXSS: 在底层支持新的尺寸单位rpx，在不同大小屏幕上小程序会自动进行换算</li></ul></li><li>提供了全局的样式和局部的样式<ul><li>项目根目录中的<code>app.wxss</code>会作用于所有小程序页面</li><li>局部页面的<code>.wxss</code>仅对当前页面生效</li></ul></li><li>仅支持部分CSS选择器<ul><li>.calss 和 #id</li><li>element</li><li>并集选择器，后代选择器</li><li>::after 和 ::before等伪类选择器</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
